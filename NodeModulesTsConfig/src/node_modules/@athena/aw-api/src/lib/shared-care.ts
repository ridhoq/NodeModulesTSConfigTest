import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';

/**
 * 
 * @class SharedCare
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class SharedCare extends ApiClass {

    GetSharedCareUsersReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Retrieves a list of shared care users and who invited them.
     * @method
     * @name SharedCare#GetSharedCareUsersReport
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} authorization - access token
     */
    GetSharedCareUsersReport(parameters: {
        distributorId: string,
        sponsorId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    AcceptSharedCareInvitationForNewPatientURL(parameters: {
        invitationCode: string,
        model: Api.SharedCareInvitationAcceptBindingModel,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/incoming/invitations/{invitationCode}/acceptance';

        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that allows new users to accept a shared care invitation they've received.
     * @method
     * @name SharedCare#AcceptSharedCareInvitationForNewPatient
     * @param {string} invitationCode - The invitation code.
     * @param {} model - The shared care invitation acceptance model.
     */
    AcceptSharedCareInvitationForNewPatient(parameters: {
        invitationCode: string,
        model: Api.SharedCareInvitationAcceptBindingModel,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetSharedCareInvitationURL(parameters: {
        invitationCode: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/invitations/{invitationCode}';

        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that retrieves the specified shared care invitation.
     * @method
     * @name SharedCare#GetSharedCareInvitation
     * @param {string} invitationCode - The invitation code.
     */
    GetSharedCareInvitation(parameters: {
        invitationCode: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/invitations/{invitationCode}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    AcceptSharedCareInvitationForExistingPatientURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that allows existing Patient IO Patients
                    to accept a shared care invitation they've received.
    * @method
    * @name SharedCare#AcceptSharedCareInvitationForExistingPatient
         * @param {string} distributorId - The distributor identifier
         * @param {string} sponsorId - The sponsor identifier
         * @param {string} patientId - The invited's patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} invitationCode - The invitation code.
         * @param {string} authorization - access token
    */
    AcceptSharedCareInvitationForExistingPatient(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    ChangeOutgoingSharedCareMemberPermissionsURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        sharedCarePatientId: string,
        model: Api.SharedCarePermissionsBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that changes the shared care patient permissions.
     * @method
     * @name SharedCare#ChangeOutgoingSharedCareMemberPermissions
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} sharedCarePatientId - The shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The shared care permissions model.
     * @param {string} authorization - access token
     */
    ChangeOutgoingSharedCareMemberPermissions(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        sharedCarePatientId: string,
        model: Api.SharedCarePermissionsBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);

            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RemoveOutgoingSharedCareMemberURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        sharedCarePatientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that removes shared care rights from a patient, for a relation.
     * @method
     * @name SharedCare#RemoveOutgoingSharedCareMember
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} sharedCarePatientId - The shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    RemoveOutgoingSharedCareMember(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        sharedCarePatientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);

            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    DeclineSharedCareInvitationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that declines a shared care invitation.
     * @method
     * @name SharedCare#DeclineSharedCareInvitation
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeclineSharedCareInvitation(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetPendingReceivedSharedCareInvitationsURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that retrieves a patient's received shared care invitations.
     * @method
     * @name SharedCare#GetPendingReceivedSharedCareInvitations
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetPendingReceivedSharedCareInvitations(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RemovePatientFromIncomingSharedCareURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        sharedCarePatientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that removes a patient from the incoming shared care of the specified patient.
     * @method
     * @name SharedCare#RemovePatientFromIncomingSharedCare
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} sharedCarePatientId - The incoming shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    RemovePatientFromIncomingSharedCare(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        sharedCarePatientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);

            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RevokeSharedCareInvitationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that revokes a shared care invitation.
     * @method
     * @name SharedCare#RevokeSharedCareInvitation
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    RevokeSharedCareInvitation(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    SendSharedCareInvitationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        model: Api.SharedCareInvitationCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that creates a patient invitation, and sends a notice to the invited patient.
     * @method
     * @name SharedCare#SendSharedCareInvitation
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The shared care invitation creation model.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitation(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        model: Api.SharedCareInvitationCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    SendSharedCareInvitationEmailURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that sends the shared care invitation email.
     * @method
     * @name SharedCare#SendSharedCareInvitationEmail
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitationEmail(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        invitationCode: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);

            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}