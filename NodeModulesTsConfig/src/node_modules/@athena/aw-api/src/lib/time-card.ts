import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';

/**
 * 
 * @class TimeCard
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class TimeCard extends ApiClass {

    CreateTimeCardRecordURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        model: Api.TimeCardRecordCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that creates time card entries. Requires a checkin record,
                    may optionally include a checkout record.
    * @method
    * @name TimeCard#CreateTimeCardRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {} model - The time card record to create.
         * @param {string} authorization - access token
    */
    CreateTimeCardRecord(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        model: Api.TimeCardRecordCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetCurrentTimeCardURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves the current time card for a user (if a time card exists)
                    for a patient.
    * @method
    * @name TimeCard#GetCurrentTimeCard
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} patientId - Required - the  patient id must be specified
         * @param {string} authorization - access token
    */
    GetCurrentTimeCard(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    UpdateCurrentTimeCardURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        model: Api.CurrentTimeCardActionBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * If the user has an existing time
     * @method
     * @name TimeCard#UpdateCurrentTimeCard
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {} model - Requested update to the current time card.
     * @param {string} authorization - access token
     */
    UpdateCurrentTimeCard(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        model: Api.CurrentTimeCardActionBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetPatientTimeCardURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        fromDate ? : string,
        toDate ? : string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }

        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves the time card for a patient, showing all of a given sponsor's
                    user  interactions with that patient.
    * @method
    * @name TimeCard#GetPatientTimeCard
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - Filter to a single patient
         * @param {string} fromDate - The beginning point, in UTC, from which to search for time cards, inclusive. May be omitted
         * @param {string} toDate - The endpoints point, in UTC, to which to search for time cards, inclusive. May be omitted
         * @param {string} authorization - access token
    */
    GetPatientTimeCard(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        fromDate ? : string,
        toDate ? : string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetRecentTimeCardsURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves recent time card records for a user/patient. Generally, that
                    means records during the 24 hours prior to the most recent time card entry
    * @method
    * @name TimeCard#GetRecentTimeCards
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} patientId - Required - the  patient id must be specified
         * @param {string} authorization - access token
    */
    GetRecentTimeCards(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetTimeCardRecordURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        timeCardRecordId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);

        path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that retrieves the time card record corresponding to a particular id.
     * @method
     * @name TimeCard#GetTimeCardRecord
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {string} timeCardRecordId - The time card record identifier.
     * @param {string} authorization - access token
     */
    GetTimeCardRecord(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        timeCardRecordId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);

            if (parameters['timeCardRecordId'] === undefined) {
                reject(new Error('Missing required  parameter: timeCardRecordId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    UpdateTimeCardRecordURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        timeCardRecordId: string,
        model: Api.TimeCardRecordUpdateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);

        path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that updates time card record actions given a time card id.
                    All values for the action must be supplied, or existing data will be
                    blanked.
    * @method
    * @name TimeCard#UpdateTimeCardRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} timeCardRecordId - The time card record identifier.
         * @param {} model - The time card record update.
         * @param {string} authorization - access token
    */
    UpdateTimeCardRecord(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        timeCardRecordId: string,
        model: Api.TimeCardRecordUpdateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);

            if (parameters['timeCardRecordId'] === undefined) {
                reject(new Error('Missing required  parameter: timeCardRecordId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetUserPatientTimeCardURL(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        patientId ? : string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that retrieves the time card for a user's interactions with a patient
     * @method
     * @name TimeCard#GetUserPatientTimeCard
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {string} patientId - Optional - if not specified retrieves all timecards for all patients
     * @param {string} authorization - access token
     */
    GetUserPatientTimeCard(parameters: {
        distributorId: string,
        sponsorId: string,
        userId: string,
        patientId ? : string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{userId}', `${parameters['userId']}`);

            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }

            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}