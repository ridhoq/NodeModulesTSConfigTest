import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';

/**
 * 
 * @class PatientProfiles
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class PatientProfiles extends ApiClass {

    AddCodesToCodeCollectionOnSponsorPatientProfileURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        model: Api.CodeCollectionBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{elementId}', `${parameters['elementId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that adds or replaces codes on a profile code collection.
     * @method
     * @name PatientProfiles#AddCodesToCodeCollectionOnSponsorPatientProfile
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The code collection identifier.
     * @param {} model - The code collection model.
     * @param {string} authorization - access token
     */
    AddCodesToCodeCollectionOnSponsorPatientProfile(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        model: Api.CodeCollectionBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{elementId}', `${parameters['elementId']}`);

            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKeyURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        key: string,
        model: Api.CodeCollectionBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{elementId}', `${parameters['elementId']}`);

        path = path.replace('{key}', `${parameters['key']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that adds or replaces codes on a profile code collection.
     * @method
     * @name PatientProfiles#AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The code collection identifier.
     * @param {string} key - The instance of the patient profile definition to update.
     * @param {} model - The code collection model.
     * @param {string} authorization - access token
     */
    AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        key: string,
        model: Api.CodeCollectionBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{elementId}', `${parameters['elementId']}`);

            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }

            path = path.replace('{key}', `${parameters['key']}`);

            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    AddElementTagsToSponsorPatientProfileURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTagElementId: string,
        model: Api.SetProfileTagElementBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that adds a tag to a tag element in the patients profile.
     * @method
     * @name PatientProfiles#AddElementTagsToSponsorPatientProfile
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {} model - The profile tag element model.
     * @param {string} authorization - access token
     */
    AddElementTagsToSponsorPatientProfile(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTagElementId: string,
        model: Api.SetProfileTagElementBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);

            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    AddElementTagsToSponsorPatientProfileInstanceURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTagElementId: string,
        key: string,
        model: Api.SetProfileTagElementBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);

        path = path.replace('{key}', `${parameters['key']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that adds a tag to a tag element in the patients profile.
     * @method
     * @name PatientProfiles#AddElementTagsToSponsorPatientProfileInstance
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {string} key - The instance of the profile definition to retrieve.
     * @param {} model - The profile tage element model.
     * @param {string} authorization - access token
     */
    AddElementTagsToSponsorPatientProfileInstance(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTagElementId: string,
        key: string,
        model: Api.SetProfileTagElementBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);

            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }

            path = path.replace('{key}', `${parameters['key']}`);

            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetAllSponsorPatientProfilesURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves all instances of the patient profile within
                    the context of a particular sponsor. That is - retrieves the patient's profile record.
    * @method
    * @name PatientProfiles#GetAllSponsorPatientProfiles
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} authorization - access token
    */
    GetAllSponsorPatientProfiles(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetAllSponsorPatientProfilesForProfileDefinitionURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves all instances of the patient profile of
                    a particular patient profile definition, within the context of a particular
                    sponsor. That is - retrieves the patient's profile record.
    * @method
    * @name PatientProfiles#GetAllSponsorPatientProfilesForProfileDefinition
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} authorization - access token
    */
    GetAllSponsorPatientProfilesForProfileDefinition(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetSponsorPatientProfileURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves the default instance of a patient profile for a
                    particular patient profile definition, within  the context of a particular sponsor.
                    That is - retrieves the patient's profile record. This is the API to call for profiles
                    that are not instance based.
    * @method
    * @name PatientProfiles#GetSponsorPatientProfile
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} authorization - access token
    */
    GetSponsorPatientProfile(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    UpdateSponsorPatientProfileURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        model: Api.UpdateSponsorPatientProfileBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that supports updating multiple text and tag elements
                    within a patient's profile as a single operation.
    * @method
    * @name PatientProfiles#UpdateSponsorPatientProfile
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {} model - The sponsor patient profile update model.
         * @param {string} authorization - access token
    */
    UpdateSponsorPatientProfile(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        model: Api.UpdateSponsorPatientProfileBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetSponsorPatientProfileInstanceURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{key}', `${parameters['key']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that retrieves the patient profile for a particular instance of a particular patient
                    profile definition, within the context of a particular sponsor. That is - retrieves
                    the patient's profile record.
    * @method
    * @name PatientProfiles#GetSponsorPatientProfileInstance
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} key - The instance of the profile definition to retrieve.
         * @param {string} authorization - access token
    */
    GetSponsorPatientProfileInstance(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{key}', `${parameters['key']}`);

            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    UpdateSponsorPatientProfileInstanceURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        model: Api.UpdateSponsorPatientProfileBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{key}', `${parameters['key']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that supports updating multiple text and tag elements
                    within a patient's profile as a single operation.
    * @method
    * @name PatientProfiles#UpdateSponsorPatientProfileInstance
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} key - The instance of the profile definition to update.
         * @param {} model - The sponsor patient profile update model.
         * @param {string} authorization - access token
    */
    UpdateSponsorPatientProfileInstance(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        model: Api.UpdateSponsorPatientProfileBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{key}', `${parameters['key']}`);

            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RemoveInstanceFromSponsorPatientProfileURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{key}', `${parameters['key']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that deletes a specific instance of a patient profile for a particular patient
                    profile definition, within  the context of a particular sponsor.
    * @method
    * @name PatientProfiles#RemoveInstanceFromSponsorPatientProfile
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} key - The instance of the profile definition to delete.
         * @param {string} authorization - access token
    */
    RemoveInstanceFromSponsorPatientProfile(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{key}', `${parameters['key']}`);

            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    SetLinkTextURL(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        model: Api.UpdateSponsorPatientProfileInstanceLinkText,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{patientId}', `${parameters['patientId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{key}', `${parameters['key']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that sets the link text of a particular instance of a sponsor patient profile.
     * @method
     * @name PatientProfiles#SetLinkText
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} key - The instance of the patient profile definition to update.
     * @param {} model - The sponsor patient profile instance link text update model.
     * @param {string} authorization - access token
     */
    SetLinkText(parameters: {
        distributorId: string,
        sponsorId: string,
        patientId: string,
        patientProfileDefinitionId: string,
        key: string,
        model: Api.UpdateSponsorPatientProfileInstanceLinkText,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{patientId}', `${parameters['patientId']}`);

            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{key}', `${parameters['key']}`);

            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}