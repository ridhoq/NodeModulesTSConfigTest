import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';

/**
 * 
 * @class PatientProfileDefinitions
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class PatientProfileDefinitions extends ApiClass {

    AddPatientProfileDefinitionURL(parameters: {
        distributorId: string,
        model: Api.PatientProfileDefinitionCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that creates a patient profile definition within a distributor.
     * @method
     * @name PatientProfileDefinitions#AddPatientProfileDefinition
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The patient profile definition model.
     * @param {string} authorization - access token
     */
    AddPatientProfileDefinition(parameters: {
        distributorId: string,
        model: Api.PatientProfileDefinitionCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    AffiliatePatientProfileDefinitionToSponsorURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.IdBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that provisions a patient profile definition from a distributor to a sponsor.
     * @method
     * @name PatientProfileDefinitions#AffiliatePatientProfileDefinitionToSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The list of sponsor identifiers.
     * @param {string} authorization - access token
     */
    AffiliatePatientProfileDefinitionToSponsor(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.IdBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientProfileDefinitionCodeCollectionURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.ProfileDefinitionElementCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that creates a CodeCollection within a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionCodeCollection
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    CreatePatientProfileDefinitionCodeCollection(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.ProfileDefinitionElementCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientProfileDefinitionTagElementURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.ProfileDefinitionElementCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that creates a TagElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTagElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    CreatePatientProfileDefinitionTagElement(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.ProfileDefinitionElementCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientProfileDefinitionTextElementURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.ProfileDefinitionElementCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that creates a TextElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTextElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    CreatePatientProfileDefinitionTextElement(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.ProfileDefinitionElementCreateBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    GetPatientProfileDefinitionURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that retrieves a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#GetPatientProfileDefinition
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} authorization - access token
     */
    GetPatientProfileDefinition(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RemovePatientProfileDefinitionCodeCollectionURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{elementId}', `${parameters['elementId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that removes a CodeableElement with a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionCodeCollection
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The patient profile definition code element identifier.
     * @param {string} authorization - access token
     */
    RemovePatientProfileDefinitionCodeCollection(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{elementId}', `${parameters['elementId']}`);

            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RemovePatientProfileDefinitionTagElementURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTagElementId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that removes a TagElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTagElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {string} authorization - access token
     */
    RemovePatientProfileDefinitionTagElement(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTagElementId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);

            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    RemovePatientProfileDefinitionTextElementURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTextElementId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{patientProfileDefinitionTextElementId}', `${parameters['patientProfileDefinitionTextElementId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that removes a TextElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTextElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTextElementId - The patient profile definition text element identifier.
     * @param {string} authorization - access token
     */
    RemovePatientProfileDefinitionTextElement(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        patientProfileDefinitionTextElementId: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionTextElementId}', `${parameters['patientProfileDefinitionTextElementId']}`);

            if (parameters['patientProfileDefinitionTextElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTextElementId'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    SetPatientProfileDefinitionCategoryURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.PatientProfileDefinitionElementCategoryBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that sets the category on any PatientProfileDefinition.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - PaitnetProfileDefinition information to update.
     * @param {string} authorization - access token
     */
    SetPatientProfileDefinitionCategory(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        model: Api.PatientProfileDefinitionElementCategoryBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    SetPatientProfileDefinitionElementCategoryURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        model: Api.PatientProfileDefinitionElementCategoryBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{elementId}', `${parameters['elementId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that sets the category on any PatientProfileDefinition element.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The element identifier.
     * @param {} model - PatientProfileDefinition information to update
     * @param {string} authorization - access token
     */
    SetPatientProfileDefinitionElementCategory(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        elementId: string,
        model: Api.PatientProfileDefinitionElementCategoryBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{elementId}', `${parameters['elementId']}`);

            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    SetPatientProfileDefinitionElementCategoryByNameURL(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        elementName: string,
        model: Api.PatientProfileDefinitionElementCategoryBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

        path = path.replace('{elementName}', `${parameters['elementName']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * This is a method that sets the category on any PatientProfileDefinition element by looking up the element by name.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategoryByName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementName - Name of the element.
     * @param {} model - PatientProfileDefinition information to update
     * @param {string} authorization - access token
     */
    SetPatientProfileDefinitionElementCategoryByName(parameters: {
        distributorId: string,
        patientProfileDefinitionId: string,
        elementName: string,
        model: Api.PatientProfileDefinitionElementCategoryBindingModel,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);

            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }

            path = path.replace('{elementName}', `${parameters['elementName']}`);

            if (parameters['elementName'] === undefined) {
                reject(new Error('Missing required  parameter: elementName'));
                return;
            }

            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }

            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}