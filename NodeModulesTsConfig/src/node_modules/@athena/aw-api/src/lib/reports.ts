import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';

/**
 * 
 * @class Reports
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Reports extends ApiClass {

    CreateCarePlanAdherenceReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanAdherenceReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanAdherenceReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCarePlanAdherenceReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanAdherenceReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanAdherenceReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCarePlanEngagementReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient engagement percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanEngagementReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanEngagementReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCarePlanEngagementReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient engagement percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanEngagementReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanEngagementReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCareTeamOrganizationEngagementReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets the organization engagement reports
                    for the given spondor identifier and date range.
    * @method
    * @name Reports#CreateCareTeamOrganizationEngagementReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamOrganizationEngagementReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCareTeamOrganizationSessionReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets the organization session reports
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCareTeamOrganizationSessionReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamOrganizationSessionReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCareTeamSponsorEngagementReportURL(parameters: {
        distributorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/engagement';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a sponsor engagement reports
                    for the given distributor and date range.
    * @method
    * @name Reports#CreateCareTeamSponsorEngagementReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamSponsorEngagementReport(parameters: {
        distributorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/engagement';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateCareTeamSponsorSessionReportURL(parameters: {
        distributorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/sessions';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets the sponsor session reports
                    for the given distributor identifier and date range.
    * @method
    * @name Reports#CreateCareTeamSponsorSessionReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamSponsorSessionReport(parameters: {
        distributorId: string,
        fromDate: string,
        toDate: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/sessions';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientChannelReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient channel percent usage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientChannelReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientChannelReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientChannelReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient channel percent usage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientChannelReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientChannelReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientDemographicReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient demographic report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientDemographicReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientDemographicReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientDemographicReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient demographic report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientDemographicReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientDemographicReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientInvitationReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient invitation report
                    for the given sponsor identifier and date range within
                    all organizations in the sponsor.
    * @method
    * @name Reports#CreatePatientInvitationReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientInvitationReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreatePatientInvitationReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient invitation report within a specific organization
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientInvitationReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientInvitationReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateSponsorEngagementAndAdherenceReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient engagement and adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorEngagementAndAdherenceReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorEngagementAndAdherenceReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateSponsorEngagementAndAdherenceReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient engagement and adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorEngagementAndAdherenceReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorEngagementAndAdherenceReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateSponsorOnboardingReportURL(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient invitations sent, activated, and pending report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorOnboardingReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorOnboardingReport(parameters: {
        distributorId: string,
        sponsorId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    CreateSponsorOnboardingReportForOrganizationURL(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding';

        path = path.replace('{distributorId}', `${parameters['distributorId']}`);

        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }

        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * This is a method that gets a patient invitations sent, activated, and pending report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorOnboardingReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorOnboardingReportForOrganization(parameters: {
        distributorId: string,
        sponsorId: string,
        organizationId: string,
        fromDate: string,
        toDate: string,
        authorization: string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';

            path = path.replace('{distributorId}', `${parameters['distributorId']}`);

            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }

            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);

            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }

            path = path.replace('{organizationId}', `${parameters['organizationId']}`);

            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }

            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }

            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }

            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }

            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }

            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }

            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}