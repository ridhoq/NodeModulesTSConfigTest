!function(r){function e(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return r[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var t={};e.m=r,e.c=t,e.d=function(r,t,i){e.o(r,t)||Object.defineProperty(r,t,{configurable:!1,enumerable:!0,get:i})},e.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(t,"a",t),t},e.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},e.p="",e(e.s=1)}([function(r,e){function t(r){return null!==r&&"object"==typeof r}r.exports=t},function(r,e,t){r.exports=t(2)},function(r,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=t(3),o=(t.n(i),i);class n{constructor(r,e){this.logger=e,this.domain="",this.errorHandlers=[],r&&(this.domain=r)}getDomain(){return this.domain}addErrorHandler(r){this.errorHandlers.push(r)}request(r,e,t,i,n,a,s,d){this.logger&&this.logger.log(`Call ${r} ${e}`);let u=(o.default||o)(r,e).query(n);Object.keys(i).forEach(r=>{u.set(r,i[r])}),t&&u.send(t),"object"==typeof t&&"Buffer"!==t.constructor.name&&u.set("Content-Type","application/json"),Object.keys(a).length>0&&(u.type("form"),u.send(a)),u.end((r,e)=>{r||!e.ok?(s(r),this.errorHandlers.forEach(e=>e(r))):d(e)})}}var a=n;class s extends a{LookupAccountByUserNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;void 0!==r.userName&&(e.userName=r.userName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let i=Object.keys(e);return t+"/api/accounts"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}LookupAccountByUserName(r){const e=r.$domain?r.$domain:this.domain;let t={},i={},o={};return new Promise((n,a)=>{i.Accept="application/json, text/json, application/xml, text/xml";i["Content-Type"]="";void 0!==r.userName&&(t.userName=r.userName);if(void 0===r.userName)return void a(new Error("Missing required  parameter: userName"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){t[e]=r.$queryParameters[e]});this.request("GET",e+"/api/accounts",void 0,i,t,o,a,n)})}SendPasswordResetEmailURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let i=Object.keys(e);return t+"/api/accounts/passwordreset"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendPasswordResetEmail(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+"/api/accounts/passwordreset",t,o,i,n,s,a)})}ResetPasswordWithTokenURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let i=Object.keys(e);return t+"/api/accounts/password"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ResetPasswordWithToken(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+"/api/accounts/password",t,o,i,n,s,a)})}}class d extends a{GetURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/audit/aggregates/{id}";i=i.replace("{id}",`${r.id}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Get(r){const e=r.$domain?r.$domain:this.domain;let t="/api/audit/aggregates/{id}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{id}",`${r.id}`);if(void 0===r.id)return void s(new Error("Missing required  parameter: id"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class u extends a{RecordBeaconURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let i=Object.keys(e);return t+"/api/beacons"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RecordBeacon(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+"/api/beacons",t,o,i,n,s,a)})}RecordInvitationBeaconURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let i=Object.keys(e);return t+"/api/beacons/invitations"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RecordInvitationBeacon(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+"/api/beacons/invitations",t,o,i,n,s,a)})}}class p extends a{GetBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let i=Object.keys(e);return t+"/api/branding"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetBranding(r){const e=r.$domain?r.$domain:this.domain;let t={},i={},o={};return new Promise((n,a)=>{i.Accept="application/json, text/json, application/xml, text/xml";i["Content-Type"]="";void 0!==r.authorization&&(i.Authorization=r.authorization);if(void 0===r.authorization)return void a(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){t[e]=r.$queryParameters[e]});this.request("GET",e+"/api/branding",void 0,i,t,o,a,n)})}GetDistributorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/branding/distributors/{distributorId}";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/branding/distributors/{distributorId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/branding/distributors/{distributorId}/sponsors/{sponsorId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/branding/distributors/{distributorId}/sponsors/{sponsorId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetOrganizationBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/branding/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetOrganizationBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/branding/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class c extends a{GetTransactionalSmartEmailsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/transactional/smartEmail";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTransactionalSmartEmails(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/transactional/smartEmail",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSubscriberListsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/driplists";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSubscriberLists(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/driplists",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class m extends a{GetCareCenterContentForDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterContentForDistributor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/content",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}AddDistributorCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddDistributorCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/content",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetCareCenterContentForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterContentForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}AddCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetDistributorCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content/{contentId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/content/{contentId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateDistributorCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content/{contentId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/content/{contentId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void d(new Error("Missing required  parameter: contentId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteDistributorCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content/{contentId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/content/{contentId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void d(new Error("Missing required  parameter: contentId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UploadDistributorMediaURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content/{contentId}/image";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadDistributorMedia(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/content/{contentId}/image",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeleteDistributorMediaURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content/{contentId}/image";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorMedia(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/content/{contentId}/image",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UploadMediaURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadMedia(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeleteMediaURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{contentId}",`${r.contentId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteMedia(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{contentId}",`${r.contentId}`);if(void 0===r.contentId)return void s(new Error("Missing required  parameter: contentId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetCareCenterContentForCareTeamURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/careteams/{organizationId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterContentForCareTeam(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/careteams/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UploadDistributorCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/content/upload";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadDistributorCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/content/upload",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}UploadCareCenterContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/upload";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadCareCenterContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/upload",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetCareCenterContentForPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter/content";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterContentForPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter/content",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetCareCenterNodesForPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterNodesForPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class I extends a{GetCareCenterContentForPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/carecenter/content";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterContentForPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/carecenter/content",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetCareCenterNodesForPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/carecenter";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCareCenterNodesForPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/carecenter",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class l extends a{AddCategoriesToCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCategoriesToCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.categoryIdList&&(t=r.categoryIdList);if(void 0===r.categoryIdList)return void d(new Error("Missing required  parameter: categoryIdList"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveCategoriesFromCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveCategoriesFromCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}AddCategoriesToDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCategoriesToDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.categoryIdList&&(t=r.categoryIdList);if(void 0===r.categoryIdList)return void d(new Error("Missing required  parameter: categoryIdList"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveCategoriesFromDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveCategoriesFromDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}ApplyCarePlanSponsorCarePlanIdURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/sponsorcareplanid";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ApplyCarePlanSponsorCarePlanId(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/sponsorcareplanid",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSponsorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CloneCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CloneCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.carePlanCloneModel&&(t=r.carePlanCloneModel);if(void 0===r.carePlanCloneModel)return void d(new Error("Missing required  parameter: carePlanCloneModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ArchiveCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ArchiveCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CloneDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CloneDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.carePlanCloneModel&&(t=r.carePlanCloneModel);if(void 0===r.carePlanCloneModel)return void d(new Error("Missing required  parameter: carePlanCloneModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ArchiveDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ArchiveDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetCarePlansURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCarePlans(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.carePlan&&(t=r.carePlan);if(void 0===r.carePlan)return void d(new Error("Missing required  parameter: carePlan"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetDistributorCarePlansURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorCarePlans(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}RenameDistributorCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameDistributorCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/careplans/{carePlanId}";i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t="/api/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetCarePlanForDateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/days/{dayOfCare}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{dayOfCare}",`${r.dayOfCare}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCarePlanForDate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/days/{dayOfCare}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{dayOfCare}",`${r.dayOfCare}`);if(void 0===r.dayOfCare)return void s(new Error("Missing required  parameter: dayOfCare"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RecordSupervisorApprovalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/approve";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RecordSupervisorApproval(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/approve",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RenameCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class f extends a{GetCategoriesForDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCategoriesForDistributor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/categories",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateCategoryForDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCategoryForDistributor(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.categoryModel&&(t=r.categoryModel);if(void 0===r.categoryModel)return void d(new Error("Missing required  parameter: categoryModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}RenameDistributorCategoryURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/categories/{categoryId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{categoryId}",`${r.categoryId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameDistributorCategory(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/categories/{categoryId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{categoryId}",`${r.categoryId}`);if(void 0===r.categoryId)return void d(new Error("Missing required  parameter: categoryId"));void 0!==r.nameModel&&(t=r.nameModel);if(void 0===r.nameModel)return void d(new Error("Missing required  parameter: nameModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetCategoriesForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCategoriesForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/categories",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateCategoryForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCategoryForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.categoryModel&&(t=r.categoryModel);if(void 0===r.categoryModel)return void d(new Error("Missing required  parameter: categoryModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}RenameCategoryURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/categories/{categoryId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{categoryId}",`${r.categoryId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameCategory(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/categories/{categoryId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{categoryId}",`${r.categoryId}`);if(void 0===r.categoryId)return void d(new Error("Missing required  parameter: categoryId"));void 0!==r.categoryName&&(t=r.categoryName);if(void 0===r.categoryName)return void d(new Error("Missing required  parameter: categoryName"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class h extends a{GetDistributorChatBotContextModelURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/chatbot/{chatBotContextId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorChatBotContextModel(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/chatbot/{chatBotContextId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void s(new Error("Missing required  parameter: chatBotContextId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorChatBotContextModelURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorChatBotContextModel(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void s(new Error("Missing required  parameter: chatBotContextId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetAllSponsorChatBotContextModelsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/context/all";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetAllSponsorChatBotContextModels(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/context/all",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateDistributorBotAsyncURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/bot";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorBotAsync(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/bot",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreateChatBotDistributorContextURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/chatbot";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateChatBotDistributorContext(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/chatbot",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreateChatBotSponsorContextURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateChatBotSponsorContext(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AddDistributorChatBotContextItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddDistributorChatBotContextItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void d(new Error("Missing required  parameter: chatBotContextId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AddSponsorChatBotContextItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddSponsorChatBotContextItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void d(new Error("Missing required  parameter: chatBotContextId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}SendChatBotResponseFeedbackURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}/feedback";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendChatBotResponseFeedback(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}/feedback",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void d(new Error("Missing required  parameter: chatBotContextId"));i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`);if(void 0===r.chatBotContextItemId)return void d(new Error("Missing required  parameter: chatBotContextItemId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}UpdateDistributorChatBotContextItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorChatBotContextItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void d(new Error("Missing required  parameter: chatBotContextId"));i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`);if(void 0===r.chatBotContextItemId)return void d(new Error("Missing required  parameter: chatBotContextItemId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteDistributorChatBotContextItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorChatBotContextItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void s(new Error("Missing required  parameter: chatBotContextId"));t=t.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`);if(void 0===r.chatBotContextItemId)return void s(new Error("Missing required  parameter: chatBotContextItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UpdateSponsorChatBotContextItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorChatBotContextItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void d(new Error("Missing required  parameter: chatBotContextId"));i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`);if(void 0===r.chatBotContextItemId)return void d(new Error("Missing required  parameter: chatBotContextItemId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteSponsorChatBotContextItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{chatBotContextId}",`${r.chatBotContextId}`),i=i.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteSponsorChatBotContextItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{chatBotContextId}",`${r.chatBotContextId}`);if(void 0===r.chatBotContextId)return void s(new Error("Missing required  parameter: chatBotContextId"));t=t.replace("{chatBotContextItemId}",`${r.chatBotContextItemId}`);if(void 0===r.chatBotContextItemId)return void s(new Error("Missing required  parameter: chatBotContextItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}}class b extends a{GetPatientsCarePlansURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsCarePlans(r){const e=r.$domain?r.$domain:this.domain;let t="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreatePatientTaskDataExtractURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientTaskDataExtract(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetPatientsTaskCompletionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.taskName&&(e.taskName=r.taskName),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsTaskCompletion(r){const e=r.$domain?r.$domain:this.domain;let t="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml, text/csv";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.taskName&&(i.taskName=r.taskName);if(void 0===r.taskName)return void s(new Error("Missing required  parameter: taskName"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetActiveUsersInformationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetActiveUsersInformation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class v extends a{GetSponsorOrganizationConversationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),void 0!==r.tags&&(e.tags=r.tags),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorOrganizationConversations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.tags&&(i.tags=r.tags);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorOrganizationConversationsMetaDataURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations/metadata";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorOrganizationConversationsMetaData(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations/metadata",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetOrganizationConversationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),void 0!==r.tags&&(e.tags=r.tags),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetOrganizationConversations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.tags&&(i.tags=r.tags);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetUserConversationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),void 0!==r.tags&&(e.tags=r.tags),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetUserConversations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.tags&&(i.tags=r.tags);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientConversationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations";i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),void 0!==r.tags&&(e.tags=r.tags),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientConversations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/conversations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.tags&&(i.tags=r.tags);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientConversationsSponsorIdentifierURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),void 0!==r.tags&&(e.tags=r.tags),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientConversationsSponsorIdentifier(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.tags&&(i.tags=r.tags);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class y extends a{GetMessageablePartiesForPatientExternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations/messageable";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetMessageablePartiesForPatientExternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations/messageable",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetMessageablePartiesForPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/messageable";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetMessageablePartiesForPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/conversations/messageable",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetMessageablePatientsForUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/messageable";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetMessageablePatientsForUser(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/messageable",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetMessageablePatientsForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/messageable";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetMessageablePatientsForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/messageable",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class q extends a{GetOrganizationConversationWithPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetOrganizationConversationWithPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateOrganizationConversationStatusURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationConversationStatus(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}SendMessageFromOrganizationToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendMessageFromOrganizationToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.messageModel&&(t=r.messageModel);if(void 0===r.messageModel)return void d(new Error("Missing required  parameter: messageModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetUserConversationWithPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{userId}",`${r.userId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetUserConversationWithPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateUserConversationStateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateUserConversationState(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}SendMessageFromUserToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendMessageFromUserToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.messageModel&&(t=r.messageModel);if(void 0===r.messageModel)return void d(new Error("Missing required  parameter: messageModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetPatientConversationWithOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientConversationWithOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdatePatientConversationWithOrganizationStatusURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatientConversationWithOrganizationStatus(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}SendMessageFromPatientToOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendMessageFromPatientToOrganization(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.messageModel&&(t=r.messageModel);if(void 0===r.messageModel)return void d(new Error("Missing required  parameter: messageModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetPatientConversationWithUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),void 0!==r.fromDateTime&&(e.fromDateTime=r.fromDateTime),void 0!==r.toDateTime&&(e.toDateTime=r.toDateTime),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientConversationWithUser(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.fromDateTime&&(i.fromDateTime=r.fromDateTime);void 0!==r.toDateTime&&(i.toDateTime=r.toDateTime);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdatePatientConversationWithUserStatusURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatientConversationWithUserStatus(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}SendMessageFromPatientToUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendMessageFromPatientToUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.messageModel&&(t=r.messageModel);if(void 0===r.messageModel)return void d(new Error("Missing required  parameter: messageModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class $ extends a{ChangeDistributorSettingsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/settings";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeDistributorSettings(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/settings",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}CreateAuthorizationCodeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/authorizationcodes";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateAuthorizationCode(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/authorizationcodes",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.authCodeModel&&(t=r.authCodeModel);if(void 0===r.authCodeModel)return void d(new Error("Missing required  parameter: authCodeModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteAuthorizationCodeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes/{authorizationCode}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{authorizationCode}",`${r.authorizationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteAuthorizationCode(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes/{authorizationCode}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{authorizationCode}",`${r.authorizationCode}`);if(void 0===r.authorizationCode)return void s(new Error("Missing required  parameter: authorizationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}CreateDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let i=Object.keys(e);return t+"/api/distributors"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributor(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.distributorModel&&(t=r.distributorModel);if(void 0===r.distributorModel)return void s(new Error("Missing required  parameter: distributorModel"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+"/api/distributors",t,o,i,n,s,a)})}GetSponsorsForDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorsForDistributor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsor(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.sponsorModel&&(t=r.sponsorModel);if(void 0===r.sponsorModel)return void d(new Error("Missing required  parameter: sponsorModel"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetDistributorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/branding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateDistributorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorBranding(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/branding",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteDistributorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/branding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RenameSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameSponsor(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UploadDistributorBrandingEmailLogoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/branding/emaillogo";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadDistributorBrandingEmailLogo(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/branding/emaillogo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}UploadDistributorBrandingLogoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/branding/logo";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadDistributorBrandingLogo(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/branding/logo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}}class P extends a{AddExportFileRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddExportFileRecord(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteExportFileRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fileName&&(e.fileName=r.fileName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteExportFileRecord(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fileName&&(i.fileName=r.fileName);if(void 0===r.fileName)return void s(new Error("Missing required  parameter: fileName"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}AddImportFileRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddImportFileRecord(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteImportFileRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fileName&&(e.fileName=r.fileName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteImportFileRecord(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fileName&&(i.fileName=r.fileName);if(void 0===r.fileName)return void s(new Error("Missing required  parameter: fileName"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetIntegrationManagementDataURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetIntegrationManagementData(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}DeleteIntegrationManagementDataURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteIntegrationManagementData(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UpdateIntegrationManagementCredentialsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/credentials";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateIntegrationManagementCredentials(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/credentials",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class g extends a{GetInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/invitations/{invitationCode}";i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetInvitation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/invitations/{invitationCode}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GenerateActivationCodeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/invitations/{invitationCode}/activationcode";i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GenerateActivationCode(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/invitations/{invitationCode}/activationcode",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void d(new Error("Missing required  parameter: invitationCode"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class E extends a{IsPatientDeactivatedURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.sponsorPatientId&&(e.sponsorPatientId=r.sponsorPatientId),void 0!==r.dateOfBirth&&(e.dateOfBirth=r.dateOfBirth),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}IsPatientDeactivated(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.sponsorPatientId&&(i.sponsorPatientId=r.sponsorPatientId);if(void 0===r.sponsorPatientId)return void s(new Error("Missing required  parameter: sponsorPatientId"));void 0!==r.dateOfBirth&&(i.dateOfBirth=r.dateOfBirth);if(void 0===r.dateOfBirth)return void s(new Error("Missing required  parameter: dateOfBirth"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}ActivateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Activate(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetPatientCarePlansURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientCarePlans(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}AddCarePlansToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCarePlansToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}CloneCarePlanToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CloneCarePlanToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AddCategoriesToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCategoriesToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}AffiliatePatientFromOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AffiliatePatientFromOrganization(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ArchivePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/archive";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ArchivePatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/archive",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}GetBroadcastToPatientsShortCodesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetBroadcastToPatientsShortCodes(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}BroadcastToPatientsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}BroadcastToPatients(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}BulkUpdateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/bulkUpdate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}BulkUpdate(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/bulkUpdate",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}ChangePasswordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/password";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePassword(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/password",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangePatientRoleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/roles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePatientRole(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangePatientSettingsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/settings";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePatientSettings(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/settings",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ClearPatientAlertsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/alerts";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ClearPatientAlerts(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/alerts",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetPatientsForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreatePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreatePatientCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/patient";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/patient",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientInFilamentDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let i=Object.keys(e);return t+"/api/patients"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientInFilamentDistributor(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+"/api/patients",t,o,i,n,s,a)})}CreatePersonalCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/personal";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePersonalCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/personal",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeactivateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/deactivate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Deactivate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/deactivate",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}ReactivateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/reactivate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Reactivate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/reactivate",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}GetPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdatePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeletePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeletePatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UploadPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeletePhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeletePhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetAlertedPatientsForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/alerted";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetAlertedPatientsForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/alerted",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetAlertedPatientsForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/alerted";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetAlertedPatientsForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/alerted",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetArchivedPatientsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/archived-patients";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetArchivedPatients(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/archived-patients",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetCompletedTaskReadModelsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCompletedTaskReadModels(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientSchedulableTasksURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedulable";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientSchedulableTasks(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedulable",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientsForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetTaskOutcomesOverTimeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks/{taskId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{taskId}",`${r.taskId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),void 0!==r.intervalType&&(e.intervalType=r.intervalType),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTaskOutcomesOverTime(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks/{taskId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void s(new Error("Missing required  parameter: taskId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.intervalType&&(i.intervalType=r.intervalType);if(void 0===r.intervalType)return void s(new Error("Missing required  parameter: intervalType"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}PushScheduleUpdateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/pushscheduleupdate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}PushScheduleUpdate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/pushscheduleupdate",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}ReplacePatientCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ReplacePatientCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveCarePlanFromPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveCarePlanFromPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}ReplacePatientCategoryURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{categoryId}",`${r.categoryId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ReplacePatientCategory(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{categoryId}",`${r.categoryId}`);if(void 0===r.categoryId)return void d(new Error("Missing required  parameter: categoryId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveCategoryFromPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{categoryId}",`${r.categoryId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveCategoryFromPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{categoryId}",`${r.categoryId}`);if(void 0===r.categoryId)return void s(new Error("Missing required  parameter: categoryId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UnaffiliatePatientFromOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations/{organizationId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UnaffiliatePatientFromOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UnarchivePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/unarchive";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UnarchivePatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/unarchive",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}UpdatePatientFullNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/fullname";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatientFullName(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/fullname",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.fullName&&(t=r.fullName);if(void 0===r.fullName)return void d(new Error("Missing required  parameter: fullName"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdatePatientAddressURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/address";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatientAddress(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/address",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdatePatientTimeZoneURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/timezone";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatientTimeZone(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/timezone",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSignaledAlertsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/signaledalerts";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),void 0!==r.activeOnly&&(e.activeOnly=r.activeOnly),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSignaledAlerts(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/signaledalerts",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.activeOnly&&(i.activeOnly=r.activeOnly);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class j extends a{GetRecentActivityPatientsForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetRecentActivityPatientsForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPopulationCarePlansForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.carePlanIds&&(e.carePlanIds=r.carePlanIds),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPopulationCarePlansForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.carePlanIds&&(i.carePlanIds=r.carePlanIds);if(void 0===r.carePlanIds)return void s(new Error("Missing required  parameter: carePlanIds"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetNoCarePlansForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetNoCarePlansForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPersonalPatientCarePlansForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPersonalPatientCarePlansForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientCarePlansForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientCarePlansForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientsbyNameForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.lastName&&(e.lastName=r.lastName),void 0!==r.firstName&&(e.firstName=r.firstName),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsbyNameForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.lastName&&(i.lastName=r.lastName);if(void 0===r.lastName)return void s(new Error("Missing required  parameter: lastName"));void 0!==r.firstName&&(i.firstName=r.firstName);void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetAlertedPatientsForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetAlertedPatientsForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetNewPatientsForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetNewPatientsForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientsByAppointmentDateForSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsByAppointmentDateForSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientsByUserLastMeasurementURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.includeShareCare&&(e.includeShareCare=r.includeShareCare),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientsByUserLastMeasurement(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.includeShareCare&&(i.includeShareCare=r.includeShareCare);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class w extends a{ActivateWithSponsorNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{sponsorName}/activate";i=i.replace("{sponsorName}",`${r.sponsorName}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ActivateWithSponsorName(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{sponsorName}/activate",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{sponsorName}",`${r.sponsorName}`);if(void 0===r.sponsorName)return void d(new Error("Missing required  parameter: sponsorName"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}IsPatientDeactivatedURL(r){let e={};const t=r.$domain?r.$domain:this.domain;void 0!==r.sponsorPatientId&&(e.sponsorPatientId=r.sponsorPatientId),void 0!==r.dateOfBirth&&(e.dateOfBirth=r.dateOfBirth),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let i=Object.keys(e);return t+"/api/patients/activate"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}IsPatientDeactivated(r){const e=r.$domain?r.$domain:this.domain;let t={},i={},o={};return new Promise((n,a)=>{i.Accept="application/json, text/json, application/xml, text/xml";i["Content-Type"]="";void 0!==r.sponsorPatientId&&(t.sponsorPatientId=r.sponsorPatientId);if(void 0===r.sponsorPatientId)return void a(new Error("Missing required  parameter: sponsorPatientId"));void 0!==r.dateOfBirth&&(t.dateOfBirth=r.dateOfBirth);if(void 0===r.dateOfBirth)return void a(new Error("Missing required  parameter: dateOfBirth"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){t[e]=r.$queryParameters[e]});this.request("GET",e+"/api/patients/activate",void 0,i,t,o,a,n)})}ActivateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let i=Object.keys(e);return t+"/api/patients/activate"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Activate(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+"/api/patients/activate",t,o,i,n,s,a)})}AddCarePlansToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/careplans";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCarePlansToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/careplans",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}AddCategoriesToPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/categories";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCategoriesToPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/categories",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}AffiliatePatientFromOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/organizations";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AffiliatePatientFromOrganization(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/organizations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangePasswordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/password";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePassword(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/password",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangePatientRoleInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/roles";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePatientRoleInternal(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}AddRolesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/roles";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddRoles(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}ChangePatientSettingsInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/settings";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePatientSettingsInternal(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/settings",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ClearPatientAlertsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/alerts";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ClearPatientAlerts(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/alerts",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UploadPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/photo";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeletePhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/photo";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeletePhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetCompletedTaskReadModelsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/tasks";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCompletedTaskReadModels(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/tasks",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetTaskOutcomesOverTimeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/tasks/{taskId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{taskId}",`${r.taskId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),void 0!==r.intervalType&&(e.intervalType=r.intervalType),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTaskOutcomesOverTime(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/tasks/{taskId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void s(new Error("Missing required  parameter: taskId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.intervalType&&(i.intervalType=r.intervalType);if(void 0===r.intervalType)return void s(new Error("Missing required  parameter: intervalType"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}PushScheduleUpdateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/pushscheduleupdate";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}PushScheduleUpdate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/pushscheduleupdate",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}ReplacePatientCarePlanURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/careplans/{carePlanId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ReplacePatientCarePlan(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/careplans/{carePlanId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveCarePlanFromPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/careplans/{carePlanId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveCarePlanFromPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/careplans/{carePlanId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}ReplacePatientCategoryURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/categories/{categoryId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{categoryId}",`${r.categoryId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ReplacePatientCategory(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/categories/{categoryId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{categoryId}",`${r.categoryId}`);if(void 0===r.categoryId)return void d(new Error("Missing required  parameter: categoryId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveCategoryFromPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/categories/{categoryId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{categoryId}",`${r.categoryId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveCategoryFromPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/categories/{categoryId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{categoryId}",`${r.categoryId}`);if(void 0===r.categoryId)return void s(new Error("Missing required  parameter: categoryId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UnaffiliatePatientFromOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/organizations/{organizationId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UnaffiliatePatientFromOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/organizations/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetSignaledAlertsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/signaledalerts";void 0!==r.distributorId&&(e.distributorId=r.distributorId),void 0!==r.sponsorId&&(e.sponsorId=r.sponsorId),i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),void 0!==r.activeOnly&&(e.activeOnly=r.activeOnly),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSignaledAlerts(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/signaledalerts",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";void 0!==r.distributorId&&(i.distributorId=r.distributorId);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.sponsorId&&(i.sponsorId=r.sponsorId);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.activeOnly&&(i.activeOnly=r.activeOnly);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdatePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdatePatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeletePatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeletePatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}BulkPatientUpdateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let i=Object.keys(e);return t+"/api/patients/bulkUpdate"+(i.length>0?"?"+i.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}BulkPatientUpdate(r){const e=r.$domain?r.$domain:this.domain;let t,i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";void 0!==r.model&&(t=r.model);if(void 0===r.model)return void s(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+"/api/patients/bulkUpdate",t,o,i,n,s,a)})}}class x extends a{AcceptPatientInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AcceptPatientInvitation(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void d(new Error("Missing required  parameter: invitationCode"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetPatientInvitationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.accepted&&(e.accepted=r.accepted),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientInvitations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.accepted&&(i.accepted=r.accepted);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreatePatientInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientInvitation(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreatePatientInvitationWithAuthCodeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{authorizationCode}",`${r.authorizationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientInvitationWithAuthCode(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{authorizationCode}",`${r.authorizationCode}`);if(void 0===r.authorizationCode)return void d(new Error("Missing required  parameter: authorizationCode"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeletePatientInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeletePatientInvitation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}ResendPatientInvitationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ResendPatientInvitations(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class z extends a{AddPatientProfileDefinitionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddPatientProfileDefinition(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AffiliatePatientProfileDefinitionToSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AffiliatePatientProfileDefinitionToSponsor(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreatePatientProfileDefinitionCodeCollectionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientProfileDefinitionCodeCollection(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreatePatientProfileDefinitionTagElementURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientProfileDefinitionTagElement(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreatePatientProfileDefinitionTextElementURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientProfileDefinitionTextElement(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetPatientProfileDefinitionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientProfileDefinition(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RemovePatientProfileDefinitionCodeCollectionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{elementId}",`${r.elementId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemovePatientProfileDefinitionCodeCollection(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));t=t.replace("{elementId}",`${r.elementId}`);if(void 0===r.elementId)return void s(new Error("Missing required  parameter: elementId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}RemovePatientProfileDefinitionTagElementURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{patientProfileDefinitionTagElementId}",`${r.patientProfileDefinitionTagElementId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemovePatientProfileDefinitionTagElement(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));t=t.replace("{patientProfileDefinitionTagElementId}",`${r.patientProfileDefinitionTagElementId}`);if(void 0===r.patientProfileDefinitionTagElementId)return void s(new Error("Missing required  parameter: patientProfileDefinitionTagElementId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}RemovePatientProfileDefinitionTextElementURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{patientProfileDefinitionTextElementId}",`${r.patientProfileDefinitionTextElementId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemovePatientProfileDefinitionTextElement(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));t=t.replace("{patientProfileDefinitionTextElementId}",`${r.patientProfileDefinitionTextElementId}`);if(void 0===r.patientProfileDefinitionTextElementId)return void s(new Error("Missing required  parameter: patientProfileDefinitionTextElementId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}SetPatientProfileDefinitionCategoryURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SetPatientProfileDefinitionCategory(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}SetPatientProfileDefinitionElementCategoryURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{elementId}",`${r.elementId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SetPatientProfileDefinitionElementCategory(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{elementId}",`${r.elementId}`);if(void 0===r.elementId)return void d(new Error("Missing required  parameter: elementId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}SetPatientProfileDefinitionElementCategoryByNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{elementName}",`${r.elementName}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SetPatientProfileDefinitionElementCategoryByName(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{elementName}",`${r.elementName}`);if(void 0===r.elementName)return void d(new Error("Missing required  parameter: elementName"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class k extends a{AddCodesToCodeCollectionOnSponsorPatientProfileURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{elementId}",`${r.elementId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCodesToCodeCollectionOnSponsorPatientProfile(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{elementId}",`${r.elementId}`);if(void 0===r.elementId)return void d(new Error("Missing required  parameter: elementId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKeyURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{elementId}",`${r.elementId}`),i=i.replace("{key}",`${r.key}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{elementId}",`${r.elementId}`);if(void 0===r.elementId)return void d(new Error("Missing required  parameter: elementId"));i=i.replace("{key}",`${r.key}`);if(void 0===r.key)return void d(new Error("Missing required  parameter: key"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AddElementTagsToSponsorPatientProfileURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{patientProfileDefinitionTagElementId}",`${r.patientProfileDefinitionTagElementId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddElementTagsToSponsorPatientProfile(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{patientProfileDefinitionTagElementId}",`${r.patientProfileDefinitionTagElementId}`);if(void 0===r.patientProfileDefinitionTagElementId)return void d(new Error("Missing required  parameter: patientProfileDefinitionTagElementId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}AddElementTagsToSponsorPatientProfileInstanceURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{patientProfileDefinitionTagElementId}",`${r.patientProfileDefinitionTagElementId}`),i=i.replace("{key}",`${r.key}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddElementTagsToSponsorPatientProfileInstance(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{patientProfileDefinitionTagElementId}",`${r.patientProfileDefinitionTagElementId}`);if(void 0===r.patientProfileDefinitionTagElementId)return void d(new Error("Missing required  parameter: patientProfileDefinitionTagElementId"));i=i.replace("{key}",`${r.key}`);if(void 0===r.key)return void d(new Error("Missing required  parameter: key"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetAllSponsorPatientProfilesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetAllSponsorPatientProfiles(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetAllSponsorPatientProfilesForProfileDefinitionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetAllSponsorPatientProfilesForProfileDefinition(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorPatientProfileURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorPatientProfile(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateSponsorPatientProfileURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorPatientProfile(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetSponsorPatientProfileInstanceURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{key}",`${r.key}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorPatientProfileInstance(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));t=t.replace("{key}",`${r.key}`);if(void 0===r.key)return void s(new Error("Missing required  parameter: key"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateSponsorPatientProfileInstanceURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{key}",`${r.key}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorPatientProfileInstance(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{key}",`${r.key}`);if(void 0===r.key)return void d(new Error("Missing required  parameter: key"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}RemoveInstanceFromSponsorPatientProfileURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{key}",`${r.key}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveInstanceFromSponsorPatientProfile(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void s(new Error("Missing required  parameter: patientProfileDefinitionId"));t=t.replace("{key}",`${r.key}`);if(void 0===r.key)return void s(new Error("Missing required  parameter: key"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}SetLinkTextURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`),i=i.replace("{key}",`${r.key}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SetLinkText(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{patientProfileDefinitionId}",`${r.patientProfileDefinitionId}`);if(void 0===r.patientProfileDefinitionId)return void d(new Error("Missing required  parameter: patientProfileDefinitionId"));i=i.replace("{key}",`${r.key}`);if(void 0===r.key)return void d(new Error("Missing required  parameter: key"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class M extends a{UpdateAppointmentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateAppointment(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}CreateAppointmentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateAppointment(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CancelAppointmentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CancelAppointment(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}CancelAppointmentByDateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments/date";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.appointmentDateTime&&(e.appointmentDateTime=r.appointmentDateTime),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CancelAppointmentByDate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments/date",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.appointmentDateTime&&(i.appointmentDateTime=r.appointmentDateTime);if(void 0===r.appointmentDateTime)return void s(new Error("Missing required  parameter: appointmentDateTime"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}RecordScheduledTaskOutcomeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{dayOfCare}",`${r.dayOfCare}`),i=i.replace("{scheduledTaskId}",`${r.scheduledTaskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RecordScheduledTaskOutcome(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{dayOfCare}",`${r.dayOfCare}`);if(void 0===r.dayOfCare)return void d(new Error("Missing required  parameter: dayOfCare"));i=i.replace("{scheduledTaskId}",`${r.scheduledTaskId}`);if(void 0===r.scheduledTaskId)return void d(new Error("Missing required  parameter: scheduledTaskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetScheduleWithDateRangeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetScheduleWithDateRange(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetScheduleForDayOfCareURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{dayOfCare}",`${r.dayOfCare}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetScheduleForDayOfCare(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{dayOfCare}",`${r.dayOfCare}`);if(void 0===r.dayOfCare)return void s(new Error("Missing required  parameter: dayOfCare"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class O extends a{UpdateAppointmentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/schedule/appointments";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateAppointment(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/schedule/appointments",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}CreateAppointmentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/schedule/appointments";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateAppointment(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/schedule/appointments",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CancelAppointmentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/schedule/appointments";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CancelAppointment(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/schedule/appointments",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}CancelAppointmentByDateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.appointmentDateTime&&(e.appointmentDateTime=r.appointmentDateTime),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CancelAppointmentByDate(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.appointmentDateTime&&(i.appointmentDateTime=r.appointmentDateTime);if(void 0===r.appointmentDateTime)return void s(new Error("Missing required  parameter: appointmentDateTime"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetScheduleWithDateRangeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/schedule";i=i.replace("{patientId}",`${r.patientId}`),void 0!==r.startDate&&(e.startDate=r.startDate),void 0!==r.endDate&&(e.endDate=r.endDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetScheduleWithDateRange(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/schedule",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.startDate&&(i.startDate=r.startDate);if(void 0===r.startDate)return void s(new Error("Missing required  parameter: startDate"));void 0!==r.endDate&&(i.endDate=r.endDate);if(void 0===r.endDate)return void s(new Error("Missing required  parameter: endDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetScheduleForDayOfCareURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/schedule/days/{dayOfCare}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{dayOfCare}",`${r.dayOfCare}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetScheduleForDayOfCare(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/schedule/days/{dayOfCare}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{dayOfCare}",`${r.dayOfCare}`);if(void 0===r.dayOfCare)return void s(new Error("Missing required  parameter: dayOfCare"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RecordScheduledTaskOutcomeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{dayOfCare}",`${r.dayOfCare}`),i=i.replace("{scheduledTaskId}",`${r.scheduledTaskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RecordScheduledTaskOutcome(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{dayOfCare}",`${r.dayOfCare}`);if(void 0===r.dayOfCare)return void d(new Error("Missing required  parameter: dayOfCare"));i=i.replace("{scheduledTaskId}",`${r.scheduledTaskId}`);if(void 0===r.scheduledTaskId)return void d(new Error("Missing required  parameter: scheduledTaskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class C extends a{CreateCarePlanAdherenceReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCarePlanAdherenceReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCarePlanAdherenceReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCarePlanAdherenceReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCarePlanEngagementReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCarePlanEngagementReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCarePlanEngagementReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCarePlanEngagementReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCareTeamOrganizationEngagementReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCareTeamOrganizationEngagementReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCareTeamOrganizationSessionReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCareTeamOrganizationSessionReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCareTeamSponsorEngagementReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/care-team/engagement";i=i.replace("{distributorId}",`${r.distributorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCareTeamSponsorEngagementReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/care-team/engagement",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateCareTeamSponsorSessionReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/care-team/sessions";i=i.replace("{distributorId}",`${r.distributorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateCareTeamSponsorSessionReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/care-team/sessions",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientChannelReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientChannelReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientChannelReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientChannelReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientDemographicReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientDemographicReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientDemographicReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientDemographicReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientInvitationReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientInvitationReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreatePatientInvitationReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreatePatientInvitationReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateSponsorEngagementAndAdherenceReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorEngagementAndAdherenceReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateSponsorEngagementAndAdherenceReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorEngagementAndAdherenceReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateSponsorOnboardingReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorOnboardingReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}CreateSponsorOnboardingReportForOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorOnboardingReportForOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}}class T extends a{GetSharedCareUsersReportURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSharedCareUsersReport(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}AcceptSharedCareInvitationForNewPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/sharedcare/incoming/invitations/{invitationCode}/acceptance";i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AcceptSharedCareInvitationForNewPatient(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/sharedcare/incoming/invitations/{invitationCode}/acceptance",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void d(new Error("Missing required  parameter: invitationCode"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSharedCareInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/sharedcare/invitations/{invitationCode}";i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSharedCareInvitation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/sharedcare/invitations/{invitationCode}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}AcceptSharedCareInvitationForExistingPatientURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AcceptSharedCareInvitationForExistingPatient(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}ChangeOutgoingSharedCareMemberPermissionsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeOutgoingSharedCareMemberPermissions(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`);if(void 0===r.sharedCarePatientId)return void d(new Error("Missing required  parameter: sharedCarePatientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveOutgoingSharedCareMemberURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveOutgoingSharedCareMember(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`);if(void 0===r.sharedCarePatientId)return void s(new Error("Missing required  parameter: sharedCarePatientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}DeclineSharedCareInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeclineSharedCareInvitation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}GetPendingReceivedSharedCareInvitationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPendingReceivedSharedCareInvitations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RemovePatientFromIncomingSharedCareURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemovePatientFromIncomingSharedCare(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`);if(void 0===r.sharedCarePatientId)return void s(new Error("Missing required  parameter: sharedCarePatientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}RevokeSharedCareInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RevokeSharedCareInvitation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}SendSharedCareInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendSharedCareInvitation(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}SendSharedCareInvitationEmailURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendSharedCareInvitationEmail(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}}class D extends a{AcceptSharedCareInvitationForExistingPatientInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AcceptSharedCareInvitationForExistingPatientInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}ChangeOutgoingSharedCareMemberPermissionsInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeOutgoingSharedCareMemberPermissionsInternal(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`);if(void 0===r.sharedCarePatientId)return void d(new Error("Missing required  parameter: sharedCarePatientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveOutgoingSharedCareMemberInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveOutgoingSharedCareMemberInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`);if(void 0===r.sharedCarePatientId)return void s(new Error("Missing required  parameter: sharedCarePatientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}DeclineSharedCareInvitationInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeclineSharedCareInvitationInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}GetPendingReceivedSharedCareInvitationsInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/incoming/invitations";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPendingReceivedSharedCareInvitationsInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/incoming/invitations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RemovePatientFromIncomingSharedCareInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemovePatientFromIncomingSharedCareInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{sharedCarePatientId}",`${r.sharedCarePatientId}`);if(void 0===r.sharedCarePatientId)return void s(new Error("Missing required  parameter: sharedCarePatientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}RevokeSharedCareInvitationInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RevokeSharedCareInvitationInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}SendSharedCareInvitationInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/outgoing/invitations";i=i.replace("{patientId}",`${r.patientId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendSharedCareInvitationInternal(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/patients/{patientId}/sharedcare/outgoing/invitations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void d(new Error("Missing required  parameter: patientId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}SendSharedCareInvitationEmailInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail";i=i.replace("{patientId}",`${r.patientId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}SendSharedCareInvitationEmailInternal(r){const e=r.$domain?r.$domain:this.domain;let t="/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{patientId}",`${r.patientId}`);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}}class A extends a{ChangeOrganizationSettingsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/settings";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeOrganizationSettings(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/settings",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorOrganizationIdURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/sponsorOrganizationId";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorOrganizationId(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/sponsorOrganizationId",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorSettingsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/settings";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorSettings(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/settings",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSponsorSecretsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorSecrets(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}ChangeSponsorSecretsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorSecrets(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetOrganizationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetOrganizations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateOrganization(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}DeleteOrganizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteOrganization(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetOrganizationBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetOrganizationBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateOrganizationBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationBranding(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteOrganizationBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteOrganizationBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UploadOrganizationPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadOrganizationPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeleteOrganizationPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteOrganizationPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}DeleteSponsorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteSponsor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetSponsorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateSponsorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorBranding(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteSponsorBrandingURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteSponsorBranding(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}DeleteSponsorSecretURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets/{secretKey}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{secretKey}",`${r.secretKey}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteSponsorSecret(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets/{secretKey}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{secretKey}",`${r.secretKey}`);if(void 0===r.secretKey)return void s(new Error("Missing required  parameter: secretKey"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetSponsorAuthorizationCodesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorAuthorizationCodes(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorCountsForDateRangeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/counts";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorCountsForDateRange(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/counts",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorDataByNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/names/{sponsorName}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorName}",`${r.sponsorName}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorDataByName(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/names/{sponsorName}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorName}",`${r.sponsorName}`);if(void 0===r.sponsorName)return void s(new Error("Missing required  parameter: sponsorName"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorDataByRegistrationCodeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/authorizationcodes/{id}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{id}",`${r.id}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorDataByRegistrationCode(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/authorizationcodes/{id}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{id}",`${r.id}`);if(void 0===r.id)return void s(new Error("Missing required  parameter: id"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateOrganizationAddressURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/address";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationAddress(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/address",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateOrganizationDescriptionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/description";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationDescription(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/description",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateOrganizationDigitalContractURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/digitalcontact";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationDigitalContract(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/digitalcontact",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateOrganizationNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationName(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateOrganizationPhoneNumberURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/phonenumber";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateOrganizationPhoneNumber(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/phonenumber",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void d(new Error("Missing required  parameter: organizationId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UploadOrganizationBrandingLogoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/logo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadOrganizationBrandingLogo(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/logo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}UploadOrganizationBrandingEmailLogoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/emaillogo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{organizationId}",`${r.organizationId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadOrganizationBrandingEmailLogo(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/emaillogo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{organizationId}",`${r.organizationId}`);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}UploadSponsorBrandingLogoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/logo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadSponsorBrandingLogo(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/logo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}UploadSponsorBrandingEmailLogoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/emaillogo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadSponsorBrandingEmailLogo(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/emaillogo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}GetSignaledAlertsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/signaledalerts";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),void 0!==r.activeOnly&&(e.activeOnly=r.activeOnly),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSignaledAlerts(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/signaledalerts",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);if(void 0===r.fromDate)return void s(new Error("Missing required  parameter: fromDate"));void 0!==r.toDate&&(i.toDate=r.toDate);if(void 0===r.toDate)return void s(new Error("Missing required  parameter: toDate"));void 0!==r.activeOnly&&(i.activeOnly=r.activeOnly);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}TestSmsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/testsms";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}TestSms(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/testsms",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class S extends a{GetWebHooksURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetWebHooks(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateWebHookURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateWebHook(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}UpdateWebHookURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{webHookId}",`${r.webHookId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateWebHook(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{webHookId}",`${r.webHookId}`);if(void 0===r.webHookId)return void d(new Error("Missing required  parameter: webHookId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteWebHookURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{webHookId}",`${r.webHookId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteWebHook(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{webHookId}",`${r.webHookId}`);if(void 0===r.webHookId)return void s(new Error("Missing required  parameter: webHookId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}BulkUpdateWebHookPayloadTypesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/bulkupdate/{payloadType}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{payloadType}",`${r.payloadType}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}BulkUpdateWebHookPayloadTypes(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/bulkupdate/{payloadType}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{payloadType}",`${r.payloadType}`);if(void 0===r.payloadType)return void d(new Error("Missing required  parameter: payloadType"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateWebHookAuthorizationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/authorization";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateWebHookAuthorization(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/authorization",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class U extends a{GetSurveysURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSurveys(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Create(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetDistributorSurveysURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/surveys";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorSurveys(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/surveys",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateDistributorSurveyURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/surveys";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorSurvey(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/surveys",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetSurveyURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/surveys/{surveyId}";i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSurvey(r){const e=r.$domain?r.$domain:this.domain;let t="/api/surveys/{surveyId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void s(new Error("Missing required  parameter: surveyId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetDistributorSurveyURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/surveys/{surveyId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorSurvey(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/surveys/{surveyId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void s(new Error("Missing required  parameter: surveyId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetSponsorSurveyURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorSurvey(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void s(new Error("Missing required  parameter: surveyId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RenameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}Rename(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RenameDistributorSurveyURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/surveys/{surveyId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameDistributorSurvey(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/surveys/{surveyId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateBranchesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/branches";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateBranches(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/branches",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateDistributorBranchesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/surveys/{surveyId}/branches";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorBranches(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/surveys/{surveyId}/branches",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateDistributorStateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/surveys/{surveyId}/state";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorState(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/surveys/{surveyId}/state",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateStateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/state";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateState(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/state",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateSponsorSurveyIdURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/sponsorsurveyid";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{surveyId}",`${r.surveyId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorSurveyId(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/sponsorsurveyid",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{surveyId}",`${r.surveyId}`);if(void 0===r.surveyId)return void d(new Error("Missing required  parameter: surveyId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class R extends a{AddTagsToDistributorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/tags";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddTagsToDistributorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/tags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}AddTagsToSponsorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddTagsToSponsorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveTagsFromDistributorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveTagsFromDistributorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}ChangeDistributorTaskContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/content";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeDistributorTaskContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/content",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeDistributorTaskDeactivatedStateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/deactivated";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeDistributorTaskDeactivatedState(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/deactivated",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeDistributorTaskDescriptionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/description";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeDistributorTaskDescription(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/description",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeDistributorTaskMeasurementURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/measurement";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeDistributorTaskMeasurement(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/measurement",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeDistributorTaskCodesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/codes";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeDistributorTaskCodes(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/codes",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorTaskCodesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/codes";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorTaskCodes(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/codes",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorTaskContentURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/content";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorTaskContent(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/content",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorTaskDeactivatedStateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/deactivated";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorTaskDeactivatedState(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/deactivated",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorTaskDescriptionURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/description";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorTaskDescription(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/description",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorTaskIdURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/sponsortaskid";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorTaskId(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/sponsortaskid",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetDistributorTasksURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorTasks(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/tasks",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateDistributorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}ReplaceDistributorTaskTagURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasktags";i=i.replace("{distributorId}",`${r.distributorId}`),void 0!==r.tagName&&(e.tagName=r.tagName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ReplaceDistributorTaskTag(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasktags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.tagName&&(o.tagName=r.tagName);if(void 0===r.tagName)return void d(new Error("Missing required  parameter: tagName"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}CreateDistributorTaskTagURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasktags";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorTaskTag(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasktags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteDistributorTaskTagURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasktags";i=i.replace("{distributorId}",`${r.distributorId}`),void 0!==r.tagName&&(e.tagName=r.tagName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorTaskTag(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/tasktags",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.tagName&&(i.tagName=r.tagName);if(void 0===r.tagName)return void s(new Error("Missing required  parameter: tagName"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetSponsorTasksURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorTasks(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateSponsorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreateSponsorTaskAlertURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorTaskAlert(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}ReplaceSponsorTaskTagURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.tagName&&(e.tagName=r.tagName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ReplaceSponsorTaskTag(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.tagName&&(o.tagName=r.tagName);if(void 0===r.tagName)return void d(new Error("Missing required  parameter: tagName"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}CreateSponsorTaskTagURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorTaskTag(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteSponsorTaskTagURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.tagName&&(e.tagName=r.tagName),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteSponsorTaskTag(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.tagName&&(i.tagName=r.tagName);if(void 0===r.tagName)return void s(new Error("Missing required  parameter: tagName"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetDistributorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorTask(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/tasks/{taskId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void s(new Error("Missing required  parameter: taskId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateDistributorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSponsorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorTask(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void s(new Error("Missing required  parameter: taskId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateSponsorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateSponsorTaskAlertURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),i=i.replace("{alertId}",`${r.alertId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorTaskAlert(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));i=i.replace("{alertId}",`${r.alertId}`);if(void 0===r.alertId)return void d(new Error("Missing required  parameter: alertId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveSponsorTaskAlertURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),i=i.replace("{alertId}",`${r.alertId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveSponsorTaskAlert(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void s(new Error("Missing required  parameter: taskId"));t=t.replace("{alertId}",`${r.alertId}`);if(void 0===r.alertId)return void s(new Error("Missing required  parameter: alertId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}RenameDistributorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/tasks/{taskId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameDistributorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/tasks/{taskId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RenameSponsorTaskURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/name";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{taskId}",`${r.taskId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RenameSponsorTask(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/name",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{taskId}",`${r.taskId}`);if(void 0===r.taskId)return void d(new Error("Missing required  parameter: taskId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class _ extends a{CreateDistributorTreatmentTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorTreatmentTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteDistributorTreatmentTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.taskScheduleItemIds&&(e.taskScheduleItemIds=r.taskScheduleItemIds),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorTreatmentTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.taskScheduleItemIds&&(i.taskScheduleItemIds=r.taskScheduleItemIds);if(void 0===r.taskScheduleItemIds)return void s(new Error("Missing required  parameter: taskScheduleItemIds"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}PatchDistributorTreatmentTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}PatchDistributorTreatmentTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PATCH",e+t,void 0,o,i,n,s,a)})}CreateTreatmentTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateTreatmentTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteTreatmentTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.taskScheduleItemIds&&(e.taskScheduleItemIds=r.taskScheduleItemIds),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteTreatmentTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.taskScheduleItemIds&&(i.taskScheduleItemIds=r.taskScheduleItemIds);if(void 0===r.taskScheduleItemIds)return void s(new Error("Missing required  parameter: taskScheduleItemIds"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}PatchTreatmentTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}PatchTreatmentTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PATCH",e+t,void 0,o,i,n,s,a)})}CreateDistributorUntilCompleteTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorUntilCompleteTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreateUntilCompleteTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateUntilCompleteTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreateDistributorWeeklyTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorWeeklyTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteDistributorWeeklyTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.taskScheduleItemIds&&(e.taskScheduleItemIds=r.taskScheduleItemIds),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorWeeklyTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.taskScheduleItemIds&&(i.taskScheduleItemIds=r.taskScheduleItemIds);if(void 0===r.taskScheduleItemIds)return void s(new Error("Missing required  parameter: taskScheduleItemIds"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}PatchDistributorWeeklyTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}PatchDistributorWeeklyTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PATCH",e+t,void 0,o,i,n,s,a)})}CreateWeeklyTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateWeeklyTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteWeeklyTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.taskScheduleItemIds&&(e.taskScheduleItemIds=r.taskScheduleItemIds),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteWeeklyTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.taskScheduleItemIds&&(i.taskScheduleItemIds=r.taskScheduleItemIds);if(void 0===r.taskScheduleItemIds)return void s(new Error("Missing required  parameter: taskScheduleItemIds"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}PatchWeeklyTaskScheduleItemsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}PatchWeeklyTaskScheduleItems(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PATCH",e+t,void 0,o,i,n,s,a)})}GetDistributorTreatmentTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorTreatmentTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateDistributorTreatmentTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorTreatmentTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}DeleteDistributorTreatmentTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorTreatmentTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetTreatmentTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTreatmentTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateTreatmentTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateTreatmentTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}DeleteTreatmentTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteTreatmentTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}DeleteDistributorUntilCompleteTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorUntilCompleteTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}DeleteUntilCompleteTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteUntilCompleteTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetDistributorWeeklyTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorWeeklyTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateDistributorWeeklyTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorWeeklyTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}DeleteDistributorWeeklyTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorWeeklyTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetWeeklyTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetWeeklyTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateWeeklyTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),void 0!==r.modelScheduledTime&&(e["model.scheduledTime"]=r.modelScheduledTime),void 0!==r.modelScheduledTimePeriod&&(e["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateWeeklyTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.modelScheduledTime&&(i["model.scheduledTime"]=r.modelScheduledTime);void 0!==r.modelScheduledTimePeriod&&(i["model.scheduledTimePeriod"]=r.modelScheduledTimePeriod);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}DeleteWeeklyTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),i=i.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteWeeklyTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));t=t.replace("{taskScheduleItemId}",`${r.taskScheduleItemId}`);if(void 0===r.taskScheduleItemId)return void s(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UpdateDistributorUntilCompleteTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.taskScheduleItemId&&(e.taskScheduleItemId=r.taskScheduleItemId),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorUntilCompleteTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.taskScheduleItemId&&(o.taskScheduleItemId=r.taskScheduleItemId);if(void 0===r.taskScheduleItemId)return void d(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateUntilCompleteTaskScheduleItemURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),void 0!==r.taskScheduleItemId&&(e.taskScheduleItemId=r.taskScheduleItemId),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateUntilCompleteTaskScheduleItem(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.taskScheduleItemId&&(o.taskScheduleItemId=r.taskScheduleItemId);if(void 0===r.taskScheduleItemId)return void d(new Error("Missing required  parameter: taskScheduleItemId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class B extends a{CreateDistributorTaskScheduleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorTaskSchedule(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}CreateTaskScheduleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateTaskSchedule(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}ClearTaskSchedulesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ClearTaskSchedules(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetDistributorTaskScheduleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorTaskSchedule(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RemoveDistributorTaskScheduleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveDistributorTaskSchedule(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetTaskScheduleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTaskSchedule(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}RemoveTaskScheduleURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveTaskSchedule(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void s(new Error("Missing required  parameter: carePlanId"));t=t.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void s(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}UpdateTaskScheduleNoteURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateTaskScheduleNote(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateDistributorTaskScheduleNoteURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorTaskScheduleNote(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateDistributorTaskScheduleTargetURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorTaskScheduleTarget(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateTaskScheduleTargetURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateTaskScheduleTarget(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateDistributorTaskScheduleRolesAllowedToRecordOutcomeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateTaskScheduleRolesAllowedToRecordOutcomeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateTaskScheduleRolesAllowedToRecordOutcome(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateDistributorTaskScheduleIsDeactivatedURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorTaskScheduleIsDeactivated(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateTaskScheduleIsDeactivatedURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{carePlanId}",`${r.carePlanId}`),i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateTaskScheduleIsDeactivated(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{carePlanId}",`${r.carePlanId}`);if(void 0===r.carePlanId)return void d(new Error("Missing required  parameter: carePlanId"));i=i.replace("{taskScheduleId}",`${r.taskScheduleId}`);if(void 0===r.taskScheduleId)return void d(new Error("Missing required  parameter: taskScheduleId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}}class G extends a{GetTimeZonesURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/timezones/{countryCode}";i=i.replace("{countryCode}",`${r.countryCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTimeZones(r){const e=r.$domain?r.$domain:this.domain;let t="/api/timezones/{countryCode}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{countryCode}",`${r.countryCode}`);if(void 0===r.countryCode)return void s(new Error("Missing required  parameter: countryCode"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class N extends a{CreateTimeCardRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateTimeCardRecord(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetCurrentTimeCardURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),void 0!==r.patientId&&(e.patientId=r.patientId),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetCurrentTimeCard(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.patientId&&(i.patientId=r.patientId);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateCurrentTimeCardURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateCurrentTimeCard(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetPatientTimeCardURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.patientId&&(e.patientId=r.patientId),void 0!==r.fromDate&&(e.fromDate=r.fromDate),void 0!==r.toDate&&(e.toDate=r.toDate),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetPatientTimeCard(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.patientId&&(i.patientId=r.patientId);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.fromDate&&(i.fromDate=r.fromDate);void 0!==r.toDate&&(i.toDate=r.toDate);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetRecentTimeCardsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),void 0!==r.patientId&&(e.patientId=r.patientId),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetRecentTimeCards(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.patientId&&(i.patientId=r.patientId);if(void 0===r.patientId)return void s(new Error("Missing required  parameter: patientId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}GetTimeCardRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),i=i.replace("{timeCardRecordId}",`${r.timeCardRecordId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetTimeCardRecord(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));t=t.replace("{timeCardRecordId}",`${r.timeCardRecordId}`);if(void 0===r.timeCardRecordId)return void s(new Error("Missing required  parameter: timeCardRecordId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateTimeCardRecordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),i=i.replace("{timeCardRecordId}",`${r.timeCardRecordId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateTimeCardRecord(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));i=i.replace("{timeCardRecordId}",`${r.timeCardRecordId}`);if(void 0===r.timeCardRecordId)return void d(new Error("Missing required  parameter: timeCardRecordId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetUserPatientTimeCardURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),void 0!==r.patientId&&(e.patientId=r.patientId),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetUserPatientTimeCard(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.patientId&&(i.patientId=r.patientId);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class L extends a{AddRolesToSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddRolesToSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteRolesFromSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteRolesFromSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}AffiliateUserToOrganizationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AffiliateUserToOrganizations(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}RemoveUserAffiliationToOrganizationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}RemoveUserAffiliationToOrganizations(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}ArchiveSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/archive";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ArchiveSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/archive",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}ChangePasswordURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/password";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePassword(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/password",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}ChangeSponsorUserSettingsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/settings";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangeSponsorUserSettings(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/settings",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetDistributorUserListURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorUserList(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/users",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateDistributorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users";i=i.replace("{distributorId}",`${r.distributorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateDistributorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/users",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetSponsorUserListURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.organizationId&&(e.organizationId=r.organizationId),void 0!==r.archived&&(e.archived=r.archived),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorUserList(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.organizationId&&(i.organizationId=r.organizationId);void 0!==r.archived&&(i.archived=r.archived);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}UploadSponsorUserPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadSponsorUserPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeleteSponsorUserPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteSponsorUserPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetSponsorUserAsyncURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorUserAsync(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSponsorUserListWithoutDistributorURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/sponsors/{sponsorId}/users";i=i.replace("{sponsorId}",`${r.sponsorId}`),void 0!==r.organizationId&&(e.organizationId=r.organizationId),void 0!==r.archived&&(e.archived=r.archived),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorUserListWithoutDistributor(r){const e=r.$domain?r.$domain:this.domain;let t="/api/sponsors/{sponsorId}/users",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.organizationId&&(i.organizationId=r.organizationId);if(void 0===r.organizationId)return void s(new Error("Missing required  parameter: organizationId"));void 0!==r.archived&&(i.archived=r.archived);void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UnarchiveSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/unarchive";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UnarchiveSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/unarchive",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("PUT",e+t,void 0,o,i,n,s,a)})}UpdateUserFullNameURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/fullname";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateUserFullName(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/fullname",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateUserAddressURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/address";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateUserAddress(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/address",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UpdateUserTimeZoneURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timezone";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateUserTimeZone(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timezone",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}AcceptUserInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}/acceptance";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AcceptUserInvitation(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}/acceptance",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void d(new Error("Missing required  parameter: invitationCode"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetUserInvitationsURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetUserInvitations(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}CreateUserInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateUserInvitation(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}DeleteUserInvitationURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{invitationCode}",`${r.invitationCode}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteUserInvitation(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{invitationCode}",`${r.invitationCode}`);if(void 0===r.invitationCode)return void s(new Error("Missing required  parameter: invitationCode"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}ResendInvitationsByCodeURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/coderesend";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ResendInvitationsByCode(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/coderesend",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}ResendInvitationsByDateURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/dateresend";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ResendInvitationsByDate(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/dateresend",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}class H extends a{AddRolesToDistributorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users/{userId}/roles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddRolesToDistributorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/users/{userId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteRolesFromDistributorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users/{userId}/roles";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteRolesFromDistributorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/users/{userId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}AddRolesToSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/sponsors/{sponsorId}/users/{userId}/roles";i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AddRolesToSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/sponsors/{sponsorId}/users/{userId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}DeleteRolesFromSponsorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/sponsors/{sponsorId}/users/{userId}/roles";i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteRolesFromSponsorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/sponsors/{sponsorId}/users/{userId}/roles",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("DELETE",e+i,t,n,o,a,d,s)})}ChangePasswordInternalURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/users/{userId}/password";i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}ChangePasswordInternal(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/users/{userId}/password",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}UploadDistributorUserPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users/{userId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UploadDistributorUserPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/users/{userId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}DeleteDistributorUserPhotoURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users/{userId}/photo";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}DeleteDistributorUserPhoto(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/users/{userId}/photo",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("DELETE",e+t,void 0,o,i,n,s,a)})}GetDistributorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users/{userId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetDistributorUser(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/users/{userId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}UpdateDistributorUserURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/users/{userId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}UpdateDistributorUser(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/users/{userId}",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void d(new Error("Missing required  parameter: userId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});this.request("PUT",e+i,t,n,o,a,d,s)})}GetSponsorUserAsyncURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/sponsors/{sponsorId}/users/{userId}";i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{userId}",`${r.userId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetSponsorUserAsync(r){const e=r.$domain?r.$domain:this.domain;let t="/api/sponsors/{sponsorId}/users/{userId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{userId}",`${r.userId}`);if(void 0===r.userId)return void s(new Error("Missing required  parameter: userId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}}class X extends a{CreateVideoCallURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}CreateVideoCall(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}GetVideoCallURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{roomId}",`${r.roomId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]});let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}GetVideoCall(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{roomId}",`${r.roomId}`);if(void 0===r.roomId)return void s(new Error("Missing required  parameter: roomId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});this.request("GET",e+t,void 0,o,i,n,s,a)})}AcceptVideoCallURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{roomId}",`${r.roomId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}AcceptVideoCall(r){const e=r.$domain?r.$domain:this.domain;let t="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept",i={},o={},n={};return new Promise((a,s)=>{o.Accept="application/json, text/json, application/xml, text/xml";o["Content-Type"]="";t=t.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void s(new Error("Missing required  parameter: distributorId"));t=t.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void s(new Error("Missing required  parameter: sponsorId"));t=t.replace("{roomId}",`${r.roomId}`);if(void 0===r.roomId)return void s(new Error("Missing required  parameter: roomId"));void 0!==r.authorization&&(o.Authorization=r.authorization);if(void 0===r.authorization)return void s(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){i[e]=r.$queryParameters[e]});n=i;i={};this.request("POST",e+t,void 0,o,i,n,s,a)})}EndVideoCallURL(r){let e={};const t=r.$domain?r.$domain:this.domain;let i="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end";i=i.replace("{distributorId}",`${r.distributorId}`),i=i.replace("{sponsorId}",`${r.sponsorId}`),i=i.replace("{roomId}",`${r.roomId}`),r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(t){e[t]=r.$queryParameters[t]}),e={};let o=Object.keys(e);return t+i+(o.length>0?"?"+o.map(r=>r+"="+encodeURIComponent(e[r])).join("&"):"")}EndVideoCall(r){const e=r.$domain?r.$domain:this.domain;let t,i="/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end",o={},n={},a={};return new Promise((s,d)=>{n.Accept="application/json, text/json, application/xml, text/xml";n["Content-Type"]="application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded";i=i.replace("{distributorId}",`${r.distributorId}`);if(void 0===r.distributorId)return void d(new Error("Missing required  parameter: distributorId"));i=i.replace("{sponsorId}",`${r.sponsorId}`);if(void 0===r.sponsorId)return void d(new Error("Missing required  parameter: sponsorId"));i=i.replace("{roomId}",`${r.roomId}`);if(void 0===r.roomId)return void d(new Error("Missing required  parameter: roomId"));void 0!==r.model&&(t=r.model);if(void 0===r.model)return void d(new Error("Missing required  parameter: model"));void 0!==r.authorization&&(n.Authorization=r.authorization);if(void 0===r.authorization)return void d(new Error("Missing required  parameter: authorization"));r.$queryParameters&&Object.keys(r.$queryParameters).forEach(function(e){o[e]=r.$queryParameters[e]});a=o;o={};this.request("POST",e+i,t,n,o,a,d,s)})}}t.d(e,"ApiClass",function(){return n}),t.d(e,"Accounts",function(){return s}),t.d(e,"Audit",function(){return d}),t.d(e,"Beacon",function(){return u}),t.d(e,"Branding",function(){return p}),t.d(e,"CampaignMonitor",function(){return c}),t.d(e,"CareCenter",function(){return m}),t.d(e,"CareCenterInternal",function(){return I}),t.d(e,"CarePlans",function(){return l}),t.d(e,"Categories",function(){return f}),t.d(e,"ChatBot",function(){return h}),t.d(e,"ClientDataExport",function(){return b}),t.d(e,"ConversationLists",function(){return v}),t.d(e,"ConversationParties",function(){return y}),t.d(e,"Conversations",function(){return q}),t.d(e,"Distributors",function(){return $}),t.d(e,"IntegrationManagement",function(){return P}),t.d(e,"Invitations",function(){return g}),t.d(e,"Patient",function(){return E}),t.d(e,"PatientIndex",function(){return j}),t.d(e,"PatientInternal",function(){return w}),t.d(e,"PatientInvitations",function(){return x}),t.d(e,"PatientProfileDefinitions",function(){return z}),t.d(e,"PatientProfiles",function(){return k}),t.d(e,"PatientSchedules",function(){return M}),t.d(e,"PatientSchedulesInternal",function(){return O}),t.d(e,"Reports",function(){return C}),t.d(e,"SharedCare",function(){return T}),t.d(e,"SharedCareInternal",function(){return D}),t.d(e,"Sponsors",function(){return A}),t.d(e,"SponsorWebHook",function(){return S}),t.d(e,"Surveys",function(){return U}),t.d(e,"Tasks",function(){return R}),t.d(e,"TaskScheduleItems",function(){return _}),t.d(e,"TaskSchedules",function(){return B}),t.d(e,"Time",function(){return G}),t.d(e,"TimeCard",function(){return N}),t.d(e,"User",function(){return L}),t.d(e,"UserInternal",function(){return H}),t.d(e,"VideoCall",function(){return X})},function(r,e,t){function i(){}function o(r){if(!f(r))return r;var e=[];for(var t in r)n(e,t,r[t]);return e.join("&")}function n(r,e,t){if(null!=t)if(Array.isArray(t))t.forEach(function(t){n(r,e,t)});else if(f(t))for(var i in t)n(r,e+"["+i+"]",t[i]);else r.push(encodeURIComponent(e)+"="+encodeURIComponent(t));else null===t&&r.push(encodeURIComponent(e))}function a(r){for(var e,t,i={},o=r.split("&"),n=0,a=o.length;n<a;++n)e=o[n],t=e.indexOf("="),-1==t?i[decodeURIComponent(e)]="":i[decodeURIComponent(e.slice(0,t))]=decodeURIComponent(e.slice(t+1));return i}function s(r){var e,t,i,o,n=r.split(/\r?\n/),a={};n.pop();for(var s=0,d=n.length;s<d;++s)t=n[s],e=t.indexOf(":"),i=t.slice(0,e).toLowerCase(),o=y(t.slice(e+1)),a[i]=o;return a}function d(r){return/[\/+]json\b/.test(r)}function u(r){this.req=r,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;var e=this.xhr.status;1223===e&&(e=204),this._setStatusProperties(e),this.header=this.headers=s(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&r._responseType?this.body=this.xhr.response:this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function p(r,e){var t=this;this._query=this._query||[],this.method=r,this.url=e,this.header={},this._header={},this.on("end",function(){var r=null,e=null;try{e=new u(t)}catch(e){return r=new Error("Parser is unable to parse the response"),r.parse=!0,r.original=e,t.xhr?(r.rawResponse=void 0===t.xhr.responseType?t.xhr.responseText:t.xhr.response,r.status=t.xhr.status?t.xhr.status:null,r.statusCode=r.status):(r.rawResponse=null,r.status=null),t.callback(r)}t.emit("response",e);var i;try{t._isResponseOK(e)||(i=new Error(e.statusText||"Unsuccessful HTTP response"),i.original=r,i.response=e,i.status=e.status)}catch(r){i=r}i?t.callback(i,e):t.callback(null,e)})}function c(r,e,t){var i=v("DELETE",r);return"function"==typeof e&&(t=e,e=null),e&&i.send(e),t&&i.end(t),i}var m;"undefined"!=typeof window?m=window:"undefined"!=typeof self?m=self:(console.warn("Using browser-only version of superagent in non-browser environment"),m=this);var I=t(4),l=t(5),f=t(0),h=t(6),b=t(8),v=e=r.exports=function(r,t){return"function"==typeof t?new e.Request("GET",r).end(t):1==arguments.length?new e.Request("GET",r):new e.Request(r,t)};e.Request=p,v.getXHR=function(){if(!(!m.XMLHttpRequest||m.location&&"file:"==m.location.protocol&&m.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(r){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(r){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(r){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(r){}throw Error("Browser-only version of superagent could not find XHR")};var y="".trim?function(r){return r.trim()}:function(r){return r.replace(/(^\s*|\s*$)/g,"")};v.serializeObject=o,v.parseString=a,v.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},v.serialize={"application/x-www-form-urlencoded":o,"application/json":JSON.stringify},v.parse={"application/x-www-form-urlencoded":a,"application/json":JSON.parse},h(u.prototype),u.prototype._parseBody=function(r){var e=v.parse[this.type];return this.req._parser?this.req._parser(this,r):(!e&&d(this.type)&&(e=v.parse["application/json"]),e&&r&&(r.length||r instanceof Object)?e(r):null)},u.prototype.toError=function(){var r=this.req,e=r.method,t=r.url,i="cannot "+e+" "+t+" ("+this.status+")",o=new Error(i);return o.status=this.status,o.method=e,o.url=t,o},v.Response=u,I(p.prototype),l(p.prototype),p.prototype.type=function(r){return this.set("Content-Type",v.types[r]||r),this},p.prototype.accept=function(r){return this.set("Accept",v.types[r]||r),this},p.prototype.auth=function(r,e,t){switch("object"==typeof e&&null!==e&&(t=e),t||(t={type:"function"==typeof btoa?"basic":"auto"}),t.type){case"basic":this.set("Authorization","Basic "+btoa(r+":"+e));break;case"auto":this.username=r,this.password=e;break;case"bearer":this.set("Authorization","Bearer "+r)}return this},p.prototype.query=function(r){return"string"!=typeof r&&(r=o(r)),r&&this._query.push(r),this},p.prototype.attach=function(r,e,t){if(e){if(this._data)throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(r,e,t||e.name)}return this},p.prototype._getFormData=function(){return this._formData||(this._formData=new m.FormData),this._formData},p.prototype.callback=function(r,e){if(this._maxRetries&&this._retries++<this._maxRetries&&b(r,e))return this._retry();var t=this._callback;this.clearTimeout(),r&&(this._maxRetries&&(r.retries=this._retries-1),this.emit("error",r)),t(r,e)},p.prototype.crossDomainError=function(){var r=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");r.crossDomain=!0,r.status=this.status,r.method=this.method,r.url=this.url,this.callback(r)},p.prototype.buffer=p.prototype.ca=p.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},p.prototype.pipe=p.prototype.write=function(){throw Error("Streaming is not supported in browser version of superagent")},p.prototype._isHost=function(r){return r&&"object"==typeof r&&!Array.isArray(r)&&"[object Object]"!==Object.prototype.toString.call(r)},p.prototype.end=function(r){return this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=r||i,this._finalizeQueryString(),this._end()},p.prototype._end=function(){var r=this,e=this.xhr=v.getXHR(),t=this._formData||this._data;this._setTimeouts(),e.onreadystatechange=function(){var t=e.readyState;if(t>=2&&r._responseTimeoutTimer&&clearTimeout(r._responseTimeoutTimer),4==t){var i;try{i=e.status}catch(r){i=0}if(!i){if(r.timedout||r._aborted)return;return r.crossDomainError()}r.emit("end")}};var i=function(e,t){t.total>0&&(t.percent=t.loaded/t.total*100),t.direction=e,r.emit("progress",t)};if(this.hasListeners("progress"))try{e.onprogress=i.bind(null,"download"),e.upload&&(e.upload.onprogress=i.bind(null,"upload"))}catch(r){}try{this.username&&this.password?e.open(this.method,this.url,!0,this.username,this.password):e.open(this.method,this.url,!0)}catch(r){return this.callback(r)}if(this._withCredentials&&(e.withCredentials=!0),!this._formData&&"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof t&&!this._isHost(t)){var o=this._header["content-type"],n=this._serializer||v.serialize[o?o.split(";")[0]:""];!n&&d(o)&&(n=v.serialize["application/json"]),n&&(t=n(t))}for(var a in this.header)null!=this.header[a]&&this.header.hasOwnProperty(a)&&e.setRequestHeader(a,this.header[a]);return this._responseType&&(e.responseType=this._responseType),this.emit("request",this),e.send(void 0!==t?t:null),this},v.get=function(r,e,t){var i=v("GET",r);return"function"==typeof e&&(t=e,e=null),e&&i.query(e),t&&i.end(t),i},v.head=function(r,e,t){var i=v("HEAD",r);return"function"==typeof e&&(t=e,e=null),e&&i.query(e),t&&i.end(t),i},v.options=function(r,e,t){var i=v("OPTIONS",r);return"function"==typeof e&&(t=e,e=null),e&&i.send(e),t&&i.end(t),i},v.del=c,v.delete=c,v.patch=function(r,e,t){var i=v("PATCH",r);return"function"==typeof e&&(t=e,e=null),e&&i.send(e),t&&i.end(t),i},v.post=function(r,e,t){var i=v("POST",r);return"function"==typeof e&&(t=e,e=null),e&&i.send(e),t&&i.end(t),i},v.put=function(r,e,t){var i=v("PUT",r);return"function"==typeof e&&(t=e,e=null),e&&i.send(e),t&&i.end(t),i}},function(r,e,t){function i(r){if(r)return o(r)}function o(r){for(var e in i.prototype)r[e]=i.prototype[e];return r}r.exports=i,i.prototype.on=i.prototype.addEventListener=function(r,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+r]=this._callbacks["$"+r]||[]).push(e),this},i.prototype.once=function(r,e){function t(){this.off(r,t),e.apply(this,arguments)}return t.fn=e,this.on(r,t),this},i.prototype.off=i.prototype.removeListener=i.prototype.removeAllListeners=i.prototype.removeEventListener=function(r,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var t=this._callbacks["$"+r];if(!t)return this;if(1==arguments.length)return delete this._callbacks["$"+r],this;for(var i,o=0;o<t.length;o++)if((i=t[o])===e||i.fn===e){t.splice(o,1);break}return this},i.prototype.emit=function(r){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),t=this._callbacks["$"+r];if(t){t=t.slice(0);for(var i=0,o=t.length;i<o;++i)t[i].apply(this,e)}return this},i.prototype.listeners=function(r){return this._callbacks=this._callbacks||{},this._callbacks["$"+r]||[]},i.prototype.hasListeners=function(r){return!!this.listeners(r).length}},function(r,e,t){function i(r){if(r)return o(r)}function o(r){for(var e in i.prototype)r[e]=i.prototype[e];return r}var n=t(0);r.exports=i,i.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},i.prototype.parse=function(r){return this._parser=r,this},i.prototype.responseType=function(r){return this._responseType=r,this},i.prototype.serialize=function(r){return this._serializer=r,this},i.prototype.timeout=function(r){if(!r||"object"!=typeof r)return this._timeout=r,this._responseTimeout=0,this;for(var e in r)switch(e){case"deadline":this._timeout=r.deadline;break;case"response":this._responseTimeout=r.response;break;default:console.warn("Unknown timeout option",e)}return this},i.prototype.retry=function(r){return 0!==arguments.length&&!0!==r||(r=1),r<=0&&(r=0),this._maxRetries=r,this._retries=0,this},i.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},i.prototype.then=function(r,e){if(!this._fullfilledPromise){var t=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise(function(r,e){t.end(function(t,i){t?e(t):r(i)})})}return this._fullfilledPromise.then(r,e)},i.prototype.catch=function(r){return this.then(void 0,r)},i.prototype.use=function(r){return r(this),this},i.prototype.ok=function(r){if("function"!=typeof r)throw Error("Callback required");return this._okCallback=r,this},i.prototype._isResponseOK=function(r){return!!r&&(this._okCallback?this._okCallback(r):r.status>=200&&r.status<300)},i.prototype.get=function(r){return this._header[r.toLowerCase()]},i.prototype.getHeader=i.prototype.get,i.prototype.set=function(r,e){if(n(r)){for(var t in r)this.set(t,r[t]);return this}return this._header[r.toLowerCase()]=e,this.header[r]=e,this},i.prototype.unset=function(r){return delete this._header[r.toLowerCase()],delete this.header[r],this},i.prototype.field=function(r,e){if(null===r||void 0===r)throw new Error(".field(name, val) name can not be empty");if(this._data&&console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"),n(r)){for(var t in r)this.field(t,r[t]);return this}if(Array.isArray(e)){for(var i in e)this.field(r,e[i]);return this}if(null===e||void 0===e)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof e&&(e=""+e),this._getFormData().append(r,e),this},i.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},i.prototype.withCredentials=function(r){return void 0==r&&(r=!0),this._withCredentials=r,this},i.prototype.redirects=function(r){return this._maxRedirects=r,this},i.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},i.prototype.send=function(r){var e=n(r),t=this._header["content-type"];if(this._formData&&console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"),e&&!this._data)Array.isArray(r)?this._data=[]:this._isHost(r)||(this._data={});else if(r&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(e&&n(this._data))for(var i in r)this._data[i]=r[i];else"string"==typeof r?(t||this.type("form"),t=this._header["content-type"],this._data="application/x-www-form-urlencoded"==t?this._data?this._data+"&"+r:r:(this._data||"")+r):this._data=r;return!e||this._isHost(r)?this:(t||this.type("json"),this)},i.prototype.sortQuery=function(r){return this._sort=void 0===r||r,this},i.prototype._finalizeQueryString=function(){var r=this._query.join("&");if(r&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+r),this._query.length=0,this._sort){var e=this.url.indexOf("?");if(e>=0){var t=this.url.substring(e+1).split("&");"function"==typeof this._sort?t.sort(this._sort):t.sort(),this.url=this.url.substring(0,e)+"?"+t.join("&")}}},i.prototype._appendQueryString=function(){console.trace("Unsupported")},i.prototype._timeoutError=function(r,e,t){if(!this._aborted){var i=new Error(r+e+"ms exceeded");i.timeout=e,i.code="ECONNABORTED",i.errno=t,this.timedout=!0,this.abort(),this.callback(i)}},i.prototype._setTimeouts=function(){var r=this;this._timeout&&!this._timer&&(this._timer=setTimeout(function(){r._timeoutError("Timeout of ",r._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(function(){r._timeoutError("Response timeout of ",r._responseTimeout,"ETIMEDOUT")},this._responseTimeout))}},function(r,e,t){function i(r){if(r)return o(r)}function o(r){for(var e in i.prototype)r[e]=i.prototype[e];return r}var n=t(7);r.exports=i,i.prototype.get=function(r){return this.header[r.toLowerCase()]},i.prototype._setHeaderProperties=function(r){var e=r["content-type"]||"";this.type=n.type(e);var t=n.params(e);for(var i in t)this[i]=t[i];this.links={};try{r.link&&(this.links=n.parseLinks(r.link))}catch(r){}},i.prototype._setStatusProperties=function(r){var e=r/100|0;this.status=this.statusCode=r,this.statusType=e,this.info=1==e,this.ok=2==e,this.redirect=3==e,this.clientError=4==e,this.serverError=5==e,this.error=(4==e||5==e)&&this.toError(),this.accepted=202==r,this.noContent=204==r,this.badRequest=400==r,this.unauthorized=401==r,this.notAcceptable=406==r,this.forbidden=403==r,this.notFound=404==r}},function(r,e){e.type=function(r){return r.split(/ *; */).shift()},e.params=function(r){return r.split(/ *; */).reduce(function(r,e){var t=e.split(/ *= */),i=t.shift(),o=t.shift();return i&&o&&(r[i]=o),r},{})},e.parseLinks=function(r){return r.split(/ *, */).reduce(function(r,e){var t=e.split(/ *; */),i=t[0].slice(1,-1);return r[t[1].split(/ *= */)[1].slice(1,-1)]=i,r},{})},e.cleanHeader=function(r,e){return delete r["content-type"],delete r["content-length"],delete r["transfer-encoding"],delete r.host,e&&delete r.cookie,r}},function(r,e){var t=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];r.exports=function(r,e){return!!(r&&r.code&&~t.indexOf(r.code))||(!!(e&&e.status&&e.status>=500)||(!!(r&&"timeout"in r&&"ECONNABORTED"==r.code)||!!(r&&"crossDomain"in r)))}}]);
//# sourceMappingURL=index.min.js.map