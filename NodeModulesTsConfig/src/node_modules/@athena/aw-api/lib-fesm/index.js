/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// CONCATENATED MODULE: ./src/lib/api.ts
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_superagent__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_superagent___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_superagent__);


var anyRequest = __WEBPACK_IMPORTED_MODULE_0_superagent__;
/**
 *
 * @class ApiClass
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class ApiClass {
    constructor(domain, logger) {
        this.logger = logger;
        this.domain = "";
        this.errorHandlers = [];
        if (domain) {
            this.domain = domain;
        }
    }
    getDomain() {
        return this.domain;
    }
    addErrorHandler(handler) {
        this.errorHandlers.push(handler);
    }
    request(method, url, body, headers, queryParameters, form, reject, resolve) {
        if (this.logger) {
            this.logger.log(`Call ${method} ${url}`);
        }
        let req = (anyRequest.default || anyRequest)(method, url).query(queryParameters);
        Object.keys(headers).forEach(key => {
            req.set(key, headers[key]);
        });
        if (body) {
            req.send(body);
        }
        if (typeof (body) === 'object' && !(body.constructor.name === 'Buffer')) {
            req.set('Content-Type', 'application/json');
        }
        if (Object.keys(form).length > 0) {
            req.type('form');
            req.send(form);
        }
        req.end((error, response) => {
            if (error || !response.ok) {
                reject(error);
                this.errorHandlers.forEach(handler => handler(error));
            }
            else {
                resolve(response);
            }
        });
    }
}
/* harmony default export */ var api_defaultExport = (ApiClass);

// CONCATENATED MODULE: ./src/lib/accounts.ts


/**
 *
 * @class Accounts
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Accounts extends api_defaultExport {
    LookupAccountByUserNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/accounts';
        if (parameters['userName'] !== undefined) {
            queryParameters['userName'] = parameters['userName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that looks up information about a specific account for a user.
     * @method
     * @name Accounts#LookupAccountByUserName
     * @param {string} userName - Name of the user.
     */
    LookupAccountByUserName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/accounts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            if (parameters['userName'] !== undefined) {
                queryParameters['userName'] = parameters['userName'];
            }
            if (parameters['userName'] === undefined) {
                reject(new Error('Missing required  parameter: userName'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendPasswordResetEmailURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/accounts/passwordreset';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that initiates a password reset for an account holder with a given email address, by
                    sending a password reset email to that address.
    * @method
    * @name Accounts#SendPasswordResetEmail
         * @param {} model - Model view with only an email address.
    */
    SendPasswordResetEmail(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/accounts/passwordreset';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ResetPasswordWithTokenURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/accounts/password';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that resets a user's password, given that they have a reset token.
     * @method
     * @name Accounts#ResetPasswordWithToken
     * @param {} model -
     */
    ResetPasswordWithToken(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/accounts/password';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/audit.ts


/**
 *
 * @class Audit
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Audit extends api_defaultExport {
    GetURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/audit/aggregates/{id}';
        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves audit information for a system aggregate -
                    Patient, User, Sponsor, CarePlan, Organization, Distributor, etc.
    * @method
    * @name Audit#Get
         * @param {string} id - The unique ID of the aggregate
         * @param {string} fromDate - If supplied, retrieves entries that occurred on or after the specified date
         * @param {string} toDate - If supplied, retrieves entries that occurred on or before the specified date
         * @param {string} authorization - access token
    */
    Get(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/audit/aggregates/{id}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{id}', `${parameters['id']}`);
            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/beacon.ts


/**
 *
 * @class Beacon
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Beacon extends api_defaultExport {
    RecordBeaconURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is an endpoint for capturing beacons in an authenticated context. The endpoint uses the current user and
                    the following http headers to create a beacon:
                    X-FILAMENT-OS-TYPE - The platform operating system
                    X-FILAMENT-OS-VERSION - The platform operating system's version
                    X-FILAMENT-APP-VERSION - The version of the Patient IO App
    * @method
    * @name Beacon#RecordBeacon
         * @param {} model - The model containg the type of beacon.
         * @param {string} authorization - access token
    */
    RecordBeacon(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RecordInvitationBeaconURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons/invitations';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is an endpoint for capturing beacons in an unauthenticated context for invitations. The endpoint
                    uses the following http headers to create a beacon:
                    X-FILAMENT-OS-TYPE - The platform operating system
                    X-FILAMENT-OS-VERSION - The platform operating system's version
                    X-FILAMENT-APP-VERSION - The version of the Patient IO App
    * @method
    * @name Beacon#RecordInvitationBeacon
         * @param {} model - The model containing the type of beacon and the invitation code.
    */
    RecordInvitationBeacon(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/branding.ts


/**
 *
 * @class Branding
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Branding extends api_defaultExport {
    GetBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Get the branding for the logged in user.
     * @method
     * @name Branding#GetBranding
     * @param {string} authorization - access token
     */
    GetBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding/distributors/{distributorId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Gets the branding for a given distributor.
     * @method
     * @name Branding#GetDistributorBranding
     * @param {string} distributorId - The distributor identifier.
     */
    GetDistributorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding/distributors/{distributorId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * Gets the combined branding for a given sponsor of a given distributor.
                    This effectively returns the combination of sponsor and distributor
                    branding, with a sponsor's branding taking precednece over the distributor
                    branding.
    * @method
    * @name Branding#GetSponsorBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
    */
    GetSponsorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetOrganizationBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * Gets the combined branding for a given organization of a given sponsor.
                    This effectively returns the combination of sponsor and distributor
                    branding, with a sponsor's branding taking precednece over the distributor
                    branding.
    * @method
    * @name Branding#GetOrganizationBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
    */
    GetOrganizationBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/campaign-monitor.ts


/**
 *
 * @class CampaignMonitor
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class CampaignMonitor extends api_defaultExport {
    GetTransactionalSmartEmailsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/transactional/smartEmail';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Gets a list of all the smart emails for a sponsor.
     * @method
     * @name CampaignMonitor#GetTransactionalSmartEmails
     * @param {string} distributorId - The distributor Id.
     * @param {string} sponsorId - The sponsor Id.
     * @param {string} authorization - access token
     */
    GetTransactionalSmartEmails(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/transactional/smartEmail';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSubscriberListsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/driplists';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Get a list of all the client's email subscriber list.
     * @method
     * @name CampaignMonitor#GetSubscriberLists
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSubscriberLists(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/driplists';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/care-center.ts


/**
 *
 * @class CareCenter
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class CareCenter extends api_defaultExport {
    GetCareCenterContentForDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets all of the care center content items for a sponsor.
     * @method
     * @name CareCenter#GetCareCenterContentForDistributor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    GetCareCenterContentForDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddDistributorCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to create a new distributor care center center content item.
     * @method
     * @name CareCenter#AddDistributorCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The care center content model.
     * @param {string} authorization - access token
     */
    AddDistributorCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCareCenterContentForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets all of the care center content items for a sponsor.
     * @method
     * @name CareCenter#GetCareCenterContentForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetCareCenterContentForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to create a new care center center content item.
     * @method
     * @name CareCenter#AddCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The care center content model.
     * @param {string} authorization - access token
     */
    AddCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves an individual piece of care center content, by ID.
     * @method
     * @name CareCenter#GetDistributorCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} contentId - The content identifier.
     */
    GetDistributorCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a care center content item.
     * @method
     * @name CareCenter#UpdateDistributorCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} contentId - The id of the content item to update.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UpdateDistributorCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a care center content item and it's associated media.
     * @method
     * @name CareCenter#DeleteDistributorCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} contentId - The content identifier.
     * @param {string} authorization - access token
     */
    DeleteDistributorCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves an individual piece of care center content, by ID.
     * @method
     * @name CareCenter#GetCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} contentId - The content identifier.
     */
    GetCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a care center content item.
     * @method
     * @name CareCenter#UpdateCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} contentId - The id of the content item to update.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UpdateCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a care center content item.
     * @method
     * @name CareCenter#DeleteCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} contentId - The content identifier.
     * @param {string} authorization - access token
     */
    DeleteCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadDistributorMediaURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}/image';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that uploads an arbitrary media item for a sponsor and associated it to a piece of already created
                    content.
                    The returned URL points to the uploaded item. Invocation of this method must be done as Mime Multi-part content.
    * @method
    * @name CareCenter#UploadDistributorMedia
         * @param {string} distributorId - The distributor identifier.
         * @param {string} contentId - The content identifier for the content for which to upload media.
         * @param {string} authorization - access token
    */
    UploadDistributorMedia(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}/image';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorMediaURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}/image';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a piece of media based on its URL.
     * @method
     * @name CareCenter#DeleteDistributorMedia
     * @param {string} distributorId - The distributor identifier.
     * @param {string} contentId - The content identifier of the content image to be deleted.
     * @param {string} authorization - access token
     */
    DeleteDistributorMedia(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/{contentId}/image';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadMediaURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that uploads an arbitrary media item for a sponsor and associated it to a piece of already created
                    content.
                    The returned URL points to the uploaded item. Invocation of this method must be done as Mime Multi-part content.
    * @method
    * @name CareCenter#UploadMedia
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} contentId - The content identifier for the content for which to upload media.
         * @param {string} authorization - access token
    */
    UploadMedia(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteMediaURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{contentId}', `${parameters['contentId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a piece of media based on its URL.
     * @method
     * @name CareCenter#DeleteMedia
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} contentId - The content identifier of the content image to be deleted.
     * @param {string} authorization - access token
     */
    DeleteMedia(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{contentId}', `${parameters['contentId']}`);
            if (parameters['contentId'] === undefined) {
                reject(new Error('Missing required  parameter: contentId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCareCenterContentForCareTeamURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/careteams/{organizationId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves care team members within a given sponsor organization.
     * @method
     * @name CareCenter#GetCareCenterContentForCareTeam
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     */
    GetCareCenterContentForCareTeam(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/careteams/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadDistributorCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/upload';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates an item of care center content with a document to upload at the sponsor level.
     * @method
     * @name CareCenter#UploadDistributorCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The model
     * @param {string} authorization - access token
     */
    UploadDistributorCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/content/upload';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadCareCenterContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/upload';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates an item of care center content with a document to upload at the sponsor level.
     * @method
     * @name CareCenter#UploadCareCenterContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UploadCareCenterContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/upload';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCareCenterContentForPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the care center content for patient.
     * @method
     * @name CareCenter#GetCareCenterContentForPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    GetCareCenterContentForPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCareCenterNodesForPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves all care center content for a patient,
                    including organization and care team sections.
    * @method
    * @name CareCenter#GetCareCenterNodesForPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} authorization - access token
    */
    GetCareCenterNodesForPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/care-center-internal.ts


/**
 *
 * @class CareCenterInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class CareCenterInternal extends api_defaultExport {
    GetCareCenterContentForPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/carecenter/content';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the care center content for patient.
     * @method
     * @name CareCenterInternal#GetCareCenterContentForPatient
     * @param {string} patientId - The patient identifier. Must be the Patient IO internal identifier.
     * @param {string} authorization - access token
     */
    GetCareCenterContentForPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/carecenter/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCareCenterNodesForPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/carecenter';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves all care center content for a patient,
                    including organization and care team sections.
    * @method
    * @name CareCenterInternal#GetCareCenterNodesForPatient
         * @param {string} patientId - The patient identifier.
         * @param {string} authorization - access token
    */
    GetCareCenterNodesForPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/carecenter';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/care-plans.ts


/**
 *
 * @class CarePlans
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class CarePlans extends api_defaultExport {
    AddCategoriesToCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds categories to a care plan.
                    Within the dashboard UI, categories are referred to as "Groups".
                    Categories are most frequently used to describe groups of patients.
    * @method
    * @name CarePlans#AddCategoriesToCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} categoryIdList - List of category ids to add.
         * @param {string} authorization - access token
    */
    AddCategoriesToCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['categoryIdList'] !== undefined) {
                body = parameters['categoryIdList'];
            }
            if (parameters['categoryIdList'] === undefined) {
                reject(new Error('Missing required  parameter: categoryIdList'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveCategoriesFromCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that removes categories from a care plan. Categories are referred to as groups within
                    the UI of Patient IO applications.
    * @method
    * @name CarePlans#RemoveCategoriesFromCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - List of category ids to remove
         * @param {string} authorization - access token
    */
    RemoveCategoriesFromCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCategoriesToDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds categories to a distributor care plan.
                    Within the dashboard UI, categories are referred to as "Groups".
                    Categories are most frequently used to describe groups of patients.
    * @method
    * @name CarePlans#AddCategoriesToDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} categoryIdList - List of category ids to add.
         * @param {string} authorization - access token
    */
    AddCategoriesToDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['categoryIdList'] !== undefined) {
                body = parameters['categoryIdList'];
            }
            if (parameters['categoryIdList'] === undefined) {
                reject(new Error('Missing required  parameter: categoryIdList'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveCategoriesFromDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Remove categories fom a distributor care plan
     * @method
     * @name CarePlans#RemoveCategoriesFromDistributorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {} model - The list of category Ids.
     * @param {string} authorization - access token
     */
    RemoveCategoriesFromDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ApplyCarePlanSponsorCarePlanIdURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/sponsorcareplanid';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that applies a sponsor assigned id to a care plan.
                    This is an arbitrary string referred to as the SponsorCarePlanId.
    * @method
    * @name CarePlans#ApplyCarePlanSponsorCarePlanId
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The SponsorCarePlanId
         * @param {string} authorization - access token
    */
    ApplyCarePlanSponsorCarePlanId(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/sponsorcareplanid';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves data about a care plan.
     * @method
     * @name CarePlans#GetSponsorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetSponsorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CloneCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that clones a care plan within a sponsor.
                    This action creates a new and independent clone of the care plan.
                    The name, categories and plan types of the care plan can be changed.
    * @method
    * @name CarePlans#CloneCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} carePlanCloneModel - Model describing new care plan name, CategoryId, PlanTypeId.
         * @param {string} authorization - access token
    */
    CloneCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['carePlanCloneModel'] !== undefined) {
                body = parameters['carePlanCloneModel'];
            }
            if (parameters['carePlanCloneModel'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanCloneModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ArchiveCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that archives a care plan.
                    Archiving a care plan makes it inaccessible for new assignments
                    to patients or changes to the care plan. A care plan to which
                    patients are currently assigned cannot be archived.
                    Archived care plans can be un-archived.
                    Personal care plans cannot be archived.
    * @method
    * @name CarePlans#ArchiveCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan definition.
         * @param {string} authorization - access token
    */
    ArchiveCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves data about a care plan.
     * @method
     * @name CarePlans#GetDistributorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CloneDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that clones a care plan within a sponsor.
                    This action creates a new and independent clone of the care plan.
                    The name, categories and plan types of the care plan can be changed.
    * @method
    * @name CarePlans#CloneDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} carePlanCloneModel - Model describing new care plan name, CategoryId, PlanTypeId.
         * @param {string} authorization - access token
    */
    CloneDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['carePlanCloneModel'] !== undefined) {
                body = parameters['carePlanCloneModel'];
            }
            if (parameters['carePlanCloneModel'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanCloneModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ArchiveDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that archives a care plan.
                    Archiving a care plan makes it inaccessible for new assignments
                    to patients or changes to the care plan. A care plan to which
                    patients are currently assigned cannot be archived.
    * @method
    * @name CarePlans#ArchiveDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan definition.
         * @param {string} authorization - access token
    */
    ArchiveDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCarePlansURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a sponsor's care plans. The return set is
                limited; it does not retrieve all the of the information about a care plan
                 because sponsors may have a large number of care plans.
    * @method
    * @name CarePlans#GetCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetCarePlans(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates a new sponsor population care plan.
                    Care plans are always created and "owned" in the context of a sponsor.
    * @method
    * @name CarePlans#CreateCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} carePlan - The care plan definition.
         * @param {string} authorization - access token
    */
    CreateCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['carePlan'] !== undefined) {
                body = parameters['carePlan'];
            }
            if (parameters['carePlan'] === undefined) {
                reject(new Error('Missing required  parameter: carePlan'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorCarePlansURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a distributor's care plans. The return set is
                limited; it does not retrieve all the of the information about a care plan
                 because distributors may have a large number of care plans.
    * @method
    * @name CarePlans#GetDistributorCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    GetDistributorCarePlans(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates a new distributor population care plan.
                    Care plans are always created and "owned" in the context of a sponsor.
    * @method
    * @name CarePlans#CreateDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {} model - The care plan definition.
         * @param {string} authorization - access token
    */
    CreateDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameDistributorCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This method renames a dstributor care plan.
     * @method
     * @name CarePlans#RenameDistributorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameDistributorCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/careplans/{carePlanId}';
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves data about a care plan.
     * @method
     * @name CarePlans#GetCarePlan
     * @param {string} carePlanId - The internal care plan identifier.
     * @param {string} authorization - access token
     */
    GetCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCarePlanForDateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/days/{dayOfCare}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves data about a Care Plan for a specific day.
     * @method
     * @name CarePlans#GetCarePlanForDate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} dayOfCare - The day of care in the format yyyy-MM-dd
     * @param {string} authorization - access token
     */
    GetCarePlanForDate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/days/{dayOfCare}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RecordSupervisorApprovalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/approve';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that records the signature of a supervisor, indicating that revisions to a care plan have
                    been reviewed and approved.
    * @method
    * @name CarePlans#RecordSupervisorApproval
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The signature model.
         * @param {string} authorization - access token
    */
    RecordSupervisorApproval(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/approve';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a care plan.
     * @method
     * @name CarePlans#RenameCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/categories.ts


/**
 *
 * @class Categories
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Categories extends api_defaultExport {
    GetCategoriesForDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets all of the categories within a distributor.
     * @method
     * @name Categories#GetCategoriesForDistributor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    GetCategoriesForDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCategoryForDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates a Category for a distributor.
                    Categories can be created at the Distributor level and shared
                    to Sponsors within that Distributor.
    * @method
    * @name Categories#CreateCategoryForDistributor
         * @param {string} distributorId - The distributor identifier.
         * @param {} categoryModel - Category to be created.
         * @param {string} authorization - access token
    */
    CreateCategoryForDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['categoryModel'] !== undefined) {
                body = parameters['categoryModel'];
            }
            if (parameters['categoryModel'] === undefined) {
                reject(new Error('Missing required  parameter: categoryModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameDistributorCategoryURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/categories/{categoryId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{categoryId}', `${parameters['categoryId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a distributor category.
     * @method
     * @name Categories#RenameDistributorCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} categoryId - The category identifier.
     * @param {} nameModel - The name binding model.
     * @param {string} authorization - access token
     */
    RenameDistributorCategory(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/categories/{categoryId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{categoryId}', `${parameters['categoryId']}`);
            if (parameters['categoryId'] === undefined) {
                reject(new Error('Missing required  parameter: categoryId'));
                return;
            }
            if (parameters['nameModel'] !== undefined) {
                body = parameters['nameModel'];
            }
            if (parameters['nameModel'] === undefined) {
                reject(new Error('Missing required  parameter: nameModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCategoriesForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets all of the categories within a sponsor.
     * @method
     * @name Categories#GetCategoriesForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetCategoriesForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCategoryForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a category with a sponsor.
     * @method
     * @name Categories#CreateCategoryForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} categoryModel - Category to be created.
     * @param {string} authorization - access token
     */
    CreateCategoryForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['categoryModel'] !== undefined) {
                body = parameters['categoryModel'];
            }
            if (parameters['categoryModel'] === undefined) {
                reject(new Error('Missing required  parameter: categoryModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameCategoryURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories/{categoryId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{categoryId}', `${parameters['categoryId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a category within a sponsor.
     * @method
     * @name Categories#RenameCategory
     * @param {string} distributorId - The distributor Id.
     * @param {string} sponsorId - The sponsor Id.
     * @param {string} categoryId - The category Id.
     * @param {} categoryName - The categoryName
     * @param {string} authorization - access token
     */
    RenameCategory(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories/{categoryId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{categoryId}', `${parameters['categoryId']}`);
            if (parameters['categoryId'] === undefined) {
                reject(new Error('Missing required  parameter: categoryId'));
                return;
            }
            if (parameters['categoryName'] !== undefined) {
                body = parameters['categoryName'];
            }
            if (parameters['categoryName'] === undefined) {
                reject(new Error('Missing required  parameter: categoryName'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/chat-bot.ts


/**
 *
 * @class ChatBot
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class ChatBot extends api_defaultExport {
    GetDistributorChatBotContextModelURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves a Distributor's chat bot context.
     * @method
     * @name ChatBot#GetDistributorChatBotContextModel
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} authorization - access token
     */
    GetDistributorChatBotContextModel(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorChatBotContextModelURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves a Sponsor's chat bot context.
     * @method
     * @name ChatBot#GetSponsorChatBotContextModel
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} authorization - access token
     */
    GetSponsorChatBotContextModel(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetAllSponsorChatBotContextModelsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/context/all';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Get all of the Chat Bot Contexts associated with a sponsor and distributor.
     * @method
     * @name ChatBot#GetAllSponsorChatBotContextModels
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetAllSponsorChatBotContextModels(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/context/all';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorBotAsyncURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/bot';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Create a distributor level bot.
     * @method
     * @name ChatBot#CreateDistributorBotAsync
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The create binding model for the bot.
     * @param {string} authorization - access token
     */
    CreateDistributorBotAsync(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/bot';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateChatBotDistributorContextURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Creates a new Distributor Chat Bot context.
     * @method
     * @name ChatBot#CreateChatBotDistributorContext
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The chat bot context create binding model.
     * @param {string} authorization - access token
     */
    CreateChatBotDistributorContext(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateChatBotSponsorContextURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Creates a new Sponsor Chat Bot context.
     * @method
     * @name ChatBot#CreateChatBotSponsorContext
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The chat bot context create binding model.
     * @param {string} authorization - access token
     */
    CreateChatBotSponsorContext(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddDistributorChatBotContextItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Create a Distributor's chat bot context item.
     * @method
     * @name ChatBot#AddDistributorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    AddDistributorChatBotContextItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddSponsorChatBotContextItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Create a Sponsor's chat bot context item.
     * @method
     * @name ChatBot#AddSponsorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    AddSponsorChatBotContextItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendChatBotResponseFeedbackURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}/feedback';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Provide feedback on a chat bot response
     * @method
     * @name ChatBot#SendChatBotResponseFeedback
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} chatBotContextId - The chat bot context identifier
     * @param {string} chatBotContextItemId - The chat bot context item identifier
     * @param {} model - The chat bot response feedback model
     * @param {string} authorization - access token
     */
    SendChatBotResponseFeedback(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}/feedback';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
            if (parameters['chatBotContextItemId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorChatBotContextItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Edit a Distributor's chat bot context item.
     * @method
     * @name ChatBot#UpdateDistributorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UpdateDistributorChatBotContextItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
            if (parameters['chatBotContextItemId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorChatBotContextItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Delete a Distributor's chat bot context item.
     * @method
     * @name ChatBot#DeleteDistributorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {string} authorization - access token
     */
    DeleteDistributorChatBotContextItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
            if (parameters['chatBotContextItemId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorChatBotContextItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Edit a Sponsor's chat bot context item.
     * @method
     * @name ChatBot#UpdateSponsorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UpdateSponsorChatBotContextItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
            if (parameters['chatBotContextItemId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteSponsorChatBotContextItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Delete a Sponsor's chat bot context item.
     * @method
     * @name ChatBot#DeleteSponsorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {string} authorization - access token
     */
    DeleteSponsorChatBotContextItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);
            if (parameters['chatBotContextId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextId'));
                return;
            }
            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);
            if (parameters['chatBotContextItemId'] === undefined) {
                reject(new Error('Missing required  parameter: chatBotContextItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/client-data-export.ts


/**
 *
 * @class ClientDataExport
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class ClientDataExport extends api_defaultExport {
    GetPatientsCarePlansURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves data describing the precise definition
                    of the care plan assigned to each patient within a sponsor.
    * @method
    * @name ClientDataExport#GetPatientsCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetPatientsCarePlans(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientTaskDataExtractURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves all the ScheduledTasks assigned to
                    patients within a sponsor, along with the outcomes of those ScheduledTasks
                    covering a specific date range. If no dates are provided, the results will
                    cover the last 30 days.
    * @method
    * @name ClientDataExport#CreatePatientTaskDataExtract
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    CreatePatientTaskDataExtract(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientsTaskCompletionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['taskName'] !== undefined) {
            queryParameters['taskName'] = parameters['taskName'];
        }
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the completion state of a specific task over a time range.
     * @method
     * @name ClientDataExport#GetPatientsTaskCompletion
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskName - The name of the task.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {string} authorization - access token
     */
    GetPatientsTaskCompletion(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml, text/csv';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['taskName'] !== undefined) {
                queryParameters['taskName'] = parameters['taskName'];
            }
            if (parameters['taskName'] === undefined) {
                reject(new Error('Missing required  parameter: taskName'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetActiveUsersInformationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves the list of users for a given distributor/sponsor.
     * @method
     * @name ClientDataExport#GetActiveUsersInformation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetActiveUsersInformation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/conversation-lists.ts


/**
 *
 * @class ConversationLists
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class ConversationLists extends api_defaultExport {
    GetSponsorOrganizationConversationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters['tags'] !== undefined) {
            queryParameters['tags'] = parameters['tags'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a list of all of a sponsor's organization conversations,
                    optionally within a specified date range. The organization list is constrained to the organizations
                    which the calling user has a right to view.
    * @method
    * @name ConversationLists#GetSponsorOrganizationConversations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive.
                    May be omitted.
         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of
                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in
                    the list,
                    all tags must be present on the conversation in order for it to be included. Parameter is optional.
         * @param {string} authorization - access token
    */
    GetSponsorOrganizationConversations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['tags'] !== undefined) {
                queryParameters['tags'] = parameters['tags'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorOrganizationConversationsMetaDataURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations/metadata';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves metadata about all the conversations in a sponsor's organizations.
                    The organizations are constrained to those the caller can see.
    * @method
    * @name ConversationLists#GetSponsorOrganizationConversationsMetaData
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetSponsorOrganizationConversationsMetaData(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations/metadata';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetOrganizationConversationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters['tags'] !== undefined) {
            queryParameters['tags'] = parameters['tags'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a list of all of an organization's conversations, optionally within a specified date range.
    * @method
    * @name ConversationLists#GetOrganizationConversations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of
                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in
                    the list,
                    all tags must be present on the conversation in order for it to be included. Parameter is optional.
         * @param {string} authorization - access token
    */
    GetOrganizationConversations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['tags'] !== undefined) {
                queryParameters['tags'] = parameters['tags'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetUserConversationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters['tags'] !== undefined) {
            queryParameters['tags'] = parameters['tags'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a list of all of a user's conversations, optionally within a specified date range.
    * @method
    * @name ConversationLists#GetUserConversations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of
                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in
                    the list,
                    all tags must be present on the conversation in order for it to be included. Parameter is optional.
         * @param {string} authorization - access token
    */
    GetUserConversations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['tags'] !== undefined) {
                queryParameters['tags'] = parameters['tags'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientConversationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters['tags'] !== undefined) {
            queryParameters['tags'] = parameters['tags'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a list of all of a patient's conversations, optionally within a specified date range.
    * @method
    * @name ConversationLists#GetPatientConversations
         * @param {string} patientId - The patient identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of
                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in
                    the list,
                    all tags must be present on the conversation in order for it to be included. Parameter is optional
         * @param {string} authorization - access token
    */
    GetPatientConversations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['tags'] !== undefined) {
                queryParameters['tags'] = parameters['tags'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientConversationsSponsorIdentifierURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters['tags'] !== undefined) {
            queryParameters['tags'] = parameters['tags'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a list of all of a patient's conversations, optionally within a specified date range.
    * @method
    * @name ConversationLists#GetPatientConversationsSponsorIdentifier
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of
                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in
                    the list,
                    all tags must be present on the conversation in order for it to be included. Parameter is optional
         * @param {string} authorization - access token
    */
    GetPatientConversationsSponsorIdentifier(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['tags'] !== undefined) {
                queryParameters['tags'] = parameters['tags'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/conversation-parties.ts


/**
 *
 * @class ConversationParties
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class ConversationParties extends api_defaultExport {
    GetMessageablePartiesForPatientExternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations/messageable';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the patient's list of messageable parties.
     * @method
     * @name ConversationParties#GetMessageablePartiesForPatientExternal
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    GetMessageablePartiesForPatientExternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations/messageable';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetMessageablePartiesForPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/messageable';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the patient's list of messageable parties.
     * @method
     * @name ConversationParties#GetMessageablePartiesForPatient
     * @param {string} patientId - The patient identifier, must be the internal identifier to Patient IO.
     * @param {string} authorization - access token
     */
    GetMessageablePartiesForPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/messageable';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetMessageablePatientsForUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/messageable';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a user's list of messageable parties
     * @method
     * @name ConversationParties#GetMessageablePatientsForUser
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {string} authorization - access token
     */
    GetMessageablePatientsForUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/messageable';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetMessageablePatientsForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/messageable';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets an organization's list of messageable parties (patients).
     * @method
     * @name ConversationParties#GetMessageablePatientsForOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The user identifier.
     * @param {string} authorization - access token
     */
    GetMessageablePatientsForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/messageable';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/conversations.ts


/**
 *
 * @class Conversations
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Conversations extends api_defaultExport {
    GetOrganizationConversationWithPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets an organization's conversation with a patient (from the organization's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetOrganizationConversationWithPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetOrganizationConversationWithPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationConversationStatusURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of an organization's conversation with a patient.
     * @method
     * @name Conversations#UpdateOrganizationConversationStatus
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationConversationStatus(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromOrganizationToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from an organization to a patient.
     * @method
     * @name Conversations#SendMessageFromOrganizationToPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} patientId - The patient identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromOrganizationToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetUserConversationWithPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a user's conversation with a patient (from the user's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetUserConversationWithPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} userId - The user identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetUserConversationWithPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateUserConversationStateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of an user's conversation with a patient.
     * @method
     * @name Conversations#UpdateUserConversationState
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} userId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdateUserConversationState(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromUserToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from a user to a patient.
     * @method
     * @name Conversations#SendMessageFromUserToPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The organization identifier.
     * @param {string} patientId - The patient identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromUserToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientConversationWithOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a patient's conversation with an organization (from the patient's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetPatientConversationWithOrganization
         * @param {string} patientId - The patient identifier.
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetPatientConversationWithOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientConversationWithOrganizationStatusURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of a patient's conversation with an organization.
     * @method
     * @name Conversations#UpdatePatientConversationWithOrganizationStatus
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdatePatientConversationWithOrganizationStatus(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromPatientToOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from a patient to an organization.
     * @method
     * @name Conversations#SendMessageFromPatientToOrganization
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsors identifier.
     * @param {string} organizationId - The org identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromPatientToOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientConversationWithUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a patient's conversation with a user (from the patient's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetPatientConversationWithUser
         * @param {string} patientId - The patient identifier.
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetPatientConversationWithUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientConversationWithUserStatusURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of a patient's conversation with an user.
     * @method
     * @name Conversations#UpdatePatientConversationWithUserStatus
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdatePatientConversationWithUserStatus(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromPatientToUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from a patient to an user.
     * @method
     * @name Conversations#SendMessageFromPatientToUser
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsors identifier.
     * @param {string} userId - The org identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromPatientToUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/distributors.ts


/**
 *
 * @class Distributors
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Distributors extends api_defaultExport {
    ChangeDistributorSettingsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/settings';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sets the settings for a distributor.
     * @method
     * @name Distributors#ChangeDistributorSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    ChangeDistributorSettings(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/settings';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateAuthorizationCodeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/authorizationcodes';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates an authorization code. An authorization code can be used to allow a Patient
                    to self-register with Patient IO in connection with a sponsor.
    * @method
    * @name Distributors#CreateAuthorizationCode
         * @param {string} distributorId - The distributor identifier.
         * @param {} authCodeModel - Describes the sponsor and the authorization code.
         * @param {string} authorization - access token
    */
    CreateAuthorizationCode(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/authorizationcodes';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authCodeModel'] !== undefined) {
                body = parameters['authCodeModel'];
            }
            if (parameters['authCodeModel'] === undefined) {
                reject(new Error('Missing required  parameter: authCodeModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteAuthorizationCodeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes/{authorizationCode}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes an authorization code.
     * @method
     * @name Distributors#DeleteAuthorizationCode
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorizationCode - The authorization code to remove.
     * @param {string} authorization - access token
     */
    DeleteAuthorizationCode(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes/{authorizationCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);
            if (parameters['authorizationCode'] === undefined) {
                reject(new Error('Missing required  parameter: authorizationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates the distributor.
     * @method
     * @name Distributors#CreateDistributor
     * @param {} distributorModel - Distributor to be created
     * @param {string} authorization - access token
     */
    CreateDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['distributorModel'] !== undefined) {
                body = parameters['distributorModel'];
            }
            if (parameters['distributorModel'] === undefined) {
                reject(new Error('Missing required  parameter: distributorModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorsForDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a list of sponsors within a distributor.
     * @method
     * @name Distributors#GetSponsorsForDistributor
     * @param {string} distributorId - The distributor id.
     * @param {string} authorization - access token
     */
    GetSponsorsForDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a Sponsor within a distributor.
     * @method
     * @name Distributors#CreateSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {} sponsorModel - The sponsor to be created.
     * @param {string} authorization - access token
     */
    CreateSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['sponsorModel'] !== undefined) {
                body = parameters['sponsorModel'];
            }
            if (parameters['sponsorModel'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the branding for the sponsor.
     * @method
     * @name Distributors#GetDistributorBranding
     * @param {string} distributorId - The distributor identifier.
     */
    GetDistributorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates branding within a distributor.
     * @method
     * @name Distributors#UpdateDistributorBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The sponsor to be created.
     * @param {string} authorization - access token
     */
    UpdateDistributorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes Distributor level branding.
                    Branding describes how dynamic white labeling
                    functionality works at the distributor level.
    * @method
    * @name Distributors#DeleteDistributorBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    DeleteDistributorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets information about a Distributor -
                    all the sponsors, categories and other items.
    * @method
    * @name Distributors#GetDistributor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    GetDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gives a new name to a sponsor within a distributor.
     * @method
     * @name Distributors#RenameSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    RenameSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadDistributorBrandingEmailLogoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding/emaillogo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding email logo for the distributor.
     * @method
     * @name Distributors#UploadDistributorBrandingEmailLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    UploadDistributorBrandingEmailLogo(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding/emaillogo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadDistributorBrandingLogoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding/logo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding logo for the distributor.
     * @method
     * @name Distributors#UploadDistributorBrandingLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    UploadDistributorBrandingLogo(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/branding/logo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/integration-management.ts


/**
 *
 * @class IntegrationManagement
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class IntegrationManagement extends api_defaultExport {
    AddExportFileRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds an export file record for a sponsor.
                    This record specifies the exact internal PatientIO components to
                    be used to push an automated export of PatientIO data to a
                    client system.
    * @method
    * @name IntegrationManagement#AddExportFileRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    AddExportFileRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteExportFileRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fileName'] !== undefined) {
            queryParameters['fileName'] = parameters['fileName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an export file record.
     * @method
     * @name IntegrationManagement#DeleteExportFileRecord
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fileName - Name of the file.
     * @param {string} authorization - access token
     */
    DeleteExportFileRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fileName'] !== undefined) {
                queryParameters['fileName'] = parameters['fileName'];
            }
            if (parameters['fileName'] === undefined) {
                reject(new Error('Missing required  parameter: fileName'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddImportFileRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds an import file record. The Import
                    File Record describes where on a customer's external system
                    data to be imported into PatientIO is located, and how that
                    data is to be processed within PatientIO.
    * @method
    * @name IntegrationManagement#AddImportFileRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    AddImportFileRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteImportFileRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fileName'] !== undefined) {
            queryParameters['fileName'] = parameters['fileName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an import file record.
     * @method
     * @name IntegrationManagement#DeleteImportFileRecord
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fileName - Name of the file.
     * @param {string} authorization - access token
     */
    DeleteImportFileRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fileName'] !== undefined) {
                queryParameters['fileName'] = parameters['fileName'];
            }
            if (parameters['fileName'] === undefined) {
                reject(new Error('Missing required  parameter: fileName'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetIntegrationManagementDataURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves all integration management data for a sponsor.
     * @method
     * @name IntegrationManagement#GetIntegrationManagementData
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetIntegrationManagementData(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteIntegrationManagementDataURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes all integration management data for a sponsor.
     * @method
     * @name IntegrationManagement#DeleteIntegrationManagementData
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    DeleteIntegrationManagementData(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateIntegrationManagementCredentialsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/credentials';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates or creates integration management credentials for a sponsor.
                    These credentials are used to authenticate Patient IO automated processes with external
                    customer systems.
    * @method
    * @name IntegrationManagement#UpdateIntegrationManagementCredentials
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The integration management credential model.
         * @param {string} authorization - access token
    */
    UpdateIntegrationManagementCredentials(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/credentials';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/invitations.ts


/**
 *
 * @class Invitations
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Invitations extends api_defaultExport {
    GetInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/invitations/{invitationCode}';
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrives information about a specific invitation.
     * @method
     * @name Invitations#GetInvitation
     * @param {string} invitationCode - The invitation code.
     */
    GetInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/invitations/{invitationCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GenerateActivationCodeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/invitations/{invitationCode}/activationcode';
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that generates and sends the two factor activation code.
     * @method
     * @name Invitations#GenerateActivationCode
     * @param {string} invitationCode - The invitation code.
     * @param {} model - The model.
     */
    GenerateActivationCode(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/invitations/{invitationCode}/activationcode';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient.ts


/**
 *
 * @class Patient
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Patient extends api_defaultExport {
    IsPatientDeactivatedURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['sponsorPatientId'] !== undefined) {
            queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];
        }
        if (parameters['dateOfBirth'] !== undefined) {
            queryParameters['dateOfBirth'] = parameters['dateOfBirth'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that determines whether the patient is deactivated.
     * @method
     * @name Patient#IsPatientDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} sponsorPatientId - The sponsor patient identifier.
     * @param {string} dateOfBirth - The date of birth.
     */
    IsPatientDeactivated(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['sponsorPatientId'] !== undefined) {
                queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];
            }
            if (parameters['sponsorPatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorPatientId'));
                return;
            }
            if (parameters['dateOfBirth'] !== undefined) {
                queryParameters['dateOfBirth'] = parameters['dateOfBirth'];
            }
            if (parameters['dateOfBirth'] === undefined) {
                reject(new Error('Missing required  parameter: dateOfBirth'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ActivateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that activates a patient which is currently in inactive state.
     * @method
     * @name Patient#Activate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The activate patient with date of birth and sponsor patient id model.
     */
    Activate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientCarePlansURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves all care plans to which a patient has access
     * @method
     * @name Patient#GetPatientCarePlans
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetPatientCarePlans(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCarePlansToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that associates a care plan to a patient. A patient can be
                    associated to multiple care plans. A care plan is not owned by a patient
                    unless it is a "personal care plan." A patient can have only one personal
                    care plan per sponsor.
    * @method
    * @name Patient#AddCarePlansToPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The list of care plans to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCarePlansToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CloneCarePlanToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that clones a care plan to a patient, creating a personal care plan for that patient.
                    The personal care plan will be an exact copy of the cloned care plan.
    * @method
    * @name Patient#CloneCarePlanToPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - Identifies the care plan to be cloned to the patient and how the operation should occur.
         * @param {string} authorization - access token
    */
    CloneCarePlanToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCategoriesToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds categories to the patient.
                    Categories are known as groups within the dashboard UI.
    * @method
    * @name Patient#AddCategoriesToPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The categories to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCategoriesToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AffiliatePatientFromOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that affiliates a patient to an organization or
                    multiple organizations.
    * @method
    * @name Patient#AffiliatePatientFromOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The list of organization ids to assign.
         * @param {string} authorization - access token
    */
    AffiliatePatientFromOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ArchivePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/archive';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that archives a patient record, putting it into a state where it
                    cannot be authenticated modified or accessed. This takes place in the context of
                    a sponsor, so the patient may be active in other sponsors. Patient's cannot be
                    archived while they are associated with population level care plans for the sponsor.
    * @method
    * @name Patient#ArchivePatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    ArchivePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/archive';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetBroadcastToPatientsShortCodesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the list of broadcast to patients short codes.
     * @method
     * @name Patient#GetBroadcastToPatientsShortCodes
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetBroadcastToPatientsShortCodes(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    BroadcastToPatientsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that broadcasts a message to a list of patients through
                    either push, email, or sms.
    * @method
    * @name Patient#BroadcastToPatients
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The patient broadcast model.
         * @param {string} authorization - access token
    */
    BroadcastToPatients(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    BulkUpdateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/bulkUpdate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that allows a care team member to bulk manage patients.
                    The user can specify a collection of patients by ID to be managed.
                    Supported operations include adding/removing the care plans, adding/removing
                    the categories, and changing the organization of each patient in the collection.
    * @method
    * @name Patient#BulkUpdate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The bulk patient update model.
         * @param {string} authorization - access token
    */
    BulkUpdate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/bulkUpdate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePasswordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/password';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that allows a patient to change his password.
                    This API relies on the call used being authorized in the system
                    and knowing the existing password. Higher privilege users may
                    reset the password using this API without knowing the
                    existing password.
    * @method
    * @name Patient#ChangePassword
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
                    This must match authenticated user, except for those with higher
                    privilege levels than the patient.
         * @param {} model - The old and new passwords.
         * @param {string} authorization - access token
    */
    ChangePassword(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/password';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePatientRoleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/roles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes a patient's role.
     * @method
     * @name Patient#ChangePatientRole
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient change model.
     * @param {string} authorization - access token
     */
    ChangePatientRole(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePatientSettingsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/settings';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes a patient's settings.
     * @method
     * @name Patient#ChangePatientSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient settings model.
     * @param {string} authorization - access token
     */
    ChangePatientSettings(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/settings';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ClearPatientAlertsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/alerts';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that clears all active alerts on the patient.
     * @method
     * @name Patient#ClearPatientAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    ClearPatientAlerts(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/alerts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientsForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of all patients for a particular sponsor.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name Patient#GetPatientsForSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
         * @param {string} authorization - access token
    */
    GetPatientsForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a new patient record using an authorization code.
     * @method
     * @name Patient#CreatePatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The model describing the patient record to be created.
     */
    CreatePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/patient';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * Create a Patient care plan for a patient. Only a patient can
                create a Patient care plan.
    * @method
    * @name Patient#CreatePatientCarePlan
         * @param {string} distributorId -
         * @param {string} sponsorId -
         * @param {string} patientId -
         * @param {string} authorization - access token
    */
    CreatePatientCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/patient';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientInFilamentDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates a new patient record within the filament distributor
                    using an authorization code.
    * @method
    * @name Patient#CreatePatientInFilamentDistributor
         * @param {} model - The model describing the patient record to be created.
    */
    CreatePatientInFilamentDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePersonalCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/personal';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a personal care plan, which will initially have no content.
     * @method
     * @name Patient#CreatePersonalCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The model describing the personal care plan.
     * @param {string} authorization - access token
     */
    CreatePersonalCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/personal';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeactivateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/deactivate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deactivates a patient. Deactivating a patient puts them into a state
                    where the patient cannot login unless the patient is activated by supplying
                    secret properties, by default the SponsorPatientId and patient's recorded date of birth.
    * @method
    * @name Patient#Deactivate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    Deactivate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/deactivate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReactivateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/reactivate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that reactivates a patient.
     * @method
     * @name Patient#Reactivate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    Reactivate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/reactivate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves patient data.
                    The data is constrained by caller access permissions.
    * @method
    * @name Patient#GetPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    GetPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates the patient's information. If user name and email
                    address are to be changed, set NewUserName, leaving UserName as the original user name.
    * @method
    * @name Patient#UpdatePatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The patient update model.
         * @param {string} authorization - access token
    */
    UpdatePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeletePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that permanently and finally deletes a patient record.
     * @method
     * @name Patient#DeletePatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    DeletePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds or updates a photo for the patient.
                    This endpoint requires use of mime multipart content, not json.
    * @method
    * @name Patient#UploadPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    UploadPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeletePhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a patient's profile photo.
     * @method
     * @name Patient#DeletePhoto
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    DeletePhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetAlertedPatientsForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/alerted';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of all alerted patients for a particular organization.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name Patient#GetAlertedPatientsForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    GetAlertedPatientsForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/alerted';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetAlertedPatientsForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/alerted';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of all alerted patients for a particular sponsor.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name Patient#GetAlertedPatientsForSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetAlertedPatientsForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/alerted';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetArchivedPatientsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/archived-patients';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of all archived patients for a particular sponsor.
                    Archived patients may still be active for other sponsors, but are inactive for this sponsor.
    * @method
    * @name Patient#GetArchivedPatients
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetArchivedPatients(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/archived-patients';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCompletedTaskReadModelsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves tasks a patient has completed.
     * @method
     * @name Patient#GetCompletedTaskReadModels
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetCompletedTaskReadModels(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientSchedulableTasksURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedulable';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to retrives tasks that a patient may assign.
     * @method
     * @name Patient#GetPatientSchedulableTasks
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifer.
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    GetPatientSchedulableTasks(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedulable';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientsForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of all patients for a particular sponsor that are
                    associated to a particular organization id.
    * @method
    * @name Patient#GetPatientsForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    GetPatientsForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetTaskOutcomesOverTimeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks/{taskId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['intervalType'] !== undefined) {
            queryParameters['intervalType'] = parameters['intervalType'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the patient's task outcomes over time.
     * @method
     * @name Patient#GetTaskOutcomesOverTime
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskId - The task identifier.
     * @param {string} startDate - The yyyy-MM-dd format for the start date.
     * @param {string} endDate - The yyyy-MM-dd format for the end date.
     * @param {string} intervalType - The period of time the results should be grouped by.
     * @param {string} authorization - access token
     */
    GetTaskOutcomesOverTime(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks/{taskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['intervalType'] !== undefined) {
                queryParameters['intervalType'] = parameters['intervalType'];
            }
            if (parameters['intervalType'] === undefined) {
                reject(new Error('Missing required  parameter: intervalType'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    PushScheduleUpdateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/pushscheduleupdate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that pushes a schedule update to the patient immediately.
                    This call is used if a patient's care plan(s) has changed, and we want to update
                    today's tasks right away rather than leaving them stable according to the
                    previous care plan assignments.
    * @method
    * @name Patient#PushScheduleUpdate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    PushScheduleUpdate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/pushscheduleupdate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReplacePatientCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a patient's care plan to another care plan.
                    That is, swap one care plan for another. This method does not operate on Patient care plans.
    * @method
    * @name Patient#ReplacePatientCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The list of care plan ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveCarePlanFromPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a population or personal care plan from a patient.
     * @method
     * @name Patient#RemoveCarePlanFromPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    RemoveCarePlanFromPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReplacePatientCategoryURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{categoryId}', `${parameters['categoryId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a patient's category to another category.
                    That is, swap one category for another.
    * @method
    * @name Patient#ReplacePatientCategory
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} categoryId - The category identifier.
         * @param {} model - The list of category ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCategory(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{categoryId}', `${parameters['categoryId']}`);
            if (parameters['categoryId'] === undefined) {
                reject(new Error('Missing required  parameter: categoryId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveCategoryFromPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{categoryId}', `${parameters['categoryId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a category from a patient.
     * @method
     * @name Patient#RemoveCategoryFromPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} categoryId - The category identifier.
     * @param {string} authorization - access token
     */
    RemoveCategoryFromPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{categoryId}', `${parameters['categoryId']}`);
            if (parameters['categoryId'] === undefined) {
                reject(new Error('Missing required  parameter: categoryId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UnaffiliatePatientFromOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations/{organizationId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that unaffiliates a patient from an organization.
     * @method
     * @name Patient#UnaffiliatePatientFromOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} organizationId - The organization which should be removed from the patient.
     * @param {string} authorization - access token
     */
    UnaffiliatePatientFromOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UnarchivePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/unarchive';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a patient from archived state and makes them available for normal operations.
     * @method
     * @name Patient#UnarchivePatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    UnarchivePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/unarchive';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientFullNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/fullname';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Update the patient's name.
     * @method
     * @name Patient#UpdatePatientFullName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} fullName - The patient full name model.
     * @param {string} authorization - access token
     */
    UpdatePatientFullName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/fullname';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['fullName'] !== undefined) {
                body = parameters['fullName'];
            }
            if (parameters['fullName'] === undefined) {
                reject(new Error('Missing required  parameter: fullName'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientAddressURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/address';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Update the patient's address.
     * @method
     * @name Patient#UpdatePatientAddress
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient address binding model.
     * @param {string} authorization - access token
     */
    UpdatePatientAddress(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/address';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientTimeZoneURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/timezone';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Update the patient's time zone.
     * @method
     * @name Patient#UpdatePatientTimeZone
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient time zone binding model.
     * @param {string} authorization - access token
     */
    UpdatePatientTimeZone(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/timezone';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSignaledAlertsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/signaledalerts';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters['activeOnly'] !== undefined) {
            queryParameters['activeOnly'] = parameters['activeOnly'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves signaled alerts for the provided sponsor across a date range.
     * @method
     * @name Patient#GetSignaledAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.
     * @param {string} authorization - access token
     */
    GetSignaledAlerts(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/signaledalerts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['activeOnly'] !== undefined) {
                queryParameters['activeOnly'] = parameters['activeOnly'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-index.ts


/**
 *
 * @class PatientIndex
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientIndex extends api_defaultExport {
    GetRecentActivityPatientsForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retreives a list of patients that have recorded a measurement in the given time range.
     * @method
     * @name PatientIndex#GetRecentActivityPatientsForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.  Expected format: yyyy-MM-dd
     * @param {string} endDate - The end date.  Expected format: yyyy-MM-dd
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetRecentActivityPatientsForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPopulationCarePlansForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['carePlanIds'] !== undefined) {
            queryParameters['carePlanIds'] = parameters['carePlanIds'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retreives a list of patients that belong to one of the given care plans.
     * @method
     * @name PatientIndex#GetPopulationCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanIds - The list of care plan identifiers.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetPopulationCarePlansForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['carePlanIds'] !== undefined) {
                queryParameters['carePlanIds'] = parameters['carePlanIds'];
            }
            if (parameters['carePlanIds'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanIds'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetNoCarePlansForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retreives a list of patients that are not assigned a care plan.
     * @method
     * @name PatientIndex#GetNoCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetNoCarePlansForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPersonalPatientCarePlansForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retreives a list of patients that have a personal care plan.
     * @method
     * @name PatientIndex#GetPersonalPatientCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetPersonalPatientCarePlansForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientCarePlansForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retreives a list of patients that have a patient care plan.
     * @method
     * @name PatientIndex#GetPatientCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetPatientCarePlansForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientsbyNameForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['lastName'] !== undefined) {
            queryParameters['lastName'] = parameters['lastName'];
        }
        if (parameters['firstName'] !== undefined) {
            queryParameters['firstName'] = parameters['firstName'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retreives a list of patients that match a last name.  First name is used for additional filtering.
     * @method
     * @name PatientIndex#GetPatientsbyNameForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} lastName - The last name.
     * @param {string} firstName - The first name.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetPatientsbyNameForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['lastName'] !== undefined) {
                queryParameters['lastName'] = parameters['lastName'];
            }
            if (parameters['lastName'] === undefined) {
                reject(new Error('Missing required  parameter: lastName'));
                return;
            }
            if (parameters['firstName'] !== undefined) {
                queryParameters['firstName'] = parameters['firstName'];
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetAlertedPatientsForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of all alerted patients for a particular sponsor.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name PatientIndex#GetAlertedPatientsForSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
         * @param {string} authorization - access token
    */
    GetAlertedPatientsForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetNewPatientsForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves a list of patients that were created within the date range provided.
     * @method
     * @name PatientIndex#GetNewPatientsForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.  Expected format: yyyy-MM-dd
     * @param {string} endDate - The end date.  Expected format: yyyy-MM-dd
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetNewPatientsForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientsByAppointmentDateForSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves a list of patients that have appointments within the specified date range.
     * @method
     * @name PatientIndex#GetPatientsByAppointmentDateForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.
     * @param {string} endDate - The end date.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetPatientsByAppointmentDateForSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientsByUserLastMeasurementURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves a list of patients that the current user has recorded task for since a previous date.
     * @method
     * @name PatientIndex#GetPatientsByUserLastMeasurement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    GetPatientsByUserLastMeasurement(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-internal.ts


/**
 *
 * @class PatientInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientInternal extends api_defaultExport {
    ActivateWithSponsorNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{sponsorName}/activate';
        path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that activates a patient which is currently in inactive state.
     * @method
     * @name PatientInternal#ActivateWithSponsorName
     * @param {string} sponsorName - The sponsor identifier.
     * @param {} model - The model.
     */
    ActivateWithSponsorName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{sponsorName}/activate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);
            if (parameters['sponsorName'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorName'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    IsPatientDeactivatedURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/activate';
        if (parameters['sponsorPatientId'] !== undefined) {
            queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];
        }
        if (parameters['dateOfBirth'] !== undefined) {
            queryParameters['dateOfBirth'] = parameters['dateOfBirth'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that determines whether the patient is deactivated.
     * @method
     * @name PatientInternal#IsPatientDeactivated
     * @param {string} sponsorPatientId - The sponsor patient identifier.
     * @param {string} dateOfBirth - The date of birth.
     */
    IsPatientDeactivated(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/activate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            if (parameters['sponsorPatientId'] !== undefined) {
                queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];
            }
            if (parameters['sponsorPatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorPatientId'));
                return;
            }
            if (parameters['dateOfBirth'] !== undefined) {
                queryParameters['dateOfBirth'] = parameters['dateOfBirth'];
            }
            if (parameters['dateOfBirth'] === undefined) {
                reject(new Error('Missing required  parameter: dateOfBirth'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ActivateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/activate';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that activates a patient which is currently in inactivate state.
     * @method
     * @name PatientInternal#Activate
     * @param {} model - The activate patient with date of birth and sponsor patient id model.
     */
    Activate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/activate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCarePlansToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/careplans';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that associates a care plan to a patient. A patient can be associated
                    to multiple care plans. A care plan is not owned by a patient unless it is a "personal
                    care plan." A patient can have only one personal care plan at a time, and may not mix
                    a personal care plan with other population level care plans.
    * @method
    * @name PatientInternal#AddCarePlansToPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The list of care plans to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCarePlansToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/careplans';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCategoriesToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/categories';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds categories to the patient.
                    Categories are known as groups within the dashboard UI.
    * @method
    * @name PatientInternal#AddCategoriesToPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The categories to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCategoriesToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/categories';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AffiliatePatientFromOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/organizations';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that affiliates a patient to an organization or organizations.
     * @method
     * @name PatientInternal#AffiliatePatientFromOrganization
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {} model - The list of organization ids.
     * @param {string} authorization - access token
     */
    AffiliatePatientFromOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/organizations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePasswordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/password';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that allows a patient to change his password. This API relies
                    on the calling used being authorized in the system and knowing the existing password.
                    Higher privilege users may reset the password using this API without knowing the
                    existing password.
    * @method
    * @name PatientInternal#ChangePassword
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The old and new passwords.
         * @param {string} authorization - access token
    */
    ChangePassword(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/password';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePatientRoleInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/roles';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes patient's role.
     * @method
     * @name PatientInternal#ChangePatientRoleInternal
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {} model - The patient role change model.
     * @param {string} authorization - access token
     */
    ChangePatientRoleInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddRolesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/roles';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Adds roles to a patient.
     * @method
     * @name PatientInternal#AddRoles
     * @param {string} patientId - The patient identifier.
     * @param {} model - The roles to add.
     * @param {string} authorization - access token
     */
    AddRoles(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePatientSettingsInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/settings';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes patient settings.
     * @method
     * @name PatientInternal#ChangePatientSettingsInternal
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    ChangePatientSettingsInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/settings';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ClearPatientAlertsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/alerts';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that clears all active alerts on the patient.
     * @method
     * @name PatientInternal#ClearPatientAlerts
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    ClearPatientAlerts(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/alerts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/photo';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds or updates a photo for the patient.
                    This endpoint requires use of mime multipart content, not json.
    * @method
    * @name PatientInternal#UploadPhoto
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} authorization - access token
    */
    UploadPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeletePhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/photo';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a patient's profile photo.
     * @method
     * @name PatientInternal#DeletePhoto
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    DeletePhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCompletedTaskReadModelsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/tasks';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves tasks a patient has completed.
     * @method
     * @name PatientInternal#GetCompletedTaskReadModels
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    GetCompletedTaskReadModels(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/tasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetTaskOutcomesOverTimeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/tasks/{taskId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['intervalType'] !== undefined) {
            queryParameters['intervalType'] = parameters['intervalType'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the patients task outcomes over time.
     * @method
     * @name PatientInternal#GetTaskOutcomesOverTime
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} taskId - The task identifier.
     * @param {string} startDate - yyyy-MM-dd
     * @param {string} endDate - yyyy-MM-dd
     * @param {string} intervalType - The period of time the results should be grouped by.
     * @param {string} authorization - access token
     */
    GetTaskOutcomesOverTime(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/tasks/{taskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['intervalType'] !== undefined) {
                queryParameters['intervalType'] = parameters['intervalType'];
            }
            if (parameters['intervalType'] === undefined) {
                reject(new Error('Missing required  parameter: intervalType'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    PushScheduleUpdateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/pushscheduleupdate';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that pushes a schedule update to the patient immediately.
                    This call is used if a patient's care plan(s) has changed, and we want to
                    update today's tasks right away rather than leaving them stable according
                    to the previous care plan assignments.
    * @method
    * @name PatientInternal#PushScheduleUpdate
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} authorization - access token
    */
    PushScheduleUpdate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/pushscheduleupdate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReplacePatientCarePlanURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/careplans/{carePlanId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a patient's care plan to another care plan.
                    That is, swap one care plan for another. This method works on Personal and Population
                    Care Plans, but not on Patient care plans, which cannot be removed.
    * @method
    * @name PatientInternal#ReplacePatientCarePlan
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The list of care plan ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCarePlan(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveCarePlanFromPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/careplans/{carePlanId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that removes a population or personal care plan from a patient.
                    This method does not operate on Patient care plans.
    * @method
    * @name PatientInternal#RemoveCarePlanFromPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {string} authorization - access token
    */
    RemoveCarePlanFromPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/careplans/{carePlanId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReplacePatientCategoryURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/categories/{categoryId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{categoryId}', `${parameters['categoryId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a patient's category to another category.
                    That is, swap one category for another.
    * @method
    * @name PatientInternal#ReplacePatientCategory
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} categoryId - The category identifier.
         * @param {} model - The list of category ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCategory(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/categories/{categoryId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{categoryId}', `${parameters['categoryId']}`);
            if (parameters['categoryId'] === undefined) {
                reject(new Error('Missing required  parameter: categoryId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveCategoryFromPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/categories/{categoryId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{categoryId}', `${parameters['categoryId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a category from a patient.
     * @method
     * @name PatientInternal#RemoveCategoryFromPatient
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} categoryId - The category identifier.
     * @param {string} authorization - access token
     */
    RemoveCategoryFromPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/categories/{categoryId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{categoryId}', `${parameters['categoryId']}`);
            if (parameters['categoryId'] === undefined) {
                reject(new Error('Missing required  parameter: categoryId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UnaffiliatePatientFromOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that unaffiliates a patient from an organization.
     * @method
     * @name PatientInternal#UnaffiliatePatientFromOrganization
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} organizationId - The organization which should be removed from the patient.
     * @param {string} authorization - access token
     */
    UnaffiliatePatientFromOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSignaledAlertsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/signaledalerts';
        if (parameters['distributorId'] !== undefined) {
            queryParameters['distributorId'] = parameters['distributorId'];
        }
        if (parameters['sponsorId'] !== undefined) {
            queryParameters['sponsorId'] = parameters['sponsorId'];
        }
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters['activeOnly'] !== undefined) {
            queryParameters['activeOnly'] = parameters['activeOnly'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves signaled alerts for the provided sponsor across a date range.
     * @method
     * @name PatientInternal#GetSignaledAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.
     * @param {string} authorization - access token
     */
    GetSignaledAlerts(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/signaledalerts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            if (parameters['distributorId'] !== undefined) {
                queryParameters['distributorId'] = parameters['distributorId'];
            }
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['sponsorId'] !== undefined) {
                queryParameters['sponsorId'] = parameters['sponsorId'];
            }
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['activeOnly'] !== undefined) {
                queryParameters['activeOnly'] = parameters['activeOnly'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves patient data.
                    The data is constrained by caller access permissions.
    * @method
    * @name PatientInternal#GetPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} authorization - access token
    */
    GetPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates the patient's information.
                    If user name and email address are to be changed: set NewUserName,
                    leaving UserName as the original user name.
    * @method
    * @name PatientInternal#UpdatePatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The patient update model.
         * @param {string} authorization - access token
    */
    UpdatePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeletePatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that permanently and finally deletes a patient record.
     * @method
     * @name PatientInternal#DeletePatient
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    DeletePatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    BulkPatientUpdateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/bulkUpdate';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * Allows a care team member to bulk manage patients.
                    The user can specify a collection of patients by ID to be managed.
                    Supported operations include adding/removing the care plans, adding/removing
                    the categories, and changing the organization of each patient in the collection.
    * @method
    * @name PatientInternal#BulkPatientUpdate
         * @param {} model - The bulk patient update model
         * @param {string} authorization - access token
    */
    BulkPatientUpdate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/bulkUpdate';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-invitations.ts


/**
 *
 * @class PatientInvitations
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientInvitations extends api_defaultExport {
    AcceptPatientInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that accepts an invitation for a patient.
                    Accepting the invitation creates an actual Patient record within Patient IO,
                    using the data in the invitation.
    * @method
    * @name PatientInvitations#AcceptPatientInvitation
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} invitationCode - The invitation code.
         * @param {} model - The invitation acceptance model.
    */
    AcceptPatientInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientInvitationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['accepted'] !== undefined) {
            queryParameters['accepted'] = parameters['accepted'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves patient invitations for a sponsor.
    * @method
    * @name PatientInvitations#GetPatientInvitations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {boolean} accepted - If set to true retrieve accepted. false retrieves unaccepted. If ommitted
                    retrieves both.
         * @param {string} authorization - access token
    */
    GetPatientInvitations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['accepted'] !== undefined) {
                queryParameters['accepted'] = parameters['accepted'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a patient invitation and sends a notice to the invited patient.
     * @method
     * @name PatientInvitations#CreatePatientInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The patient invitation creation model.
     * @param {string} authorization - access token
     */
    CreatePatientInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientInvitationWithAuthCodeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method creates an invitation and sends a notice to the patient.
                    This method allows the creation of a patient invitation for a
                    sponsor based on an authorization code. This allows a client that only knows
                    the authorization code for a sponsor to create and send an invitation to a
                    sponsor to a patient without authenticating (supports the Kiosk application.)
    * @method
    * @name PatientInvitations#CreatePatientInvitationWithAuthCode
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorizationCode - The authorization code.
         * @param {} model - The kiosk patient invitation creation model.
    */
    CreatePatientInvitationWithAuthCode(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);
            if (parameters['authorizationCode'] === undefined) {
                reject(new Error('Missing required  parameter: authorizationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeletePatientInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an invitation for a patient.
     * @method
     * @name PatientInvitations#DeletePatientInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeletePatientInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ResendPatientInvitationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that resends unsent invitations given a list of invitation codes,
                    or invitations created within a certain date range.
    * @method
    * @name PatientInvitations#ResendPatientInvitations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The resend invitations model.
         * @param {string} authorization - access token
    */
    ResendPatientInvitations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-profile-definitions.ts


/**
 *
 * @class PatientProfileDefinitions
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientProfileDefinitions extends api_defaultExport {
    AddPatientProfileDefinitionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a patient profile definition within a distributor.
     * @method
     * @name PatientProfileDefinitions#AddPatientProfileDefinition
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The patient profile definition model.
     * @param {string} authorization - access token
     */
    AddPatientProfileDefinition(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AffiliatePatientProfileDefinitionToSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that provisions a patient profile definition from a distributor to a sponsor.
     * @method
     * @name PatientProfileDefinitions#AffiliatePatientProfileDefinitionToSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The list of sponsor identifiers.
     * @param {string} authorization - access token
     */
    AffiliatePatientProfileDefinitionToSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientProfileDefinitionCodeCollectionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a CodeCollection within a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionCodeCollection
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    CreatePatientProfileDefinitionCodeCollection(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientProfileDefinitionTagElementURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a TagElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTagElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    CreatePatientProfileDefinitionTagElement(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientProfileDefinitionTextElementURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a TextElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTextElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    CreatePatientProfileDefinitionTextElement(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientProfileDefinitionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#GetPatientProfileDefinition
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} authorization - access token
     */
    GetPatientProfileDefinition(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemovePatientProfileDefinitionCodeCollectionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{elementId}', `${parameters['elementId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a CodeableElement with a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionCodeCollection
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The patient profile definition code element identifier.
     * @param {string} authorization - access token
     */
    RemovePatientProfileDefinitionCodeCollection(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementId}', `${parameters['elementId']}`);
            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemovePatientProfileDefinitionTagElementURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a TagElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTagElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {string} authorization - access token
     */
    RemovePatientProfileDefinitionTagElement(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);
            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemovePatientProfileDefinitionTextElementURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{patientProfileDefinitionTextElementId}', `${parameters['patientProfileDefinitionTextElementId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a TextElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTextElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTextElementId - The patient profile definition text element identifier.
     * @param {string} authorization - access token
     */
    RemovePatientProfileDefinitionTextElement(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionTextElementId}', `${parameters['patientProfileDefinitionTextElementId']}`);
            if (parameters['patientProfileDefinitionTextElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTextElementId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SetPatientProfileDefinitionCategoryURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sets the category on any PatientProfileDefinition.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - PaitnetProfileDefinition information to update.
     * @param {string} authorization - access token
     */
    SetPatientProfileDefinitionCategory(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SetPatientProfileDefinitionElementCategoryURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{elementId}', `${parameters['elementId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sets the category on any PatientProfileDefinition element.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The element identifier.
     * @param {} model - PatientProfileDefinition information to update
     * @param {string} authorization - access token
     */
    SetPatientProfileDefinitionElementCategory(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementId}', `${parameters['elementId']}`);
            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SetPatientProfileDefinitionElementCategoryByNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{elementName}', `${parameters['elementName']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sets the category on any PatientProfileDefinition element by looking up the element by name.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategoryByName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementName - Name of the element.
     * @param {} model - PatientProfileDefinition information to update
     * @param {string} authorization - access token
     */
    SetPatientProfileDefinitionElementCategoryByName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementName}', `${parameters['elementName']}`);
            if (parameters['elementName'] === undefined) {
                reject(new Error('Missing required  parameter: elementName'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-profiles.ts


/**
 *
 * @class PatientProfiles
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientProfiles extends api_defaultExport {
    AddCodesToCodeCollectionOnSponsorPatientProfileURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{elementId}', `${parameters['elementId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that adds or replaces codes on a profile code collection.
     * @method
     * @name PatientProfiles#AddCodesToCodeCollectionOnSponsorPatientProfile
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The code collection identifier.
     * @param {} model - The code collection model.
     * @param {string} authorization - access token
     */
    AddCodesToCodeCollectionOnSponsorPatientProfile(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementId}', `${parameters['elementId']}`);
            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKeyURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{elementId}', `${parameters['elementId']}`);
        path = path.replace('{key}', `${parameters['key']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that adds or replaces codes on a profile code collection.
     * @method
     * @name PatientProfiles#AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The code collection identifier.
     * @param {string} key - The instance of the patient profile definition to update.
     * @param {} model - The code collection model.
     * @param {string} authorization - access token
     */
    AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementId}', `${parameters['elementId']}`);
            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }
            path = path.replace('{key}', `${parameters['key']}`);
            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddElementTagsToSponsorPatientProfileURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that adds a tag to a tag element in the patients profile.
     * @method
     * @name PatientProfiles#AddElementTagsToSponsorPatientProfile
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {} model - The profile tag element model.
     * @param {string} authorization - access token
     */
    AddElementTagsToSponsorPatientProfile(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);
            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddElementTagsToSponsorPatientProfileInstanceURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);
        path = path.replace('{key}', `${parameters['key']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that adds a tag to a tag element in the patients profile.
     * @method
     * @name PatientProfiles#AddElementTagsToSponsorPatientProfileInstance
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {string} key - The instance of the profile definition to retrieve.
     * @param {} model - The profile tage element model.
     * @param {string} authorization - access token
     */
    AddElementTagsToSponsorPatientProfileInstance(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);
            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }
            path = path.replace('{key}', `${parameters['key']}`);
            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetAllSponsorPatientProfilesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves all instances of the patient profile within
                    the context of a particular sponsor. That is - retrieves the patient's profile record.
    * @method
    * @name PatientProfiles#GetAllSponsorPatientProfiles
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} authorization - access token
    */
    GetAllSponsorPatientProfiles(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetAllSponsorPatientProfilesForProfileDefinitionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves all instances of the patient profile of
                    a particular patient profile definition, within the context of a particular
                    sponsor. That is - retrieves the patient's profile record.
    * @method
    * @name PatientProfiles#GetAllSponsorPatientProfilesForProfileDefinition
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} authorization - access token
    */
    GetAllSponsorPatientProfilesForProfileDefinition(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorPatientProfileURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves the default instance of a patient profile for a
                    particular patient profile definition, within  the context of a particular sponsor.
                    That is - retrieves the patient's profile record. This is the API to call for profiles
                    that are not instance based.
    * @method
    * @name PatientProfiles#GetSponsorPatientProfile
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} authorization - access token
    */
    GetSponsorPatientProfile(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorPatientProfileURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that supports updating multiple text and tag elements
                    within a patient's profile as a single operation.
    * @method
    * @name PatientProfiles#UpdateSponsorPatientProfile
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {} model - The sponsor patient profile update model.
         * @param {string} authorization - access token
    */
    UpdateSponsorPatientProfile(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorPatientProfileInstanceURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{key}', `${parameters['key']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves the patient profile for a particular instance of a particular patient
                    profile definition, within the context of a particular sponsor. That is - retrieves
                    the patient's profile record.
    * @method
    * @name PatientProfiles#GetSponsorPatientProfileInstance
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} key - The instance of the profile definition to retrieve.
         * @param {string} authorization - access token
    */
    GetSponsorPatientProfileInstance(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{key}', `${parameters['key']}`);
            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorPatientProfileInstanceURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{key}', `${parameters['key']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that supports updating multiple text and tag elements
                    within a patient's profile as a single operation.
    * @method
    * @name PatientProfiles#UpdateSponsorPatientProfileInstance
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} key - The instance of the profile definition to update.
         * @param {} model - The sponsor patient profile update model.
         * @param {string} authorization - access token
    */
    UpdateSponsorPatientProfileInstance(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{key}', `${parameters['key']}`);
            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveInstanceFromSponsorPatientProfileURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{key}', `${parameters['key']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes a specific instance of a patient profile for a particular patient
                    profile definition, within  the context of a particular sponsor.
    * @method
    * @name PatientProfiles#RemoveInstanceFromSponsorPatientProfile
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
         * @param {string} key - The instance of the profile definition to delete.
         * @param {string} authorization - access token
    */
    RemoveInstanceFromSponsorPatientProfile(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{key}', `${parameters['key']}`);
            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SetLinkTextURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
        path = path.replace('{key}', `${parameters['key']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sets the link text of a particular instance of a sponsor patient profile.
     * @method
     * @name PatientProfiles#SetLinkText
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} key - The instance of the patient profile definition to update.
     * @param {} model - The sponsor patient profile instance link text update model.
     * @param {string} authorization - access token
     */
    SetLinkText(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{key}', `${parameters['key']}`);
            if (parameters['key'] === undefined) {
                reject(new Error('Missing required  parameter: key'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-schedules.ts


/**
 *
 * @class PatientSchedules
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientSchedules extends api_defaultExport {
    UpdateAppointmentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a patient appointment.
     * @method
     * @name PatientSchedules#UpdateAppointment
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model -
     * @param {string} authorization - access token
     */
    UpdateAppointment(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateAppointmentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a new appointment for a patient.
     * @method
     * @name PatientSchedules#CreateAppointment
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The appointment creation model.
     * @param {string} authorization - access token
     */
    CreateAppointment(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CancelAppointmentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that cancels a Patient appointment.
     * @method
     * @name PatientSchedules#CancelAppointment
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The appointment cancellation model.
     * @param {string} authorization - access token
     */
    CancelAppointment(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CancelAppointmentByDateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments/date';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['appointmentDateTime'] !== undefined) {
            queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes a Patient appointment by taking a
                    specific appointment date time.
    * @method
    * @name PatientSchedules#CancelAppointmentByDate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} appointmentDateTime - The appointment date time.
         * @param {string} authorization - access token
    */
    CancelAppointmentByDate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments/date';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['appointmentDateTime'] !== undefined) {
                queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];
            }
            if (parameters['appointmentDateTime'] === undefined) {
                reject(new Error('Missing required  parameter: appointmentDateTime'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RecordScheduledTaskOutcomeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
        path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that records a measurement associated to a particular scheduled task.
    * @method
    * @name PatientSchedules#RecordScheduledTaskOutcome
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor)
                    who owns the scheduled task
         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned
                    in the format yyyy-MM-dd
         * @param {string} scheduledTaskId - The identifier of the scheduled task
         * @param {} model - The measurement model.
         * @param {string} authorization - access token
    */
    RecordScheduledTaskOutcome(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);
            if (parameters['scheduledTaskId'] === undefined) {
                reject(new Error('Missing required  parameter: scheduledTaskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetScheduleWithDateRangeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the schedule for a given patient within a date range.
     * @method
     * @name PatientSchedules#GetScheduleWithDateRange
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} startDate - yyyy-MM-dd
     * @param {string} endDate - yyyy-MM-dd
     * @param {string} authorization - access token
     */
    GetScheduleWithDateRange(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetScheduleForDayOfCareURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves the schedule for a patient for a particular day.
    * @method
    * @name PatientSchedules#GetScheduleForDayOfCare
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned
                    in the format yyyy-MM-dd
         * @param {string} authorization - access token
    */
    GetScheduleForDayOfCare(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/patient-schedules-internal.ts


/**
 *
 * @class PatientSchedulesInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class PatientSchedulesInternal extends api_defaultExport {
    UpdateAppointmentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/appointments';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a patient appointment.
     * @method
     * @name PatientSchedulesInternal#UpdateAppointment
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {} model - The appointment update model.
     * @param {string} authorization - access token
     */
    UpdateAppointment(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateAppointmentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/appointments';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a new Appointment for a patient.
     * @method
     * @name PatientSchedulesInternal#CreateAppointment
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {} model - The appointment creation model.
     * @param {string} authorization - access token
     */
    CreateAppointment(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CancelAppointmentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/appointments';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a Patient appointment.
     * @method
     * @name PatientSchedulesInternal#CancelAppointment
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {} model - The appointment cancellation model.
     * @param {string} authorization - access token
     */
    CancelAppointment(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CancelAppointmentByDateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['appointmentDateTime'] !== undefined) {
            queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a Patient appointment.
     * @method
     * @name PatientSchedulesInternal#CancelAppointmentByDate
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} appointmentDateTime - The appointment date time.
     * @param {string} authorization - access token
     */
    CancelAppointmentByDate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['appointmentDateTime'] !== undefined) {
                queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];
            }
            if (parameters['appointmentDateTime'] === undefined) {
                reject(new Error('Missing required  parameter: appointmentDateTime'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetScheduleWithDateRangeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the Schedule for a given patient within a date range.
     * @method
     * @name PatientSchedulesInternal#GetScheduleWithDateRange
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {string} startDate - yyyy-MM-dd
     * @param {string} endDate - yyyy-MM-dd
     * @param {string} authorization - access token
     */
    GetScheduleWithDateRange(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetScheduleForDayOfCareURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves the schedule for a patient for a particular day.
    * @method
    * @name PatientSchedulesInternal#GetScheduleForDayOfCare
         * @param {string} patientId - The Internal PatientIO patient identifier.
         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned
                    in the format yyyy-MM-dd
         * @param {string} authorization - access token
    */
    GetScheduleForDayOfCare(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RecordScheduledTaskOutcomeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
        path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that records a measurement associated to a particular scheduled task.
    * @method
    * @name PatientSchedulesInternal#RecordScheduledTaskOutcome
         * @param {string} patientId - The Internal PatientIO patient identifier.
         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned
                    in the format yyyy-MM-dd
         * @param {string} scheduledTaskId - The scheduled task identifier.
         * @param {} model - The measurement model.
         * @param {string} authorization - access token
    */
    RecordScheduledTaskOutcome(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);
            if (parameters['scheduledTaskId'] === undefined) {
                reject(new Error('Missing required  parameter: scheduledTaskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/reports.ts


/**
 *
 * @class Reports
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Reports extends api_defaultExport {
    CreateCarePlanAdherenceReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanAdherenceReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanAdherenceReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCarePlanAdherenceReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanAdherenceReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanAdherenceReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCarePlanEngagementReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient engagement percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanEngagementReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanEngagementReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCarePlanEngagementReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient engagement percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCarePlanEngagementReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateCarePlanEngagementReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCareTeamOrganizationEngagementReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets the organization engagement reports
                    for the given spondor identifier and date range.
    * @method
    * @name Reports#CreateCareTeamOrganizationEngagementReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamOrganizationEngagementReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCareTeamOrganizationSessionReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets the organization session reports
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateCareTeamOrganizationSessionReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamOrganizationSessionReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCareTeamSponsorEngagementReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/engagement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a sponsor engagement reports
                    for the given distributor and date range.
    * @method
    * @name Reports#CreateCareTeamSponsorEngagementReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamSponsorEngagementReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/engagement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateCareTeamSponsorSessionReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/sessions';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets the sponsor session reports
                    for the given distributor identifier and date range.
    * @method
    * @name Reports#CreateCareTeamSponsorSessionReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
    */
    CreateCareTeamSponsorSessionReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/care-team/sessions';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientChannelReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient channel percent usage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientChannelReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientChannelReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientChannelReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient channel percent usage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientChannelReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientChannelReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientDemographicReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient demographic report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientDemographicReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientDemographicReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientDemographicReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient demographic report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientDemographicReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientDemographicReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientInvitationReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient invitation report
                    for the given sponsor identifier and date range within
                    all organizations in the sponsor.
    * @method
    * @name Reports#CreatePatientInvitationReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientInvitationReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreatePatientInvitationReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient invitation report within a specific organization
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreatePatientInvitationReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreatePatientInvitationReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorEngagementAndAdherenceReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient engagement and adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorEngagementAndAdherenceReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorEngagementAndAdherenceReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorEngagementAndAdherenceReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient engagement and adherence percentage report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorEngagementAndAdherenceReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorEngagementAndAdherenceReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorOnboardingReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient invitations sent, activated, and pending report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorOnboardingReport
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorOnboardingReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorOnboardingReportForOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a patient invitations sent, activated, and pending report
                    for the given sponsor identifier and date range.
    * @method
    * @name Reports#CreateSponsorOnboardingReportForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDate - From date.
         * @param {string} toDate - To date.
         * @param {string} authorization - access token
    */
    CreateSponsorOnboardingReportForOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/shared-care.ts


/**
 *
 * @class SharedCare
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class SharedCare extends api_defaultExport {
    GetSharedCareUsersReportURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves a list of shared care users and who invited them.
     * @method
     * @name SharedCare#GetSharedCareUsersReport
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} authorization - access token
     */
    GetSharedCareUsersReport(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AcceptSharedCareInvitationForNewPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that allows new users to accept a shared care invitation they've received.
     * @method
     * @name SharedCare#AcceptSharedCareInvitationForNewPatient
     * @param {string} invitationCode - The invitation code.
     * @param {} model - The shared care invitation acceptance model.
     */
    AcceptSharedCareInvitationForNewPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSharedCareInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/invitations/{invitationCode}';
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the specified shared care invitation.
     * @method
     * @name SharedCare#GetSharedCareInvitation
     * @param {string} invitationCode - The invitation code.
     */
    GetSharedCareInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sharedcare/invitations/{invitationCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AcceptSharedCareInvitationForExistingPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that allows existing Patient IO Patients
                    to accept a shared care invitation they've received.
    * @method
    * @name SharedCare#AcceptSharedCareInvitationForExistingPatient
         * @param {string} distributorId - The distributor identifier
         * @param {string} sponsorId - The sponsor identifier
         * @param {string} patientId - The invited's patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} invitationCode - The invitation code.
         * @param {string} authorization - access token
    */
    AcceptSharedCareInvitationForExistingPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeOutgoingSharedCareMemberPermissionsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the shared care patient permissions.
     * @method
     * @name SharedCare#ChangeOutgoingSharedCareMemberPermissions
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} sharedCarePatientId - The shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The shared care permissions model.
     * @param {string} authorization - access token
     */
    ChangeOutgoingSharedCareMemberPermissions(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveOutgoingSharedCareMemberURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes shared care rights from a patient, for a relation.
     * @method
     * @name SharedCare#RemoveOutgoingSharedCareMember
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} sharedCarePatientId - The shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    RemoveOutgoingSharedCareMember(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeclineSharedCareInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that declines a shared care invitation.
     * @method
     * @name SharedCare#DeclineSharedCareInvitation
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeclineSharedCareInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPendingReceivedSharedCareInvitationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a patient's received shared care invitations.
     * @method
     * @name SharedCare#GetPendingReceivedSharedCareInvitations
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetPendingReceivedSharedCareInvitations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemovePatientFromIncomingSharedCareURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a patient from the incoming shared care of the specified patient.
     * @method
     * @name SharedCare#RemovePatientFromIncomingSharedCare
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} sharedCarePatientId - The incoming shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    RemovePatientFromIncomingSharedCare(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RevokeSharedCareInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that revokes a shared care invitation.
     * @method
     * @name SharedCare#RevokeSharedCareInvitation
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    RevokeSharedCareInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendSharedCareInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a patient invitation, and sends a notice to the invited patient.
     * @method
     * @name SharedCare#SendSharedCareInvitation
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The shared care invitation creation model.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendSharedCareInvitationEmailURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends the shared care invitation email.
     * @method
     * @name SharedCare#SendSharedCareInvitationEmail
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitationEmail(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/shared-care-internal.ts


/**
 *
 * @class SharedCareInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class SharedCareInternal extends api_defaultExport {
    AcceptSharedCareInvitationForExistingPatientInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that allows existing Patient IO Patients
                    to accept a shared care invitation they've received.
    * @method
    * @name SharedCareInternal#AcceptSharedCareInvitationForExistingPatientInternal
         * @param {string} patientId - The invited's patient identifier.
         * @param {string} invitationCode - The invitation code.
         * @param {string} authorization - access token
    */
    AcceptSharedCareInvitationForExistingPatientInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeOutgoingSharedCareMemberPermissionsInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the shared care patient permissions.
     * @method
     * @name SharedCareInternal#ChangeOutgoingSharedCareMemberPermissionsInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The shared care patient identifier.
     * @param {} model - The shared care permissions model.
     * @param {string} authorization - access token
     */
    ChangeOutgoingSharedCareMemberPermissionsInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveOutgoingSharedCareMemberInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes shared care rights from a patient, for a relation.
     * @method
     * @name SharedCareInternal#RemoveOutgoingSharedCareMemberInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The shared care patient identifier.
     * @param {string} authorization - access token
     */
    RemoveOutgoingSharedCareMemberInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeclineSharedCareInvitationInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that declines a shared care invitation.
     * @method
     * @name SharedCareInternal#DeclineSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeclineSharedCareInvitationInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPendingReceivedSharedCareInvitationsInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a patient's received shared care invitations.
     * @method
     * @name SharedCareInternal#GetPendingReceivedSharedCareInvitationsInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    GetPendingReceivedSharedCareInvitationsInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemovePatientFromIncomingSharedCareInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a patient from the incoming shared care of the specified patient.
     * @method
     * @name SharedCareInternal#RemovePatientFromIncomingSharedCareInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The incoming shared care patient identifier.
     * @param {string} authorization - access token
     */
    RemovePatientFromIncomingSharedCareInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RevokeSharedCareInvitationInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that revokes a shared care invitation.
     * @method
     * @name SharedCareInternal#RevokeSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    RevokeSharedCareInvitationInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendSharedCareInvitationInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a patient invitation, and sends a notice to the invited patient.
     * @method
     * @name SharedCareInternal#SendSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {} model - The shared care invitation creation model.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitationInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendSharedCareInvitationEmailInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends the shared care invitation email.
     * @method
     * @name SharedCareInternal#SendSharedCareInvitationEmailInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitationEmailInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/sponsors.ts


/**
 *
 * @class Sponsors
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Sponsors extends api_defaultExport {
    ChangeOrganizationSettingsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/settings';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that modifies organization settings.
     * @method
     * @name Sponsors#ChangeOrganizationSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The organization settings model.
     * @param {string} authorization - access token
     */
    ChangeOrganizationSettings(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/settings';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorOrganizationIdURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/sponsorOrganizationId';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that changes the SponsorOrganizationId of an organization.
                    The SponsorOrganizationId is an identifier, meaningful to a client, which
                    describes an Organization (e.g. an id number.)
    * @method
    * @name Sponsors#ChangeSponsorOrganizationId
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {} model - The sponsor organization identifier model.
         * @param {string} authorization - access token
    */
    ChangeSponsorOrganizationId(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/sponsorOrganizationId';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorSettingsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/settings';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes sponsor settings.
     * @method
     * @name Sponsors#ChangeSponsorSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The sponsor settings model.
     * @param {string} authorization - access token
     */
    ChangeSponsorSettings(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/settings';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorSecretsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets sponsor secrets.
     * @method
     * @name Sponsors#GetSponsorSecrets
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSponsorSecrets(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorSecretsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes sponsor secrets.
     * @method
     * @name Sponsors#ChangeSponsorSecrets
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The sponsor secrets model.
     * @param {string} authorization - access token
     */
    ChangeSponsorSecrets(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetOrganizationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves information about every organization within a sponsor.
     * @method
     * @name Sponsors#GetOrganizations
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetOrganizations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates an Organization within a sponsor.
                    An Organization is meant to be any organizational unit,
                    like a physical location or region.
    * @method
    * @name Sponsors#CreateOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The organization creation model.
         * @param {string} authorization - access token
    */
    CreateOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves information about a single organization within a Sponsor.
     * @method
     * @name Sponsors#GetOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     */
    GetOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an Organization within a sponsor.
     * @method
     * @name Sponsors#DeleteOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    DeleteOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetOrganizationBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the branding information for an organization.
     * @method
     * @name Sponsors#GetOrganizationBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     */
    GetOrganizationBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding for the organization.
     * @method
     * @name Sponsors#UpdateOrganizationBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The branding model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteOrganizationBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes Organization level branding.
                    Branding describes how dynamic white labeling
                    functionality works at the organization level.
    * @method
    * @name Sponsors#DeleteOrganizationBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    DeleteOrganizationBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadOrganizationPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a photo for the organization.
     * @method
     * @name Sponsors#UploadOrganizationPhoto
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    UploadOrganizationPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteOrganizationPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes the photo for an organization,
                    which is used an Organization identification pages.
    * @method
    * @name Sponsors#DeleteOrganizationPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    DeleteOrganizationPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves information about a sponsor.
                    Different role types may receive a more limited view of Sponsor information.
    * @method
    * @name Sponsors#GetSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteSponsorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes a Sponsor within a distributor - also all
                    care plans, patients, users, content and related data.
                    Cannot be reversed or recovered.
    * @method
    * @name Sponsors#DeleteSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor to be delete.
         * @param {string} authorization - access token
    */
    DeleteSponsor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the branding for the sponsor.
     * @method
     * @name Sponsors#GetSponsorBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     */
    GetSponsorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding for the sponsor.
     * @method
     * @name Sponsors#UpdateSponsorBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The branding model.
     * @param {string} authorization - access token
     */
    UpdateSponsorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteSponsorBrandingURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes the branding for a Sponsor,
                    which causes the Sponsor and any Organizations that do not have
                    their own branding, to revert to default Patient IO branding.
    * @method
    * @name Sponsors#DeleteSponsorBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    DeleteSponsorBranding(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteSponsorSecretURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets/{secretKey}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{secretKey}', `${parameters['secretKey']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Deletes a sponsor secret from the sponsor secrets object.
     * @method
     * @name Sponsors#DeleteSponsorSecret
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - the sponsor identifier.
     * @param {string} secretKey - The name of the secret to delete.
     * @param {string} authorization - access token
     */
    DeleteSponsorSecret(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets/{secretKey}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{secretKey}', `${parameters['secretKey']}`);
            if (parameters['secretKey'] === undefined) {
                reject(new Error('Missing required  parameter: secretKey'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorAuthorizationCodesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves all assigned authorization codes for a sponsor.
     * @method
     * @name Sponsors#GetSponsorAuthorizationCodes
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSponsorAuthorizationCodes(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorCountsForDateRangeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/counts';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the counts for the sponsor for the specified date range.
     * @method
     * @name Sponsors#GetSponsorCountsForDateRange
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fromDate - From date.
     * @param {string} toDate - To date.
     * @param {string} authorization - access token
     */
    GetSponsorCountsForDateRange(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/counts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorDataByNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/names/{sponsorName}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a limited subset of information about a sponsor,
                    given a sponsor name. Primarily omits sponsor tasks, care plans, organization
                    population count information.
    * @method
    * @name Sponsors#GetSponsorDataByName
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorName - Name of the sponsor.
    */
    GetSponsorDataByName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/names/{sponsorName}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);
            if (parameters['sponsorName'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorName'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorDataByRegistrationCodeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{id}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets data for a sponsor, within a distributor, with a given registration
     * @method
     * @name Sponsors#GetSponsorDataByRegistrationCode
     * @param {string} distributorId - The distributor identifier.
     * @param {string} id - The identifier.
     */
    GetSponsorDataByRegistrationCode(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{id}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{id}', `${parameters['id']}`);
            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationAddressURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/address';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the organization address.
     * @method
     * @name Sponsors#UpdateOrganizationAddress
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The address model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationAddress(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/address';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationDescriptionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/description';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the name of the organization.
     * @method
     * @name Sponsors#UpdateOrganizationDescription
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The for updating the description.
     * @param {string} authorization - access token
     */
    UpdateOrganizationDescription(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/description';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationDigitalContractURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/digitalcontact';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the organization digital contact information for an organization.
     * @method
     * @name Sponsors#UpdateOrganizationDigitalContract
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The digital contact information model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationDigitalContract(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/digitalcontact';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the name of an organization.
     * @method
     * @name Sponsors#UpdateOrganizationName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The organization name model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationPhoneNumberURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/phonenumber';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates an organization phone number.
     * @method
     * @name Sponsors#UpdateOrganizationPhoneNumber
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The telephone model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationPhoneNumber(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/phonenumber';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadOrganizationBrandingLogoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/logo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding logo for the organization.
     * @method
     * @name Sponsors#UploadOrganizationBrandingLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    UploadOrganizationBrandingLogo(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/logo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadOrganizationBrandingEmailLogoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/emaillogo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding email logo for the organization.
     * @method
     * @name Sponsors#UploadOrganizationBrandingEmailLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    UploadOrganizationBrandingEmailLogo(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/emaillogo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadSponsorBrandingLogoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/logo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branding logo for a sponsor.
     * @method
     * @name Sponsors#UploadSponsorBrandingLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    UploadSponsorBrandingLogo(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/logo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadSponsorBrandingEmailLogoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/emaillogo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * THis is a method that update the branding email logo for a sponsor.
     * @method
     * @name Sponsors#UploadSponsorBrandingEmailLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    UploadSponsorBrandingEmailLogo(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/emaillogo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSignaledAlertsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/signaledalerts';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters['activeOnly'] !== undefined) {
            queryParameters['activeOnly'] = parameters['activeOnly'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Retrieves signaled alerts for the provided sponsor across a date range.
     * @method
     * @name Sponsors#GetSignaledAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.
     * @param {string} authorization - access token
     */
    GetSignaledAlerts(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/signaledalerts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['activeOnly'] !== undefined) {
                queryParameters['activeOnly'] = parameters['activeOnly'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    TestSmsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/testsms';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This method sends a test SMS message to a specified number.  This exists
                    for the purpose of verifying that a sponsor has SMS configured properly.
    * @method
    * @name Sponsors#TestSms
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The PhoneBindingModel.
         * @param {string} authorization - access token
    */
    TestSms(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/testsms';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/sponsor-web-hook.ts


/**
 *
 * @class SponsorWebHook
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class SponsorWebHook extends api_defaultExport {
    GetWebHooksURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the current web hooks for the sponsor.
     * @method
     * @name SponsorWebHook#GetWebHooks
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetWebHooks(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateWebHookURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a web hook for the sponsor.
     * @method
     * @name SponsorWebHook#CreateWebHook
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The web hook model.
     * @param {string} authorization - access token
     */
    CreateWebHook(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateWebHookURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{webHookId}', `${parameters['webHookId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a particular web hook for a sponsor.
     * @method
     * @name SponsorWebHook#UpdateWebHook
     * @param {string} distributorId - The distributor identifier,
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} webHookId - The web hook identifier.
     * @param {} model - The web hook model.
     * @param {string} authorization - access token
     */
    UpdateWebHook(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{webHookId}', `${parameters['webHookId']}`);
            if (parameters['webHookId'] === undefined) {
                reject(new Error('Missing required  parameter: webHookId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteWebHookURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{webHookId}', `${parameters['webHookId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that delete's a particular web hook for a sponsor.
     * @method
     * @name SponsorWebHook#DeleteWebHook
     * @param {string} distributorId - The distributor identifier,
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} webHookId - The web hook identifier.
     * @param {string} authorization - access token
     */
    DeleteWebHook(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{webHookId}', `${parameters['webHookId']}`);
            if (parameters['webHookId'] === undefined) {
                reject(new Error('Missing required  parameter: webHookId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    BulkUpdateWebHookPayloadTypesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/bulkupdate/{payloadType}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{payloadType}', `${parameters['payloadType']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates multiple web hooks with a new payload type
     * @method
     * @name SponsorWebHook#BulkUpdateWebHookPayloadTypes
     * @param {string} distributorId -
     * @param {string} sponsorId -
     * @param {string} payloadType -
     * @param {} model - The list of web hook ids
     * @param {string} authorization - access token
     */
    BulkUpdateWebHookPayloadTypes(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/bulkupdate/{payloadType}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{payloadType}', `${parameters['payloadType']}`);
            if (parameters['payloadType'] === undefined) {
                reject(new Error('Missing required  parameter: payloadType'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateWebHookAuthorizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/authorization';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a particular web hook's authorization for a sponsor.
     * @method
     * @name SponsorWebHook#UpdateWebHookAuthorization
     * @param {string} distributorId - The distributor identifier,
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The web hook model.
     * @param {string} authorization - access token
     */
    UpdateWebHookAuthorization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/authorization';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/surveys.ts


/**
 *
 * @class Surveys
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Surveys extends api_defaultExport {
    GetSurveysURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a collection of surveys for a sponsor.
     * @method
     * @name Surveys#GetSurveys
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSurveys(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a new survey.
     * @method
     * @name Surveys#Create
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The survey creation model.
     * @param {string} authorization - access token
     */
    Create(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorSurveysURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a collection of surveys for a distributor.
     * @method
     * @name Surveys#GetDistributorSurveys
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    GetDistributorSurveys(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorSurveyURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a new survey.
     * @method
     * @name Surveys#CreateDistributorSurvey
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The survey creation model.
     * @param {string} authorization - access token
     */
    CreateDistributorSurvey(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSurveyURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/surveys/{surveyId}';
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a survey.
     * @method
     * @name Surveys#GetSurvey
     * @param {string} surveyId - The survey identifier.
     * @param {string} authorization - access token
     */
    GetSurvey(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/surveys/{surveyId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorSurveyURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a survey.
     * @method
     * @name Surveys#GetDistributorSurvey
     * @param {string} distributorId - The distributor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {string} authorization - access token
     */
    GetDistributorSurvey(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorSurveyURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a survey.
     * @method
     * @name Surveys#GetSponsorSurvey
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {string} authorization - access token
     */
    GetSponsorSurvey(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a survey.
     * @method
     * @name Surveys#Rename
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    Rename(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameDistributorSurveyURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a survey.
     * @method
     * @name Surveys#RenameDistributorSurvey
     * @param {string} distributorId - The distributor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameDistributorSurvey(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateBranchesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/branches';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branches of an existing survey.
     * @method
     * @name Surveys#UpdateBranches
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The survey's branches.
     * @param {string} authorization - access token
     */
    UpdateBranches(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/branches';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorBranchesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/branches';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the branches of an existing survey.
     * @method
     * @name Surveys#UpdateDistributorBranches
     * @param {string} distributorId - The distributor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The survey's branches.
     * @param {string} authorization - access token
     */
    UpdateDistributorBranches(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/branches';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorStateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/state';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that activates an existing survey.
     * @method
     * @name Surveys#UpdateDistributorState
     * @param {string} distributorId - The distributor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The survey state model.
     * @param {string} authorization - access token
     */
    UpdateDistributorState(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/state';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateStateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/state';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that activates an existing survey.
     * @method
     * @name Surveys#UpdateState
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The survey state model.
     * @param {string} authorization - access token
     */
    UpdateState(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/state';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorSurveyIdURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/sponsorsurveyid';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{surveyId}', `${parameters['surveyId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Responsible for updating the survey's sponsor survey id
     * @method
     * @name Surveys#UpdateSponsorSurveyId
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} surveyId - The survey identifier.
     * @param {} model - The survey sponsor survey id model.
     */
    UpdateSponsorSurveyId(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/sponsorsurveyid';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{surveyId}', `${parameters['surveyId']}`);
            if (parameters['surveyId'] === undefined) {
                reject(new Error('Missing required  parameter: surveyId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/tasks.ts


/**
 *
 * @class Tasks
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Tasks extends api_defaultExport {
    AddTagsToDistributorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/tags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds tags to a Distributor owned task. Tags are used to facilitate grouping
                    and filtering Tasks.
    * @method
    * @name Tasks#AddTagsToDistributorTask
         * @param {string} distributorId - The distributor identifier.
         * @param {string} taskId - The task identifier.
         * @param {} model - The tag list model.
         * @param {string} authorization - access token
    */
    AddTagsToDistributorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/tags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddTagsToSponsorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that adds tags to a Sponsor owned Task.
                    Tags are used to facilitate grouping and filtering Tasks.
    * @method
    * @name Tasks#AddTagsToSponsorTask
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} taskId - The task identifier.
         * @param {} model - The tag list model.
         * @param {string} authorization - access token
    */
    AddTagsToSponsorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveTagsFromDistributorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes tags from a distributor task.
     * @method
     * @name Tasks#RemoveTagsFromDistributorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The tag list model.
     * @param {string} sponsorId -
     * @param {string} authorization - access token
     */
    RemoveTagsFromDistributorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeDistributorTaskContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the content URI assigned to a distributor task
     * @method
     * @name Tasks#ChangeDistributorTaskContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The task content model.
     * @param {string} authorization - access token
     */
    ChangeDistributorTaskContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeDistributorTaskDeactivatedStateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/deactivated';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that activates or Deactivates a Distributor Task.
                    A deactivated Task can no longer be assigned to a Patient.
    * @method
    * @name Tasks#ChangeDistributorTaskDeactivatedState
         * @param {string} distributorId - The distributor identifier.
         * @param {string} taskId - The task identifier.
         * @param {} model - The task deactivated state model.
         * @param {string} authorization - access token
    */
    ChangeDistributorTaskDeactivatedState(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/deactivated';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeDistributorTaskDescriptionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/description';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the description for a Distributor Task
     * @method
     * @name Tasks#ChangeDistributorTaskDescription
     * @param {string} distributorId - The distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The task description model.
     * @param {string} authorization - access token
     */
    ChangeDistributorTaskDescription(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/description';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeDistributorTaskMeasurementURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/measurement';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the Measurement information for a Distributor Task.
     * @method
     * @name Tasks#ChangeDistributorTaskMeasurement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The task measurement model.
     * @param {string} authorization - access token
     */
    ChangeDistributorTaskMeasurement(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/measurement';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeDistributorTaskCodesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/codes';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that changes the MedicalCodes of a distributor
                task. Any existing codes are replaced.
    * @method
    * @name Tasks#ChangeDistributorTaskCodes
         * @param {string} distributorId - The distributor identifier.
         * @param {string} taskId - The task identifier.
         * @param {} model - &gt;The MedicalCodes model.
         * @param {string} authorization - access token
    */
    ChangeDistributorTaskCodes(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/codes';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorTaskCodesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/codes';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that changes the MedicalCodes of a task.
                Any existing codes are replaced.
    * @method
    * @name Tasks#ChangeSponsorTaskCodes
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} taskId - The task identifier.
         * @param {} model - The MedicalCodes model.
         * @param {string} authorization - access token
    */
    ChangeSponsorTaskCodes(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/codes';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorTaskContentURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/content';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the content URI of the sponsor task.
     * @method
     * @name Tasks#ChangeSponsorTaskContent
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The task content model.
     * @param {string} authorization - access token
     */
    ChangeSponsorTaskContent(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/content';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorTaskDeactivatedStateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/deactivated';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that activates or deactivates a Sponsor Task.
                    A deactivated task can no longer be assigned to Care Plans.
    * @method
    * @name Tasks#ChangeSponsorTaskDeactivatedState
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} taskId - The task identifier.
         * @param {} model - The task deactivated state model.
         * @param {string} authorization - access token
    */
    ChangeSponsorTaskDeactivatedState(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/deactivated';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorTaskDescriptionURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/description';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the description for a sponsor task.
     * @method
     * @name Tasks#ChangeSponsorTaskDescription
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    ChangeSponsorTaskDescription(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/description';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorTaskIdURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/sponsortaskid';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the sponsor task identifier for a sponsor task.
     * @method
     * @name Tasks#ChangeSponsorTaskId
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    ChangeSponsorTaskId(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/sponsortaskid';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorTasksURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets all Distributor tasks.
     * @method
     * @name Tasks#GetDistributorTasks
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    GetDistributorTasks(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a distributor level task.
     * @method
     * @name Tasks#CreateDistributorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The task creation model.
     * @param {string} authorization - access token
     */
    CreateDistributorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReplaceDistributorTaskTagURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasktags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters['tagName'] !== undefined) {
            queryParameters['tagName'] = parameters['tagName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that replaces a TaskTag for a Distributor.
     * @method
     * @name Tasks#ReplaceDistributorTaskTag
     * @param {string} distributorId - The distributor identifier.
     * @param {string} tagName - The name of the tag to replace.
     * @param {} model - The model for the name of the tag to add
     * @param {string} authorization - access token
     */
    ReplaceDistributorTaskTag(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasktags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['tagName'] !== undefined) {
                queryParameters['tagName'] = parameters['tagName'];
            }
            if (parameters['tagName'] === undefined) {
                reject(new Error('Missing required  parameter: tagName'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorTaskTagURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasktags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a TaskTag for a Distributor
     * @method
     * @name Tasks#CreateDistributorTaskTag
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The model for the name of the tag to add
     * @param {string} authorization - access token
     */
    CreateDistributorTaskTag(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasktags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorTaskTagURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasktags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters['tagName'] !== undefined) {
            queryParameters['tagName'] = parameters['tagName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that delete a TaskTag for a distributor.
     * @method
     * @name Tasks#DeleteDistributorTaskTag
     * @param {string} distributorId - The distributor identifier.
     * @param {string} tagName - The tag name.
     * @param {string} authorization - access token
     */
    DeleteDistributorTaskTag(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasktags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['tagName'] !== undefined) {
                queryParameters['tagName'] = parameters['tagName'];
            }
            if (parameters['tagName'] === undefined) {
                reject(new Error('Missing required  parameter: tagName'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorTasksURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the sponsor tasks.
     * @method
     * @name Tasks#GetSponsorTasks
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSponsorTasks(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a task for a Sponsor.
     * @method
     * @name Tasks#CreateSponsorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The task creation model.
     * @param {string} authorization - access token
     */
    CreateSponsorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorTaskAlertURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates the task alert for a Task.
     * @method
     * @name Tasks#CreateSponsorTaskAlert
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    CreateSponsorTaskAlert(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ReplaceSponsorTaskTagURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['tagName'] !== undefined) {
            queryParameters['tagName'] = parameters['tagName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that replaces a TaskTag for a Distributor.
     * @method
     * @name Tasks#ReplaceSponsorTaskTag
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} tagName - The name of the tag to replace.
     * @param {} model - The model for the name of the tag to add
     * @param {string} authorization - access token
     */
    ReplaceSponsorTaskTag(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['tagName'] !== undefined) {
                queryParameters['tagName'] = parameters['tagName'];
            }
            if (parameters['tagName'] === undefined) {
                reject(new Error('Missing required  parameter: tagName'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorTaskTagURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a TaskTag for a Sponsor
     * @method
     * @name Tasks#CreateSponsorTaskTag
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The model for the name of the tag to add
     * @param {string} authorization - access token
     */
    CreateSponsorTaskTag(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteSponsorTaskTagURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['tagName'] !== undefined) {
            queryParameters['tagName'] = parameters['tagName'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a TaskTag from a Sponsor.
     * @method
     * @name Tasks#DeleteSponsorTaskTag
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} tagName - The name of the tag to delete.
     * @param {string} authorization - access token
     */
    DeleteSponsorTaskTag(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['tagName'] !== undefined) {
                queryParameters['tagName'] = parameters['tagName'];
            }
            if (parameters['tagName'] === undefined) {
                reject(new Error('Missing required  parameter: tagName'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a Distributor task.
     * @method
     * @name Tasks#GetDistributorTask
     * @param {string} distributorId - The Distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {string} authorization - access token
     */
    GetDistributorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a task for a sponsor.
     * @method
     * @name Tasks#UpdateDistributorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The task update model.
     * @param {string} authorization - access token
     */
    UpdateDistributorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the sponsor task.
     * @method
     * @name Tasks#GetSponsorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {string} authorization - access token
     */
    GetSponsorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a task for a sponsor.
     * @method
     * @name Tasks#UpdateSponsorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The task update model.
     * @param {string} authorization - access token
     */
    UpdateSponsorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorTaskAlertURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        path = path.replace('{alertId}', `${parameters['alertId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a task alert for a Task.
     * @method
     * @name Tasks#UpdateSponsorTaskAlert
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {string} alertId - The alert identifier.
     * @param {} model - The task alert update model.
     * @param {string} authorization - access token
     */
    UpdateSponsorTaskAlert(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            path = path.replace('{alertId}', `${parameters['alertId']}`);
            if (parameters['alertId'] === undefined) {
                reject(new Error('Missing required  parameter: alertId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveSponsorTaskAlertURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        path = path.replace('{alertId}', `${parameters['alertId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes the task alert for a Task.
     * @method
     * @name Tasks#RemoveSponsorTaskAlert
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {string} alertId - The alert identifier.
     * @param {string} authorization - access token
     */
    RemoveSponsorTaskAlert(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            path = path.replace('{alertId}', `${parameters['alertId']}`);
            if (parameters['alertId'] === undefined) {
                reject(new Error('Missing required  parameter: alertId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameDistributorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a task for a distributor.
     * @method
     * @name Tasks#RenameDistributorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameDistributorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/tasks/{taskId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RenameSponsorTaskURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/name';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{taskId}', `${parameters['taskId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that renames a task for a sponsor.
     * @method
     * @name Tasks#RenameSponsorTask
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskId - The task identifier.
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameSponsorTask(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/name';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{taskId}', `${parameters['taskId']}`);
            if (parameters['taskId'] === undefined) {
                reject(new Error('Missing required  parameter: taskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/task-schedule-items.ts


/**
 *
 * @class TaskScheduleItems
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class TaskScheduleItems extends api_defaultExport {
    CreateDistributorTreatmentTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates one or more TreatmentTaskScheduleItems within a TaskSchedule.
     * @method
     * @name TaskScheduleItems#CreateDistributorTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The treatment task schedule items list.
     * @param {string} authorization - access token
     */
    CreateDistributorTreatmentTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorTreatmentTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes TreatmentTaskScheduleItems from a distributor care plan.
     * @method
     * @name TaskScheduleItems#DeleteDistributorTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    DeleteDistributorTreatmentTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    PatchDistributorTreatmentTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that makes common changes to all elements of a
                    TaskSchedule which are TreatmentTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchDistributorTreatmentTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    PatchDistributorTreatmentTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateTreatmentTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates one or more TreatmentTaskScheduleItems within a TaskSchedule.
     * @method
     * @name TaskScheduleItems#CreateTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The treatment task schedule items list.
     * @param {string} authorization - access token
     */
    CreateTreatmentTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteTreatmentTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes TreatmentTaskScheduleItems
     * @method
     * @name TaskScheduleItems#DeleteTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    DeleteTreatmentTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    PatchTreatmentTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that makes common changes to all elements of a
                    TaskSchedule which are TreatmentTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchTreatmentTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    PatchTreatmentTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorUntilCompleteTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates an until complete task schedule item.
                    These items are intended to cause a given task to appear in a patient's
                    schedule under a particular circumstance, generally related to time,
                    and be scheduled continuously in a patient's schedule until the task is
                    completed. The item can then appear again, according to a plan for repetition
                    that can be specified in the UntilCompleteTaskScheduleItem
    * @method
    * @name TaskScheduleItems#CreateDistributorUntilCompleteTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {} model - The until complete task schedule item model.
         * @param {string} authorization - access token
    */
    CreateDistributorUntilCompleteTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateUntilCompleteTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates an until complete task schedule item.
                    These items are intended to cause a given task to appear in a patient's
                    schedule under a particular circumstance, generally related to time,
                    and be scheduled continuously in a patient's schedule until the task is
                    completed. The item can then appear again, according to a plan for repetition
                    that can be specified in the UntilCompleteTaskScheduleItem
    * @method
    * @name TaskScheduleItems#CreateUntilCompleteTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {} model - The until complete task schedule item model.
         * @param {string} authorization - access token
    */
    CreateUntilCompleteTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorWeeklyTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates one or more WeeklyTaskScheduleItems within a TaskSchedule
     * @method
     * @name TaskScheduleItems#CreateDistributorWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The weekly task schedule item list.
     * @param {string} authorization - access token
     */
    CreateDistributorWeeklyTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorWeeklyTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes one or more WeeklyTaskScheduleItems for a distributor care plan.
     * @method
     * @name TaskScheduleItems#DeleteDistributorWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    DeleteDistributorWeeklyTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    PatchDistributorWeeklyTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that makes common changes to all elements of a TaskSchedule which are
                    WeeklyTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchDistributorWeeklyTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    PatchDistributorWeeklyTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateWeeklyTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates one or more WeeklyTaskScheduleItems within a TaskSchedule
     * @method
     * @name TaskScheduleItems#CreateWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The weekly task schedule item list.
     * @param {string} authorization - access token
     */
    CreateWeeklyTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteWeeklyTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes one or more WeeklyTaskScheduleItems
     * @method
     * @name TaskScheduleItems#DeleteWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    DeleteWeeklyTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    PatchWeeklyTaskScheduleItemsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that makes common changes to all elements of a TaskSchedule which are
                    WeeklyTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchWeeklyTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    PatchWeeklyTaskScheduleItems(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorTreatmentTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetDistributorTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    GetDistributorTreatmentTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTreatmentTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a TreatmentTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateDistributorTreatmentTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    UpdateDistributorTreatmentTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorTreatmentTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteDistributorTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    DeleteDistributorTreatmentTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetTreatmentTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    GetTreatmentTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTreatmentTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a TreatmentTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateTreatmentTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    UpdateTreatmentTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteTreatmentTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    DeleteTreatmentTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorUntilCompleteTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteDistributorUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    DeleteDistributorUntilCompleteTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteUntilCompleteTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    DeleteUntilCompleteTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorWeeklyTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetDistributorWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    GetDistributorWeeklyTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorWeeklyTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a WeeklyTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateDistributorWeeklyTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    UpdateDistributorWeeklyTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorWeeklyTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteDistributorWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    DeleteDistributorWeeklyTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetWeeklyTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    GetWeeklyTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateWeeklyTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a WeeklyTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateWeeklyTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    UpdateWeeklyTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteWeeklyTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    DeleteWeeklyTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorUntilCompleteTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['taskScheduleItemId'] !== undefined) {
            queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#UpdateDistributorUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {} model - The until complete task schedule item model.
     * @param {string} authorization - access token
     */
    UpdateDistributorUntilCompleteTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemId'] !== undefined) {
                queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
            }
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateUntilCompleteTaskScheduleItemURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters['taskScheduleItemId'] !== undefined) {
            queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#UpdateUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {} model - The until complete task schedule item model.
     * @param {string} authorization - access token
     */
    UpdateUntilCompleteTaskScheduleItem(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemId'] !== undefined) {
                queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
            }
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/task-schedules.ts


/**
 *
 * @class TaskSchedules
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class TaskSchedules extends api_defaultExport {
    CreateDistributorTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates one or more task schedules within a Care Plan.
                    This API also allows the creation of
                    TaskScheduleItems at the same time that the TaskSchedule or schedules are
                    created.
    * @method
    * @name TaskSchedules#CreateDistributorTaskSchedule
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The information to be used in creating the TaskSchedule.
         * @param {string} authorization - access token
    */
    CreateDistributorTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates one or more task schedules within a Care Plan.
                    This API also allows the creation of
                    TaskScheduleItems at the same time that the TaskSchedule or schedules are
                    created.
    * @method
    * @name TaskSchedules#CreateTaskSchedule
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The information to be used in creating the TaskSchedule.
         * @param {string} authorization - access token
    */
    CreateTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ClearTaskSchedulesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Clears the task schedules from a patient or personalized care plan.
     * @method
     * @name TaskSchedules#ClearTaskSchedules
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The careplan identifier.
     * @param {string} authorization - access token
     */
    ClearTaskSchedules(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a TaskSchedule for a CarePlan.
     * @method
     * @name TaskSchedules#GetDistributorTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    GetDistributorTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveDistributorTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Remove task schedule froma  distributor.
     * @method
     * @name TaskSchedules#RemoveDistributorTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    RemoveDistributorTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a TaskSchedule for a CarePlan.
     * @method
     * @name TaskSchedules#GetTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    GetTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a TaskSchedule from a CarePlan
     * @method
     * @name TaskSchedules#RemoveTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    RemoveTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleNoteURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a note on a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleNote
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleNote(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleNoteURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a note on a distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleNote
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleNote(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleTargetURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the target on a Distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleTarget
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleTarget(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleTargetURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the target on a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleTarget
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleTarget(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleRolesAllowedToRecordOutcomeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a Distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleRolesAllowedToRecordOutcomeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleRolesAllowedToRecordOutcome
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleRolesAllowedToRecordOutcome(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleIsDeactivatedURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleIsDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleIsDeactivated(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleIsDeactivatedURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.
     * @method
     * @name TaskSchedules#UpdateTaskScheduleIsDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleIsDeactivated(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/time.ts


/**
 *
 * @class Time
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Time extends api_defaultExport {
    GetTimeZonesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/timezones/{countryCode}';
        path = path.replace('{countryCode}', `${parameters['countryCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the time zones.
     * @method
     * @name Time#GetTimeZones
     * @param {string} countryCode - The country code.
     */
    GetTimeZones(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/timezones/{countryCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{countryCode}', `${parameters['countryCode']}`);
            if (parameters['countryCode'] === undefined) {
                reject(new Error('Missing required  parameter: countryCode'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/time-card.ts


/**
 *
 * @class TimeCard
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class TimeCard extends api_defaultExport {
    CreateTimeCardRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates time card entries. Requires a checkin record,
                    may optionally include a checkout record.
    * @method
    * @name TimeCard#CreateTimeCardRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {} model - The time card record to create.
         * @param {string} authorization - access token
    */
    CreateTimeCardRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetCurrentTimeCardURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves the current time card for a user (if a time card exists)
                    for a patient.
    * @method
    * @name TimeCard#GetCurrentTimeCard
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} patientId - Required - the  patient id must be specified
         * @param {string} authorization - access token
    */
    GetCurrentTimeCard(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateCurrentTimeCardURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * If the user has an existing time
     * @method
     * @name TimeCard#UpdateCurrentTimeCard
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {} model - Requested update to the current time card.
     * @param {string} authorization - access token
     */
    UpdateCurrentTimeCard(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientTimeCardURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves the time card for a patient, showing all of a given sponsor's
                    user  interactions with that patient.
    * @method
    * @name TimeCard#GetPatientTimeCard
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - Filter to a single patient
         * @param {string} fromDate - The beginning point, in UTC, from which to search for time cards, inclusive. May be omitted
         * @param {string} toDate - The endpoints point, in UTC, to which to search for time cards, inclusive. May be omitted
         * @param {string} authorization - access token
    */
    GetPatientTimeCard(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetRecentTimeCardsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves recent time card records for a user/patient. Generally, that
                    means records during the 24 hours prior to the most recent time card entry
    * @method
    * @name TimeCard#GetRecentTimeCards
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} patientId - Required - the  patient id must be specified
         * @param {string} authorization - access token
    */
    GetRecentTimeCards(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetTimeCardRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the time card record corresponding to a particular id.
     * @method
     * @name TimeCard#GetTimeCardRecord
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {string} timeCardRecordId - The time card record identifier.
     * @param {string} authorization - access token
     */
    GetTimeCardRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);
            if (parameters['timeCardRecordId'] === undefined) {
                reject(new Error('Missing required  parameter: timeCardRecordId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTimeCardRecordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates time card record actions given a time card id.
                    All values for the action must be supplied, or existing data will be
                    blanked.
    * @method
    * @name TimeCard#UpdateTimeCardRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier.
         * @param {string} timeCardRecordId - The time card record identifier.
         * @param {} model - The time card record update.
         * @param {string} authorization - access token
    */
    UpdateTimeCardRecord(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);
            if (parameters['timeCardRecordId'] === undefined) {
                reject(new Error('Missing required  parameter: timeCardRecordId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetUserPatientTimeCardURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['patientId'] !== undefined) {
            queryParameters['patientId'] = parameters['patientId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves the time card for a user's interactions with a patient
     * @method
     * @name TimeCard#GetUserPatientTimeCard
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier.
     * @param {string} patientId - Optional - if not specified retrieves all timecards for all patients
     * @param {string} authorization - access token
     */
    GetUserPatientTimeCard(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['patientId'] !== undefined) {
                queryParameters['patientId'] = parameters['patientId'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/user.ts


/**
 *
 * @class User
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class User extends api_defaultExport {
    AddRolesToSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that assigns roles to a user scoped to a specific sponsor.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#AddRolesToSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - List of roles to assign.
         * @param {string} authorization - access token
    */
    AddRolesToSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteRolesFromSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes the roles from a sponsor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#DeleteRolesFromSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - List of roles to remove.
         * @param {string} authorization - access token
    */
    DeleteRolesFromSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AffiliateUserToOrganizationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that affiliates a user to organizations.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#AffiliateUserToOrganizations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The list of organization ids to assign.
         * @param {string} authorization - access token
    */
    AffiliateUserToOrganizations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveUserAffiliationToOrganizationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that removes a user's affiliation to organizations.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#RemoveUserAffiliationToOrganizations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The organization(s) to disaffiliate  from a user.
         * @param {string} authorization - access token
    */
    RemoveUserAffiliationToOrganizations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ArchiveSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/archive';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that archives the specified sponsor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#ArchiveSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    ArchiveSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/archive';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePasswordURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/password';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that changes the password for a user. This API relies
                    on the call used being authorized in the system and knowing the existing password.
                    Higher privilege users may reset the password using this API without knowing the
                    existing password.
    * @method
    * @name User#ChangePassword
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The change password binding model which contains the current password and the new one.
         * @param {string} authorization - access token
    */
    ChangePassword(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/password';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeSponsorUserSettingsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/settings';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that changes the settings of a sponsor user.
                    This method requires the call to the user or sponsor admin level.
    * @method
    * @name User#ChangeSponsorUserSettings
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The user settings model.
         * @param {string} authorization - access token
    */
    ChangeSponsorUserSettings(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/settings';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorUserListURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a list of distributor users.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name User#GetDistributorUserList
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    GetDistributorUserList(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateDistributorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates a new user record within a distributor.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name User#CreateDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {} model - The user creatioin model.
         * @param {string} authorization - access token
    */
    CreateDistributorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorUserListURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['organizationId'] !== undefined) {
            queryParameters['organizationId'] = parameters['organizationId'];
        }
        if (parameters['archived'] !== undefined) {
            queryParameters['archived'] = parameters['archived'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * Gets the sponsor user list for each the current user.
                    Depending on their role, they will see different users.
    * @method
    * @name User#GetSponsorUserList
         * @param {string} distributorId - The distributor identifier
         * @param {string} sponsorId - The sponsor identifier.
         * @param {array} organizationId - The optional organization identifier array.
         * @param {boolean} archived - The optional archive flag.
         * @param {string} authorization - access token
    */
    GetSponsorUserList(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['organizationId'] !== undefined) {
                queryParameters['organizationId'] = parameters['organizationId'];
            }
            if (parameters['archived'] !== undefined) {
                queryParameters['archived'] = parameters['archived'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates a new user record within a sponsor.
                    This method requires care plan manager level rights or higher.
    * @method
    * @name User#CreateSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The user creation model.
         * @param {string} authorization - access token
    */
    CreateSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadSponsorUserPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a photo for the user.
                    This method requires nurse level rights or higher.
    * @method
    * @name User#UploadSponsorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    UploadSponsorUserPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteSponsorUserPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes a photo for a user.
                    This method requires the call to be the user or a sponsor admin.
    * @method
    * @name User#DeleteSponsorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    DeleteSponsorUserPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorUserAsyncURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a sponsor user.
                    This method requires nurse level rights or higher.
    * @method
    * @name User#GetSponsorUserAsync
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    GetSponsorUserAsync(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates information for a sponsor user.
                    This method requires nurse level rights or higher.
    * @method
    * @name User#UpdateSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The user update model.
         * @param {string} authorization - access token
    */
    UpdateSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorUserListWithoutDistributorURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users';
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters['organizationId'] !== undefined) {
            queryParameters['organizationId'] = parameters['organizationId'];
        }
        if (parameters['archived'] !== undefined) {
            queryParameters['archived'] = parameters['archived'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets all sponsor users.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#GetSponsorUserListWithoutDistributor
         * @param {string} sponsorId - The sponsor identifier.
         * @param {array} organizationId - The organization identifier array.
         * @param {boolean} archived - The optional archive flag.
         * @param {string} authorization - access token
    */
    GetSponsorUserListWithoutDistributor(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['organizationId'] !== undefined) {
                queryParameters['organizationId'] = parameters['organizationId'];
            }
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['archived'] !== undefined) {
                queryParameters['archived'] = parameters['archived'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UnarchiveSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/unarchive';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that reverts an archived sponsor user to their previous state.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#UnarchiveSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    UnarchiveSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/unarchive';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateUserFullNameURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/fullname';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Update the user name information
     * @method
     * @name User#UpdateUserFullName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The name update model.
     * @param {string} authorization - access token
     */
    UpdateUserFullName(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/fullname';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateUserAddressURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/address';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Update the user address information
     * @method
     * @name User#UpdateUserAddress
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The address model.
     * @param {string} authorization - access token
     */
    UpdateUserAddress(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/address';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateUserTimeZoneURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timezone';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Update the user time zone
     * @method
     * @name User#UpdateUserTimeZone
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The time zone model.
     * @param {string} authorization - access token
     */
    UpdateUserTimeZone(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timezone';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AcceptUserInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}/acceptance';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that accepts an invitation for a user in the invited status.
     * @method
     * @name User#AcceptUserInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {} model - The binding model.
     */
    AcceptUserInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}/acceptance';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetUserInvitationsURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets a list of invited patients.
     * @method
     * @name User#GetUserInvitations
     * @param {string} distributorId - This distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetUserInvitations(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateUserInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a new user in the invited state.
     * @method
     * @name User#CreateUserInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    CreateUserInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteUserInvitationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that deletes an unaccepted user invitation.
     * @method
     * @name User#DeleteUserInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeleteUserInvitation(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ResendInvitationsByCodeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/coderesend';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method for resending invitation emails by invitation codes.
     * @method
     * @name User#ResendInvitationsByCode
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    ResendInvitationsByCode(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/coderesend';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ResendInvitationsByDateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/dateresend';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to resend invitation by a date range.
     * @method
     * @name User#ResendInvitationsByDate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    ResendInvitationsByDate(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/dateresend';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/user-internal.ts


/**
 *
 * @class UserInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class UserInternal extends api_defaultExport {
    AddRolesToDistributorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/roles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * The is a method that assigns roles to a distributor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#AddRolesToDistributorUser
         * @param {string} distributorId - The distributor id that owns the user.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - List of roles to assign.
         * @param {string} authorization - access token
    */
    AddRolesToDistributorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteRolesFromDistributorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/roles';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that removes a distributor user from roles.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#DeleteRolesFromDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - List of roles to remove.
         * @param {string} authorization - access token
    */
    DeleteRolesFromDistributorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AddRolesToSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that assigns roles to a user scoped to a specific sponsor.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#AddRolesToSponsorUser
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - Lists of roles to assign.
         * @param {string} authorization - access token
    */
    AddRolesToSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteRolesFromSponsorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes the roles from sponsor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#DeleteRolesFromSponsorUser
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - List of roles to delete.
         * @param {string} authorization - access token
    */
    DeleteRolesFromSponsorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangePasswordInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/users/{userId}/password';
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that changes the password for a user. This API relies
                    on the calling used being authorized in the system and knowing the existing password.
                    Higher privilege users may reset the password using this API without knowing the
                    existing password.
    * @method
    * @name UserInternal#ChangePasswordInternal
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - The model containing the current password as well as the new password.
         * @param {string} authorization - access token
    */
    ChangePasswordInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/users/{userId}/password';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UploadDistributorUserPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates a photo for the given user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#UploadDistributorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    UploadDistributorUserPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeleteDistributorUserPhotoURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/photo';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that deletes a photo for a distributor user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#DeleteDistributorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    DeleteDistributorUserPhoto(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}/photo';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a distributor user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#GetDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    GetDistributorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that updates information for a distributor user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#UpdateDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - The user update model.
         * @param {string} authorization - access token
    */
    UpdateDistributorUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetSponsorUserAsyncURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a sponsor user.
                    This method requires nurse level rights or higher.
    * @method
    * @name UserInternal#GetSponsorUserAsync
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    GetSponsorUserAsync(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/lib/video-call.ts


/**
 *
 * @class VideoCall
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class VideoCall extends api_defaultExport {
    CreateVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method for a caregiver to request a video call with a patient.
     * @method
     * @name VideoCall#CreateVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    CreateVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{roomId}', `${parameters['roomId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to get information about an existing video call.
     * @method
     * @name VideoCall#GetVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} roomId - The room identifier.
     * @param {string} authorization - access token
     */
    GetVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{roomId}', `${parameters['roomId']}`);
            if (parameters['roomId'] === undefined) {
                reject(new Error('Missing required  parameter: roomId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AcceptVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{roomId}', `${parameters['roomId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method for a patient to accept a video call.
     * @method
     * @name VideoCall#AcceptVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} roomId - The room identifier.
     * @param {string} authorization - access token
     */
    AcceptVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{roomId}', `${parameters['roomId']}`);
            if (parameters['roomId'] === undefined) {
                reject(new Error('Missing required  parameter: roomId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    EndVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{roomId}', `${parameters['roomId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to end a video call.
     * @method
     * @name VideoCall#EndVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} roomId - The room identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    EndVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{roomId}', `${parameters['roomId']}`);
            if (parameters['roomId'] === undefined) {
                reject(new Error('Missing required  parameter: roomId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}

// CONCATENATED MODULE: ./src/index.ts
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ApiClass", function() { return ApiClass; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Accounts", function() { return Accounts; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Audit", function() { return Audit; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Beacon", function() { return Beacon; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Branding", function() { return Branding; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CampaignMonitor", function() { return CampaignMonitor; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CareCenter", function() { return CareCenter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CareCenterInternal", function() { return CareCenterInternal; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CarePlans", function() { return CarePlans; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Categories", function() { return Categories; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChatBot", function() { return ChatBot; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ClientDataExport", function() { return ClientDataExport; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ConversationLists", function() { return ConversationLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ConversationParties", function() { return ConversationParties; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Conversations", function() { return Conversations; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Distributors", function() { return Distributors; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "IntegrationManagement", function() { return IntegrationManagement; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Invitations", function() { return Invitations; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Patient", function() { return Patient; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientIndex", function() { return PatientIndex; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientInternal", function() { return PatientInternal; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientInvitations", function() { return PatientInvitations; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientProfileDefinitions", function() { return PatientProfileDefinitions; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientProfiles", function() { return PatientProfiles; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientSchedules", function() { return PatientSchedules; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PatientSchedulesInternal", function() { return PatientSchedulesInternal; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Reports", function() { return Reports; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SharedCare", function() { return SharedCare; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SharedCareInternal", function() { return SharedCareInternal; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Sponsors", function() { return Sponsors; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SponsorWebHook", function() { return SponsorWebHook; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Surveys", function() { return Surveys; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Tasks", function() { return Tasks; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TaskScheduleItems", function() { return TaskScheduleItems; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TaskSchedules", function() { return TaskSchedules; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Time", function() { return Time; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TimeCard", function() { return TimeCard; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "User", function() { return User; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "UserInternal", function() { return UserInternal; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "VideoCall", function() { return VideoCall; });











































/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = __webpack_require__(4);
var RequestBase = __webpack_require__(5);
var isObject = __webpack_require__(0);
var ResponseBase = __webpack_require__(6);
var shouldRetry = __webpack_require__(8);

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
      status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str){
  var parse = request.parse[this.type];
  if(this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
        new_err.original = err;
        new_err.response = res;
        new_err.status = res.status;
      }
    } catch(e) {
      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options
    options = pass;
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    }
  }

  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));
    break;

    case 'auto':
      this.username = user;
      this.password = pass;
    break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
    break;
  }
  return this;
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  // console.log(this._retries, this._maxRetries)
  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  }
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn){
  var req = request('OPTIONS', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn){
  var req = request('DELETE', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = __webpack_require__(0);

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  return this;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {
  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
      self.end(function(err, res){
        if (err) innerReject(err); else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
}

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
}

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {

  // name should be either a string or an object.
  if (null === name ||  undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on){
  // This is browser-only functionality. Node side is no-op.
  if(on==undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function(){
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};


/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};


/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");}

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var utils = __webpack_require__(7);

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field){
    return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {


/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};

/***/ }),
/* 8 */
/***/ (function(module, exports) {

var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
module.exports = function shouldRetry(err, res) {
  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
  if (res && res.status && res.status >= 500) return true;
  // Superagent timeout
  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;
  if (err && 'crossDomain' in err) return true;
  return false;
};


/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map