{"version":3,"sources":["webpack:///webpack/bootstrap 1ed2d438115ec79a4b1c","webpack:///./node_modules/superagent/lib/is-object.js","webpack:///./src/lib/api.ts","webpack:///./src/lib/accounts.ts","webpack:///./src/lib/audit.ts","webpack:///./src/lib/beacon.ts","webpack:///./src/lib/branding.ts","webpack:///./src/lib/campaign-monitor.ts","webpack:///./src/lib/care-center.ts","webpack:///./src/lib/care-center-internal.ts","webpack:///./src/lib/care-plans.ts","webpack:///./src/lib/categories.ts","webpack:///./src/lib/chat-bot.ts","webpack:///./src/lib/client-data-export.ts","webpack:///./src/lib/conversation-lists.ts","webpack:///./src/lib/conversation-parties.ts","webpack:///./src/lib/conversations.ts","webpack:///./src/lib/distributors.ts","webpack:///./src/lib/integration-management.ts","webpack:///./src/lib/invitations.ts","webpack:///./src/lib/patient.ts","webpack:///./src/lib/patient-index.ts","webpack:///./src/lib/patient-internal.ts","webpack:///./src/lib/patient-invitations.ts","webpack:///./src/lib/patient-profile-definitions.ts","webpack:///./src/lib/patient-profiles.ts","webpack:///./src/lib/patient-schedules.ts","webpack:///./src/lib/patient-schedules-internal.ts","webpack:///./src/lib/reports.ts","webpack:///./src/lib/shared-care.ts","webpack:///./src/lib/shared-care-internal.ts","webpack:///./src/lib/sponsors.ts","webpack:///./src/lib/sponsor-web-hook.ts","webpack:///./src/lib/surveys.ts","webpack:///./src/lib/tasks.ts","webpack:///./src/lib/task-schedule-items.ts","webpack:///./src/lib/task-schedules.ts","webpack:///./src/lib/time.ts","webpack:///./src/lib/time-card.ts","webpack:///./src/lib/user.ts","webpack:///./src/lib/user-internal.ts","webpack:///./src/lib/video-call.ts","webpack:///./src/index.ts","webpack:///./node_modules/superagent/lib/client.js","webpack:///./node_modules/component-emitter/index.js","webpack:///./node_modules/superagent/lib/request-base.js","webpack:///./node_modules/superagent/lib/response-base.js","webpack:///./node_modules/superagent/lib/utils.js","webpack:///./node_modules/superagent/lib/should-retry.js"],"names":[],"mappings":"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CA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC,iBAAiB,sCAAsC;;AAEvD;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;;AAEd,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa,iBAAiB;AAC/C;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,0BAA0B,aAAa,iBAAiB;AACxD;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA,WAAW,cAAc;AACzB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mBAAmB;AAC3F;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,cAAc;AACzB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,sBAAsB,WAAW,YAAY;;AAEtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACx4BA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;;;;;;AClKA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc,QAAQ;AACjC,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAoD;AACpE;AACA;AACA,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,sCAAsC;AACjD,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;AC1mBA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnIA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA,GAAG,IAAI;AACP;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,GAAG,IAAI;AACP;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1ed2d438115ec79a4b1c","/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/superagent/lib/is-object.js\n// module id = 0\n// module chunks = 0","import {\n    SuperAgentStatic\n} from \"superagent\";\nimport * as request from \"superagent\";\n\nvar anyRequest: any = request;\n\nexport type CallbackHandler = (err: any, res ? : request.Response) => void;\nexport type PasswordResetViewModel = {\n    'Email': string\n\n};\nexport type ResetPasswordByCodeBindingModel = {\n    'Email': string\n\n    'Password': string\n\n    'Code': string\n\n};\nexport type AuditEntityViewModel = {\n    'AggregateId': string\n\n    'AggregateType': string\n\n    'Uri': string\n\n    'UserName': string\n\n    'HttpMethod': string\n\n    'RecordedTime': string\n\n};\nexport type RecordBeaconBindingModel = {\n    'BeaconType': \"Login\" | \"SessionStarted\" | \"InvitationOpened\" | \"SessionFinished\"\n\n};\nexport type RecordInvitationBeaconBindingModel = {\n    'BeaconType': \"Login\" | \"SessionStarted\" | \"InvitationOpened\" | \"SessionFinished\"\n\n    'InvitationCode': string\n\n};\nexport type BrandingViewModel = {\n    'Logo': ImageReadModel\n\n    'EmailLogo': ImageReadModel\n\n    'PrimaryColor': string\n\n    'SecondaryColor': string\n\n    'TertiaryColor': string\n\n    'GooglePlayStoreUrl': string\n\n    'AppleAppStoreUrl': string\n\n    'DistributorName': string\n\n    'SponsorName': string\n\n};\nexport type ImageReadModel = {\n    'Name': string\n\n    'Description': string\n\n    'WebImageUrl': string\n\n    'MobileImageUrl': string\n\n    'ThumbNailUrl': string\n\n    'Id': string\n\n};\nexport type CampaignMonitorSmartEmailListing = {\n    'Id': string\n\n    'Name': string\n\n};\nexport type SubscriberListDetail = {\n    'Id': string\n\n    'Name': string\n\n};\nexport type CareCenterContentCreateBindingModel = {\n    'Title': string\n\n    'Content': string\n\n    'ContentType': \"Html\" | \"Url\" | \"Converted\"\n\n    'CategoryIds': Array < string >\n        | string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'RequiresAuthentication': boolean\n\n    'SortOrder': number\n\n};\nexport type IdViewModel = {\n    'Id': string\n\n};\nexport type CareCenterContentViewModel = {\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n    'OwningAggregateId': string\n\n    'SponsorId': string\n\n    'ContentId': string\n\n    'Title': string\n\n    'Content': string\n\n    'ContentStreamId': string\n\n    'ContentType': \"Html\" | \"Url\" | \"Converted\"\n\n    'CategoryIds': Array < string >\n        | string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'ImageUrl': string\n\n    'RequiresAuthentication': boolean\n\n    'LastModified': string\n\n    'Uri': string\n\n    'SortOrder': number\n\n};\nexport type CareCenterContentUpdateBindingModel = {\n    'Title': string\n\n    'Content': string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'RequiresAuthentication': boolean\n\n    'SortOrder': number\n\n};\nexport type CareTeamMemberViewModel = {\n    'Biography': string\n\n    'FirstName': string\n\n    'HomePhone': string\n\n    'Id': string\n\n    'LastName': string\n\n    'UserPhoto': ImageReadModel\n\n    'Uri': string\n\n};\nexport type CareCenterContentUploadBindingModel = {\n    'Title': string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'RequiresAuthentication': boolean\n\n    'SortOrder': number\n\n    'ContentStream': Stream\n\n};\nexport type Stream = {\n    '__identity': {}\n\n};\nexport type SectionReadModel = {\n    'Id': string\n\n    'ImageName': string\n\n    'ImageUrl': string\n\n    'Nodes': Array < NodeReadModel >\n        | NodeReadModel\n\n    'Sections': Array < SectionReadModel >\n        | SectionReadModel\n\n    'Title': string\n\n};\nexport type NodeReadModel = {\n    'Id': string\n\n    'Title': string\n\n    'ImageName': string\n\n    'ImageUri': string\n\n    'Uri': string\n\n    'Sections': Array < SectionReadModel >\n        | SectionReadModel\n\n    'RequiresAuthorization': boolean\n\n};\nexport type IdListBindingModel = {\n    'Ids': Array < string >\n        | string\n\n};\nexport type ValueBindingModel = {\n    'Value': string\n\n};\nexport type CloneCarePlanBindingModel = {\n    'NewCarePlanName': string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'NewSponsorCarePlanId': string\n\n};\nexport type CarePlanViewModel = {\n    'Schedules': Array < TaskScheduleViewModel >\n        | TaskScheduleViewModel\n\n    'SponsorCarePlanId': string\n\n    'SupervisorApprovalSignatureUri': string\n\n    'SupervisorApprovalSignatureTs': string\n\n    'HasUnapprovedChanges': boolean\n\n    'Id': string\n\n    'Name': string\n\n    'Categories': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'OwnerId': string\n\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n};\nexport type TaskScheduleViewModel = {\n    'AssignedSurvey': AssignedSurveyReadModel\n\n    'AssignedTask': TaskViewModel\n\n    'AssignedTaskClass': \"Standard\" | \"Survey\"\n\n    'HasHadTreatmentTaskScheduleItems': boolean\n\n    'HasHadWeeklyTaskScheduleItems': boolean\n\n    'HashHadUntilCompleteTaskScheduleItems': boolean\n\n    'Id': string\n\n    'Note': string\n\n    'TaskId': string\n\n    'Target': number\n\n    'RolesAllowedToRecordOutcome': Array < string >\n        | string\n\n    'IsDeactivated': boolean\n\n    'ActivationChangeTime': string\n\n    'TreatmentScheduleItems': Array < TreatmentTaskScheduleItemViewModel >\n        | TreatmentTaskScheduleItemViewModel\n\n    'UntilCompleteTaskScheduleItems': Array < UntilCompleteTaskScheduleItemViewModel >\n        | UntilCompleteTaskScheduleItemViewModel\n\n    'WeeklyScheduleItems': Array < WeeklyTaskScheduleItemViewModel >\n        | WeeklyTaskScheduleItemViewModel\n\n};\nexport type CategoryViewModel = {\n    'Name': string\n\n    'Id': string\n\n};\nexport type AssignedSurveyReadModel = {\n    'SurveyId': string\n\n    'SurveyName': string\n\n};\nexport type TaskViewModel = {\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n    'OwningAggregateId': string\n\n    'Cost': number\n\n    'Deactivated': boolean\n\n    'Duration': number\n\n    'GoalNumber': number\n\n    'PatientAssignable': boolean\n\n    'Id': string\n\n    'MeasurementDomain': Array < string >\n        | string\n\n    'MeasurementType': \"Boolean\" | \"String\" | \"Date\" | \"DateTime\" | \"MultipleChoiceSingle\" | \"MultipleChoiceMultiple\" | \"Numeric\" | \"NumericWithGoal\" | \"Appointment\" | \"Checklist\" | \"Signature\" | \"Interval\" | \"Photo\"\n\n    'MeasurementUnits': string\n\n    'Name': string\n\n    'SponsorTaskId': string\n\n    'Tags': Array < string >\n        | string\n\n    'TaskContentUri': string\n\n    'TaskContentUriRequiresAuthentication': boolean\n\n    'TaskDescription': string\n\n    'Codes': Array < MedicalCode >\n        | MedicalCode\n\n};\nexport type TreatmentTaskScheduleItemViewModel = {\n    'Id': string\n\n    'DaysRelativeToNextTreatment': number\n\n    'ScheduledTime': string\n\n    'ScheduledTimePeriod': string\n\n};\nexport type UntilCompleteTaskScheduleItemViewModel = {\n    'Id': string\n\n    'Expires': IExpirationType\n\n    'ExpirationType': string\n\n    'Starts': IStartType\n\n    'StartType': string\n\n    'Repeats': Repetition\n\n    'ScheduledTime': string\n\n    'ScheduledTimePeriod': string\n\n};\nexport type WeeklyTaskScheduleItemViewModel = {\n    'Id': string\n\n    'DayOfWeek': \"None\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"\n\n    'StartType': \"OnScheduleStart\" | \"OnInitialTreatment\"\n\n    'StopType': \"NoStop\" | \"OnInitialTreatment\"\n\n    'ScheduledTime': string\n\n    'ScheduledTimePeriod': string\n\n};\nexport type MedicalCode = {\n    'System': \"Loinc\" | \"Snomed\"\n\n    'Code': string\n\n};\nexport type IExpirationType = {};\nexport type IStartType = {};\nexport type Repetition = {\n    'Period': \"Once\" | \"Year\" | \"Month\" | \"Week\" | \"Day\"\n\n    'Interval': number\n\n};\nexport type CarePlanBindingModel = {\n    'Name': string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'SponsorCarePlanId': string\n\n};\nexport type SponsorCarePlanReadModel = {\n    'AssignedPatientCount': number\n\n    'SponsorCarePlanId': string\n\n    'Id': string\n\n    'Name': string\n\n    'Categories': Array < CategoryReadModel >\n        | CategoryReadModel\n\n};\nexport type CategoryReadModel = {\n    'Name': string\n\n    'Id': string\n\n};\nexport type CreateCarePlanBindingModel = {\n    'Name': string\n\n    'CategoryIds': Array < string >\n        | string\n\n};\nexport type DistributorCarePlanReadModel = {\n    'Id': string\n\n    'Name': string\n\n    'Categories': Array < CategoryReadModel >\n        | CategoryReadModel\n\n};\nexport type NameBindingModel = {\n    'Name': string\n\n};\nexport type SignatureBindingModel = {\n    'SignatureImageDataUri': string\n\n};\nexport type CategoryBindingModel = {\n    'Name': string\n\n};\nexport type IdNameModel = {\n    'Id': string\n\n    'Name': string\n\n};\nexport type ChatBotContextViewModel = {\n    'OwningAggregateId': string\n\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n    'Id': string\n\n    'ContextItems': Array < ChatBotContextItemViewModel >\n        | ChatBotContextItemViewModel\n\n};\nexport type ChatBotContextItemViewModel = {\n    'Id': string\n\n    'Keywords': Array < string >\n        | string\n\n    'Response': string\n\n    'LastModifiedBy': ActorReadModel\n\n    'LastModifiedAt': string\n\n};\nexport type ActorReadModel = {\n    'OrganizationName': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'ActorType': \"Patient\" | \"User\" | \"Organization\"\n\n    'Photo': ImageReadModel\n\n    'SponsorIds': Array < string >\n        | string\n\n    'SponsorEntityIds': {}\n\n    'Roles': Array < string >\n        | string\n\n    'Id': string\n\n    'Name': NameReadModel\n\n};\nexport type NameReadModel = {\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n};\nexport type ChatBotCreateBindingModel = {\n    'FirstName': string\n\n    'LastName': string\n\n    'TimeZoneId': string\n\n};\nexport type ChatBotContextCreateBindingModel = {\n    'ContextItems': Array < ChatBotContextItemBindingModel >\n        | ChatBotContextItemBindingModel\n\n};\nexport type ChatBotContextItemBindingModel = {\n    'Keywords': Array < string >\n        | string\n\n    'Response': string\n\n};\nexport type ChatBotResponseFeedbackBindingModel = {\n    'Feedback': \"Positive\" | \"Negative\"\n\n    'MessageId': string\n\n    'ConversationId': string\n\n};\nexport type ExportCreatedViewModel = {\n    'RunId': string\n\n    'FileName': string\n\n};\nexport type CreatePatientTaskDataExtractBindingModel = {\n    'FromDate': string\n\n    'ToDate': string\n\n};\nexport type PatientTaskCompletionOutboundModel = {\n    'AssignedDate': string\n\n    'PatientLastName': string\n\n    'PatientFirstName': string\n\n    'PatientSponsorId': string\n\n    'PatientIsDeactivated': boolean\n\n    'CompletionStatus': string\n\n    'CompletionDate': string\n\n    'CompletionResult': string\n\n    'CompletedByFirstName': string\n\n    'CompletedByLastName': string\n\n    'MeasurementUnits': string\n\n    'MeasurementType': string\n\n};\nexport type UserInformationOutboundModel = {\n    'SponsorUserId': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'EmailAddress': string\n\n    'Organization': string\n\n    'Role': string\n\n    'UserId': string\n\n};\nexport type ConversationListItemViewModel = {\n    'CountOfMessages': number\n\n    'LastMessage': MessageReadModel\n\n    'LastMessageSentDateTime': string\n\n    'OtherPartyId': string\n\n    'Tags': Array < string >\n        | string\n\n    'Unread': boolean\n\n};\nexport type MessageReadModel = {\n    'MessageId': string\n\n    'Message': string\n\n    'SentDateTime': string\n\n    'SenderId': string\n\n    'SenderAgentId': string\n\n    'Attachments': Array < MessageAttachment >\n        | MessageAttachment\n\n    'MessageMetaDataType': \"None\" | \"VideoCallEnd\" | \"ChatBotResponse\"\n\n    'MetaData': {}\n\n};\nexport type MessageAttachment = {\n    'Uri': string\n\n    'MimeType': string\n\n};\nexport type ConversationsMetaData = {\n    'UnreadConversationsCount': number\n\n    'OrganizationsWithUnreadConversationsCount': number\n\n    'OrganizationUnreadCounts': {}\n\n};\nexport type ConversationListViewModel = {\n    'Parties': Array < ActorReadModel >\n        | ActorReadModel\n\n    'Conversations': Array < ConversationListItemViewModel >\n        | ConversationListItemViewModel\n\n    'CountOfTotalConversations': number\n\n    'CountOfNextConversations': number\n\n    'CountOfPreviousConversations': number\n\n    'CountOfUnreadConversations': number\n\n};\nexport type PartyListViewModel = {\n    'Parties': Array < ActorReadModel >\n        | ActorReadModel\n\n};\nexport type ConversationViewModel = {\n    'Id': string\n\n    'LastMessageSentDateTime': string\n\n    'MessageParticipantId': string\n\n    'OtherPartyId': string\n\n    'Parties': Array < ActorReadModel >\n        | ActorReadModel\n\n    'Unread': boolean\n\n    'Messages': Array < MessageReadModel >\n        | MessageReadModel\n\n    'Tags': Array < string >\n        | string\n\n    'CountOfMessages': number\n\n    'CountOfPreviousMessages': number\n\n    'CountOfNextMessages': number\n\n    'RecipientLastReadDateTime': string\n\n    'RecipientHasRead': boolean\n\n};\nexport type MessageCreateBindingModel = {\n    'Message': string\n\n    'Attachments': Array < UploadFile >\n        | UploadFile\n\n};\nexport type UploadFile = {\n    'Stream': Stream\n\n    'MimeType': string\n\n    'FileName': string\n\n};\nexport type NewMessageReturnViewModel = {\n    'MessageId': string\n\n    'Message': string\n\n    'SentDateTime': string\n\n    'Attachments': Array < MessageAttachment >\n        | MessageAttachment\n\n};\nexport type ConversationUpdateBindingModel = {\n    'Tags': Array < string >\n        | string\n\n    'Unread': boolean\n\n    'UpdateIfLastMessageId': string\n\n};\nexport type DistributorSettingsBindingModel = {\n    'Settings': {}\n\n};\nexport type AuthorizationCodeBindingModel = {\n    'Code': string\n\n    'SponsorId': string\n\n};\nexport type DistributorBindingModel = {\n    'Id': string\n\n    'Name': string\n\n};\nexport type SponsorBindingModel = {\n    'Name': string\n\n};\nexport type SponsorIdentityReadModel = {\n    'SponsorName': string\n\n    'SponsorId': string\n\n};\nexport type BrandingBindingModel = {\n    'PrimaryColor': string\n\n    'SecondaryColor': string\n\n    'TertiaryColor': string\n\n};\nexport type DistributorViewModel = {\n    'Id': string\n\n    'Name': string\n\n    'AuthorizationCodes': {}\n\n    'Branding': BrandingViewModel\n\n    'BrandingEmailLogoUrl': string\n\n    'BrandingLogoUrl': string\n\n    'Categories': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'DistributorTasks': Array < TaskViewModel >\n        | TaskViewModel\n\n    'PatientProfileDefinitions': {}\n\n    'Settings': DistributorSettings\n\n    'Sponsors': Array < SponsorIdentityReadModel >\n        | SponsorIdentityReadModel\n\n    'TaskTags': Array < string >\n        | string\n\n    'CarePlans': Array < DistributorCarePlanViewModel >\n        | DistributorCarePlanViewModel\n\n    'ArchivedCarePlans': Array < DistributorCarePlanViewModel >\n        | DistributorCarePlanViewModel\n\n    'ChatBotContextId': string\n\n    'ScheduledTaskTimePeriods': {}\n\n    'ChatBotId': string\n\n};\nexport type DistributorSettings = {\n    'AppleAppStoreUrl': string\n\n    'GooglePlayStoreUrl': string\n\n    'ActivationEmailTemplate': string\n\n    'WelcomeEmailTemplate': string\n\n    'ReminderEmailTemplate': string\n\n    'BroadcastedMessageEmailTemplate': string\n\n    'ResetPasswordEmailTemplate': string\n\n    'ShareCareEmailTemplate': string\n\n    'CareTeamWelcomeEmailTemplate': string\n\n    'CareTeamAlertsEmailTemplate': string\n\n    'CareTeamActivationEmailTemplate': string\n\n    'TwilioFromNumber': string\n\n    'UnreadMessagesEmailTemplate': string\n\n};\nexport type DistributorCarePlanViewModel = {\n    'Schedules': Array < TaskScheduleViewModel >\n        | TaskScheduleViewModel\n\n    'Id': string\n\n    'Name': string\n\n    'Categories': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'OwnerId': string\n\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n};\nexport type ExportFileRecordBindingModel = {\n    'FileName': string\n\n    'ServerDirectory': string\n\n    'ExportType': \"PatientCarePlan\" | \"PatientTaskData\" | \"PatientSurvey\" | \"UserInformation\"\n\n    'RelativeStartDay': number\n\n    'RelativeEndDay': number\n\n    'TimeZoneId': string\n\n};\nexport type ImportFileRecordBindingModel = {\n    'FileName': string\n\n    'ServerDirectory': string\n\n    'MoveToDirectory': string\n\n    'AggregateType': \"Organization\" | \"Patient\" | \"User\" | \"AddPatientAssignments\" | \"PatientProfileDefinition\" | \"AddCarePlanAssignments\"\n\n    'ClientLoadClassType': string\n\n    'ClientLoadMapClassType': string\n\n    'StepInformation': string\n\n    'NextSteps': Array < SubsequentStepInformation >\n        | SubsequentStepInformation\n\n    'Delimiter': string\n\n};\nexport type SubsequentStepInformation = {\n    'AggregateType': \"Organization\" | \"Patient\" | \"User\" | \"AddPatientAssignments\" | \"PatientProfileDefinition\" | \"AddCarePlanAssignments\"\n\n    'StepInformation': string\n\n};\nexport type IntegrationManagementModel = {\n    'ImportServerCredential': SftpServerCredential\n\n    'AggregateId': string\n\n    'SponsorId': string\n\n    'ImportSet': Array < ImportFileRecord >\n        | ImportFileRecord\n\n    'ExportSet': Array < ExportFileRecord >\n        | ExportFileRecord\n\n};\nexport type SftpServerCredential = {\n    'ServerIp': string\n\n    'ServerPort': number\n\n    'ServerUserName': string\n\n    'ServerPassword': string\n\n};\nexport type ImportFileRecord = {\n    'FileName': string\n\n    'ServerDirectory': string\n\n    'MoveToDirectory': string\n\n    'ClientLoadClassType': string\n\n    'ClientLoadMapClassType': string\n\n    'StepInformation': string\n\n    'AggregateType': \"Organization\" | \"Patient\" | \"User\" | \"AddPatientAssignments\" | \"PatientProfileDefinition\" | \"AddCarePlanAssignments\"\n\n    'NextSteps': Array < SubsequentStepInformation >\n        | SubsequentStepInformation\n\n    'Delimiter': string\n\n};\nexport type ExportFileRecord = {\n    'FileName': string\n\n    'ServerDirectory': string\n\n    'ExportType': \"PatientCarePlan\" | \"PatientTaskData\" | \"PatientSurvey\" | \"UserInformation\"\n\n    'RelativeStartDay': number\n\n    'RelativeEndDay': number\n\n    'TimeZoneId': string\n\n};\nexport type IntegrationManagementCredentialBindingModel = {\n    'ImportServerIp': string\n\n    'ImportServerPassword': string\n\n    'ImportServerPort': number\n\n    'ImportServerUserName': string\n\n};\nexport type InvitationViewModel = {\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'OrganizationIds': Array < string >\n        | string\n\n    'SponsorEntityId': string\n\n    'InvitationCode': string\n\n    'RequiresTwoFactorActivation': boolean\n\n    'LastFourHomePhone': string\n\n    'LastFourMobilePhone': string\n\n    'RoleType': \"Distributor\" | \"Sponsor\" | \"Patient\" | \"Unknown\"\n\n    'BirthDate': string\n\n    'Sex': string\n\n};\nexport type GenerateActivationCodeBindingModel = {\n    'ChannelType': \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n    'ReceiverType': \"MobilePhone\" | \"HomePhone\"\n\n};\nexport type ActivatePatientDobSponsorPatientIdBindingModel = {\n    'SponsorPatientId': string\n\n    'DateOfBirth': string\n\n    'EmailAddress': string\n\n    'Password': string\n\n};\nexport type SponsorIdListBindingModel = {\n    'Ids': Array < string >\n        | string\n\n};\nexport type CloneCarePlanToPatientBindingModel = {\n    'SponsorId': string\n\n    'CloneCarePlanId': string\n\n    'RemoveCarePlanIds': Array < string >\n        | string\n\n};\nexport type IdBindingModel = {\n    'Id': string\n\n};\nexport type PatientBroadcastModel = {\n    'PatientIds': Array < string >\n        | string\n\n    'Mobile': boolean\n\n    'Email': boolean\n\n    'ChatBot': boolean\n\n    'Message': string\n\n};\nexport type BroadcastToPatientsBuilderModel = {\n    'ShortCodes': Array < BroadcastToPatientsShortCodesModel >\n        | BroadcastToPatientsShortCodesModel\n\n};\nexport type BroadcastToPatientsShortCodesModel = {\n    'Code': string\n\n    'Description': string\n\n};\nexport type SponsorEntityIdBulkPatientUpdateBindingModel = {\n    'PatientIds': Array < string >\n        | string\n\n    'CarePlanIdsToAdd': Array < string >\n        | string\n\n    'CarePlanIdsToRemove': Array < string >\n        | string\n\n    'CategoryIdsToAdd': Array < string >\n        | string\n\n    'CategoryIdsToRemove': Array < string >\n        | string\n\n    'OrganizationId': string\n\n};\nexport type ChangePasswordBindingModel = {\n    'CurrentPassword': string\n\n    'NewPassword': string\n\n};\nexport type PatientChangeRoleBindingModel = {\n    'RoleToAdd': string\n\n    'RoleToRemove': string\n\n};\nexport type PatientSettingsBindingModel = {\n    'SendEmailReminders': boolean\n\n    'ShowHealthDataInNotifications': boolean\n\n    'NewMessageNotification': Array < \"Email\" | \"Push\" >\n        | \"Email\" | \"Push\"\n\n};\nexport type PatientCreateBindingModel = {\n    'Address1': string\n\n    'Address2': string\n\n    'AppointmentDateTime': string\n\n    'AuthCode': string\n\n    'BirthDate': string\n\n    'CarePlanId': string\n\n    'CategoryId': string\n\n    'City': string\n\n    'Country': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'HomePhone': string\n\n    'MobilePhone': string\n\n    'OrganizationId': string\n\n    'Password': string\n\n    'PostalCode': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'UserName': string\n\n};\nexport type PatientCreatedViewModel = {\n    'Id': string\n\n    'UserName': string\n\n};\nexport type SponsorPatientListViewModel = {\n    'SponsorId': string\n\n    'Patients': {}\n\n};\nexport type PatientListItemViewModel = {\n    'MobilePhone': string\n\n    'HomePhone': string\n\n    'Roles': Array < string >\n        | string\n\n    'CategoryAssociations': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'Categories': Array < string >\n        | string\n\n    'SponsorName': string\n\n    'ActivatedStatusTime': string\n\n    'LastScheduleUpdateTime': string\n\n    'LastMeasurementDateTime': string\n\n    'AlertCount': number\n\n    'LastAlertClearedDateTime': string\n\n    'NextAppointmentDateTime': string\n\n    'Appointments': Array < string >\n        | string\n\n    'LastLoginDateTime': string\n\n    'LoginPlatforms': {\n        'Ios': string\n\n        'Android': string\n\n        'Dashboard': string\n\n        'Unknown': string\n\n        'Other': string\n\n        'DashboardMobile': string\n\n    }\n\n    'PushChannelConfirmationDates': {\n        'Ios': string\n\n        'Android': string\n\n        'Dashboard': string\n\n        'Unknown': string\n\n        'Other': string\n\n        'DashboardMobile': string\n\n    }\n\n    'Address1': string\n\n    'Address2': string\n\n    'City': string\n\n    'State': string\n\n    'PostalCode': string\n\n    'Country': string\n\n    'CarePlanId': string\n\n    'CarePlanIsPersonal': boolean\n\n    'CarePlanIsPatientPlan': boolean\n\n    'CarePlanName': string\n\n    'CategoryId': string\n\n    'CategoryName': string\n\n    'IsActivated': boolean\n\n    'CarePlans': Array < string >\n        | string\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type PatientCarePlanAssocationViewModel = {\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'ManagementType': \"Population\" | \"Personal\" | \"Patient\"\n\n    'CarePlanId': string\n\n    'CarePlanName': string\n\n};\nexport type ImageViewModel = {\n    'Name': string\n\n    'Description': string\n\n    'WebImageUrl': string\n\n    'MobileImageUrl': string\n\n    'ThumbNailUrl': string\n\n    'Id': string\n\n};\nexport type AddPersonalCarePlanBindingModel = {\n    'CategoryIds': Array < string >\n        | string\n\n    'Name': string\n\n};\nexport type PatientViewModel = {\n    'ActivatedStatusTime': string\n\n    'Address1': string\n\n    'Address2': string\n\n    'AlertCount': number\n\n    'AppointmentDateTime': string\n\n    'Appointments': Array < string >\n        | string\n\n    'BirthDate': string\n\n    'CarePlans': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'Categories': Array < string >\n        | string\n\n    'CarePlanId': string\n\n    'CarePlanName': string\n\n    'CarePlanInceptionDates': {}\n\n    'CarePlanIsPersonal': boolean\n\n    'CategoryId': string\n\n    'CategoryName': string\n\n    'City': string\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'HomePhone': string\n\n    'Id': string\n\n    'IsActivated': boolean\n\n    'IncomingSharedCareInvitations': Array < SharedCareInvitationViewModel >\n        | SharedCareInvitationViewModel\n\n    'LastAlertClearedDateTime': string\n\n    'LastLoginDateTime': string\n\n    'LastName': string\n\n    'LastScheduleUpdateTime': string\n\n    'LoginPlatforms': {\n        'Ios': string\n\n        'Android': string\n\n        'Dashboard': string\n\n        'Unknown': string\n\n        'Other': string\n\n        'DashboardMobile': string\n\n    }\n\n    'MobilePhone': string\n\n    'Name': NameReadModel\n\n    'NextAppointmentDateTime': string\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'PatientPhoto': ImageReadModel\n\n    'PostalCode': string\n\n    'PushChannelConfirmationDates': {\n        'Ios': string\n\n        'Android': string\n\n        'Dashboard': string\n\n        'Unknown': string\n\n        'Other': string\n\n        'DashboardMobile': string\n\n    }\n\n    'Roles': Array < string >\n        | string\n\n    'Sex': string\n\n    'Sponsor': SponsorViewModel\n\n    'SponsorId': string\n\n    'SponsorName': string\n\n    'SponsorPatientId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'UserName': string\n\n    'Settings': PatientSettings\n\n    'OutgoingSharedCare': Array < SharedCarePatientViewModel >\n        | SharedCarePatientViewModel\n\n    'IncomingSharedCare': Array < SharedCarePatientViewModel >\n        | SharedCarePatientViewModel\n\n    'OutgoingSharedCareInvitations': Array < OutgoingSharedCareInvitationReadModel >\n        | OutgoingSharedCareInvitationReadModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type SharedCareInvitationViewModel = {\n    'Accepted': boolean\n\n    'AcceptedTime': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'InvitingPatient': SharedCarePatientViewModel\n\n    'InvitationCode': string\n\n    'IsExistingPatient': boolean\n\n    'Permission': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n    'ReceivingPatientId': string\n\n    'Relationship': string\n\n    'SentTime': string\n\n    'Branding': BrandingViewModel\n\n};\nexport type SponsorViewModel = {\n    'Branding': BrandingViewModel\n\n    'DistributorCarePlans': Array < SponsorCarePlanViewModel >\n        | SponsorCarePlanViewModel\n\n    'CarePlans': Array < SponsorCarePlanViewModel >\n        | SponsorCarePlanViewModel\n\n    'DistributorCategories': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'Categories': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'DistributorId': string\n\n    'DistributorTasks': Array < TaskViewModel >\n        | TaskViewModel\n\n    'Id': string\n\n    'Name': string\n\n    'Organizations': Array < OrganizationViewModel >\n        | OrganizationViewModel\n\n    'PatientCount': number\n\n    'PatientProfileDefinitionIds': Array < string >\n        | string\n\n    'ScheduledTaskTimePeriods': Array < string >\n        | string\n\n    'Settings': SponsorSettings\n\n    'SponsorTasks': Array < TaskViewModel >\n        | TaskViewModel\n\n    'TaskAlerts': Array < TaskAlert >\n        | TaskAlert\n\n    'TaskTags': Array < string >\n        | string\n\n    'DistributorTaskTags': Array < string >\n        | string\n\n    'SponsorTaskTags': Array < string >\n        | string\n\n    'UserCount': number\n\n    'WebHooks': Array < WebHookViewModel >\n        | WebHookViewModel\n\n    'ChatBotContextId': string\n\n};\nexport type PatientSettings = {\n    'SendEmailReminders': boolean\n\n    'ShowHealthDataInNotifications': boolean\n\n    'NewDirectMessageNotification': Array < \"Email\" | \"Push\" >\n        | \"Email\" | \"Push\"\n\n};\nexport type SharedCarePatientViewModel = {\n    'Id': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'PatientPhoto': ImageReadModel\n\n    'Permission': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n    'Relationship': string\n\n};\nexport type OutgoingSharedCareInvitationReadModel = {\n    'AcceptedInstant': string\n\n    'Accepted': boolean\n\n    'EmailAddress': string\n\n    'InvitationCode': string\n\n    'EmailAddressAcceptedWith': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'Permission': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n    'ReceivingPatientId': string\n\n    'Relationship': \"Spouse\" | \"SignificantOther\" | \"Grandparent\" | \"Grandchild\" | \"Mother\" | \"Father\" | \"Child\" | \"Employee\" | \"Coworker\" | \"Other\"\n\n};\nexport type SponsorCarePlanViewModel = {\n    'Id': string\n\n    'Name': string\n\n    'SponsorCarePlanId': string\n\n    'AssignedPatientCount': number\n\n    'Categories': Array < CategoryViewModel >\n        | CategoryViewModel\n\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n    'OwnerId': string\n\n};\nexport type OrganizationViewModel = {\n    'BusinessAddress': Address\n\n    'CareTeam': Array < UserViewModel >\n        | UserViewModel\n\n    'Contact': DigitalContactInformation\n\n    'Description': string\n\n    'Id': string\n\n    'Name': string\n\n    'SponsorOrganizationId': string\n\n    'OrganizationPhoto': ImageReadModel\n\n    'Settings': OrganizationSettings\n\n    'PatientCount': number\n\n    'TelephoneNumbers': {\n        'Business': TelephoneNumber\n\n        'Mobile': TelephoneNumber\n\n        'Personal': TelephoneNumber\n\n    }\n\n    'UserCount': number\n\n    'Branding': BrandingViewModel\n\n    'Uri': string\n\n};\nexport type SponsorSettings = {\n    'AppleAppStoreUrl': string\n\n    'DisableAppointmentsUI': boolean\n\n    'EmailFromLabel': \"Default\" | \"SponsorName\" | \"OrganizationName\"\n\n    'GooglePlayStoreUrl': string\n\n    'HideCareTeam': boolean\n\n    'MaskSponsorPatientId': boolean\n\n    'MessagingEnabled': boolean\n\n    'SendTaskCountEmailReminders': boolean\n\n    'SendTaskCountPushReminders': boolean\n\n    'UserTimeCardEnabled': boolean\n\n    'UserTimeCardRequiresPatientSignature': boolean\n\n    'ActivationEmailTemplate': string\n\n    'WelcomeEmailTemplate': string\n\n    'ReminderEmailTemplate': string\n\n    'BroadcastedMessageEmailTemplate': string\n\n    'ResetPasswordEmailTemplate': string\n\n    'ShareCareEmailTemplate': string\n\n    'CareTeamWelcomeEmailTemplate': string\n\n    'CareTeamAlertsEmailTemplate': string\n\n    'CareTeamActivationEmailTemplate': string\n\n    'InvitationDripList': string\n\n    'CareTeamInvitationDripList': string\n\n    'ReengagementDripList': string\n\n    'AdminTrainingDripList': string\n\n    'PersonalCarePlansEnabled': boolean\n\n    'PatientCarePlansUIEnabled': boolean\n\n    'CareGiverReadReceiptsEnabled': boolean\n\n    'PatientCanViewReadReceiptsEnabled': boolean\n\n    'TwilioFromNumber': string\n\n    'PatientTwoFactorActivationRequired': boolean\n\n    'UserTwoFactorActivationRequired': boolean\n\n    'DistributorContentEnabled': boolean\n\n    'VideoCallingEnabled': boolean\n\n    'ChatBotEnabled': boolean\n\n    'UnreadMessagesEmailTemplate': string\n\n    'SecondsToSendUnreadMessageEmailReminders': number\n\n};\nexport type TaskAlert = {\n    'Id': string\n\n    'TaskId': string\n\n    'Notifications': Array < AlertNotificationRule >\n        | AlertNotificationRule\n\n    'Triggers': Array < AlertTrigger >\n        | AlertTrigger\n\n};\nexport type WebHookViewModel = {\n    'Id': string\n\n    'ExternalUri': string\n\n    'Verb': string\n\n    'EventName': \"SponsorPatientIdAppliedToPatient\" | \"PatientAddedToRepository\" | \"AlertSignaledForScheduledTask\" | \"MeasurementRecorded\" | \"MessageSent\" | \"MessageReceived\" | \"ConversationStatusSet\" | \"PatientCompletedSurvey\"\n\n    'PayloadType': \"PatientIo\" | \"Fhir\"\n\n};\nexport type Address = {\n    'CompanyName': string\n\n    'Address1': string\n\n    'Address2': string\n\n    'City': string\n\n    'State': string\n\n    'PostalCode': string\n\n    'Country': string\n\n};\nexport type UserViewModel = {\n    'Biography': string\n\n    'BirthDate': string\n\n    'Distributors': Array < string >\n        | string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'HomePhone': string\n\n    'Id': string\n\n    'LastName': string\n\n    'LastLoginDateTime': string\n\n    'LoginPlatforms': {\n        'Ios': string\n\n        'Android': string\n\n        'Dashboard': string\n\n        'Unknown': string\n\n        'Other': string\n\n        'DashboardMobile': string\n\n    }\n\n    'MobilePhone': string\n\n    'Name': NameReadModel\n\n    'Organizations': Array < string >\n        | string\n\n    'Roles': Array < string >\n        | string\n\n    'Sex': string\n\n    'Sponsors': Array < string >\n        | string\n\n    'SponsorUserId': string\n\n    'TimeZoneId': string\n\n    'UserAddress': Address\n\n    'UserPhoto': ImageReadModel\n\n    'Settings': UserSettings\n\n    'Archived': boolean\n\n    'Status': \"Invited\" | \"Activated\"\n\n    'InvitedByUserId': string\n\n    'InvitedByUserName': NameReadModel\n\n    'InvitedBySponsorUserId': string\n\n};\nexport type DigitalContactInformation = {\n    'EmailAddress': string\n\n    'WebsiteUrl': string\n\n    'Twitter': string\n\n};\nexport type OrganizationSettings = {\n    'MessagingEnabled': boolean\n\n};\nexport type TelephoneNumber = {\n    'CountryCode': string\n\n    'Number': string\n\n    'FormattedNumber': string\n\n};\nexport type AlertNotificationRule = {\n    'Channel': \"DashboardOnly\" | \"Email\" | \"Sms\"\n\n    'NotificationScope': \"CareTeam\" | \"Organization\" | \"SharedCare\"\n\n    'Timing': \"Immediate\" | \"Batched\"\n\n};\nexport type AlertTrigger = {\n    'RequiresScheduleHistory': boolean\n\n    'TriggerType': \"CompletedTask\" | \"SkippedTask\" | \"IgnoredTask\" | \"LeftNote\"\n\n    'TriggerOccurrencesThreshold': number\n\n    'OccurrenceRelatedness': \"Anytime\" | \"Consecutively\" | \"SinceLastAlert\"\n\n    'OutcomeRule': OutcomeTriggerRule\n\n};\nexport type UserSettings = {\n    'NotifyOfAlerts': boolean\n\n    'AllowableDirectMessaging': \"ByNone\" | \"ByInOrganization\"\n\n    'NewDirectMessageNotification': Array < \"Email\" | \"Push\" >\n        | \"Email\" | \"Push\"\n\n    'NewOrganizationMessageNotification': Array < \"Email\" | \"Push\" >\n        | \"Email\" | \"Push\"\n\n};\nexport type OutcomeTriggerRule = {\n    'ComparisonRuleType': \"None\" | \"StringComparison\" | \"NumericComparison\" | \"BloodPressure\"\n\n    'NumericRule': NumericComparisonRule\n\n    'StringRule': StringComparisonRule\n\n    'BloodPressureRule': BloodPressureRule\n\n};\nexport type NumericComparisonRule = {\n    'MeasurementCalculation': MeasurementCalculationRule\n\n    'OutcomeCalculation': \"CompareMeasurementOnly\" | \"PercentageDifference\" | \"NominalDifference\"\n\n    'MeasurementComparison': MeasurementComparisonRule\n\n    'RequiresScheduleHistory': boolean\n\n};\nexport type StringComparisonRule = {\n    'ComparisonStrings': Array < string >\n        | string\n\n    'MatchRequirement': \"Any\" | \"All\"\n\n};\nexport type BloodPressureRule = {\n    'SystolicComparisonRule': NumericComparisonRule\n\n    'DiastolicComparisonRule': NumericComparisonRule\n\n};\nexport type MeasurementCalculationRule = {\n    'CalculationScope': \"ThisOutcome\" | \"ComparedWithPrevious\" | \"MovingAverage\"\n\n    'MeasurementSpan': number\n\n    'SpanType': \"This\" | \"Outcomes\" | \"Days\" | \"Weeks\" | \"Months\"\n\n};\nexport type MeasurementComparisonRule = {\n    'Operator': \"Equals\" | \"GreaterThan\" | \"GreaterThanOrEqualTo\" | \"LessThan\" | \"LessThanOrEqualTo\" | \"PlusOrMinus\" | \"OutOfRange\"\n\n    'ComparisonValues': Array < ComparisonValue >\n        | ComparisonValue\n\n};\nexport type ComparisonValue = {\n    'ValueType': \"Low\" | \"High\" | \"Single\"\n\n    'Value': number\n\n};\nexport type PatientUpdateBindingModel = {\n    'Address1': string\n\n    'Address2': string\n\n    'BirthDate': string\n\n    'CarePlanId': string\n\n    'CategoryId': string\n\n    'City': string\n\n    'CompanyName': string\n\n    'Country': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'MobilePhone': string\n\n    'HomePhone': string\n\n    'NewUserName': string\n\n    'PostalCode': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'UserName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n};\nexport type AlertedPatientViewModel = {\n    'AlertCount': number\n\n    'AlertedTime': string\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type ArchivedPatientViewModel = {\n    'TimeOfArchival': string\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type TaskOutcomesOverTime = {\n    'DomainType': \"Day\" | \"Month\"\n\n    'Domain': Array < string >\n        | string\n\n    'Datasets': {}\n\n};\nexport type TaskOutcomeDataset = {\n    'SeriesName': string\n\n    'Min': Array < number >\n        | number\n\n    'Max': Array < number >\n        | number\n\n    'Mean': Array < number >\n        | number\n\n    'Sum': Array < number >\n        | number\n\n    'RecordCount': Array < number >\n        | number\n\n};\nexport type FullNameBindingModel = {\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n};\nexport type AddressBindingModel = {\n    'CompanyName': string\n\n    'Address1': string\n\n    'Address2': string\n\n    'City': string\n\n    'State': string\n\n    'PostalCode': string\n\n    'Country': string\n\n};\nexport type TimeZoneBindingModel = {\n    'TimeZoneId': string\n\n};\nexport type SignaledAlertViewModel = {\n    'PatientId': string\n\n    'ScheduledTaskId': string\n\n    'SignalId': string\n\n    'AlertedTime': string\n\n    'DayOfCare': string\n\n    'AlertTrigger': AlertTrigger\n\n    'IsActive': boolean\n\n    'TaskId': string\n\n};\nexport type PatientMostRecentTaskResultViewModel = {\n    'TaskId': string\n\n    'TaskName': string\n\n    'ScheduledTaskId': string\n\n    'TaskState': string\n\n    'MeasurementData': string\n\n    'MeasurementUnits': string\n\n    'MeasurementDateTime': string\n\n    'ScheduledTaskRemoved': boolean\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type PatientCoreViewModel = {\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type PatientCreatedDateViewModel = {\n    'CreatedDate': string\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type PatientAppointmentDateViewModel = {\n    'AppointmentDate': string\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CarePlanAssociations': Array < PatientCarePlanAssocationViewModel >\n        | PatientCarePlanAssocationViewModel\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'IsDeactivated': boolean\n\n    'Id': string\n\n    'LastName': string\n\n    'Name': NameReadModel\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'TimeZoneId': string\n\n    'PatientPhoto': ImageViewModel\n\n    'Status': \"Invited\" | \"Activated\" | \"Deactivated\"\n\n};\nexport type RoleBindingModel = {\n    'Roles': Array < string >\n        | string\n\n};\nexport type InternalBulkPatientUpdateBindingModel = {\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'PatientIds': Array < string >\n        | string\n\n    'CarePlanIdsToAdd': Array < string >\n        | string\n\n    'CarePlanIdsToRemove': Array < string >\n        | string\n\n    'CategoryIdsToAdd': Array < string >\n        | string\n\n    'CategoryIdsToRemove': Array < string >\n        | string\n\n    'OrganizationId': string\n\n};\nexport type AcceptInvitationBindingModel = {\n    'Password': string\n\n    'EmailAddress': string\n\n    'Sex': string\n\n    'BirthDate': string\n\n    'ActivationCode': string\n\n};\nexport type PatientInvitationCreateBindingModel = {\n    'Address1': string\n\n    'Address2': string\n\n    'BirthDate': string\n\n    'CarePlanId': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CategoryId': string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'City': string\n\n    'EmailAddress': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'FirstName': string\n\n    'HomePhone': string\n\n    'MiddleName': string\n\n    'LastName': string\n\n    'MobilePhone': string\n\n    'OrganizationId': string\n\n    'PostalCode': string\n\n    'Sex': string\n\n    'SponsorPatientId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'ChannelTypes': Array < \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\" >\n        | \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n};\nexport type InvitationCodeViewModel = {\n    'InvitationCode': string\n\n    'EmailAddress': string\n\n    'SponsorId': string\n\n};\nexport type PatientInvitation = {\n    'Accepted': boolean\n\n    'AcceptedTime': string\n\n    'Address1': string\n\n    'Address2': string\n\n    'BirthDate': string\n\n    'CarePlanId': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CategoryId': string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'City': string\n\n    'CreatedByUserId': string\n\n    'CreatedBySponsorUserId': string\n\n    'CreatedByUserName': string\n\n    'CreatedDateTime': string\n\n    'CreatedPatientId': string\n\n    'Country': string\n\n    'DistributorId': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'HomePhone': string\n\n    'InvitationCode': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'MobilePhone': string\n\n    'OrganizationId': string\n\n    'OrganizationName': string\n\n    'PostalCode': string\n\n    'Sent': boolean\n\n    'SentTime': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorPatientId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'UserName': string\n\n    'ChannelTypes': Array < \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\" >\n        | \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n};\nexport type KioskPatientInvitationCreateBindingModel = {\n    'Address1': string\n\n    'Address2': string\n\n    'BirthDate': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CategoryIds': Array < string >\n        | string\n\n    'City': string\n\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'MobilePhone': string\n\n    'OrganizationId': string\n\n    'PostalCode': string\n\n    'Sex': string\n\n    'SponsorPatientId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n};\nexport type ResendInvitationsBindingModel = {\n    'LastSentStartDate': string\n\n    'LastSentEndDate': string\n\n    'TimeZoneId': string\n\n    'InvitationCodes': Array < string >\n        | string\n\n    'ChannelTypes': Array < \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\" >\n        | \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n};\nexport type PatientProfileDefinitionCreateBindingModel = {\n    'Name': string\n\n    'Id': string\n\n    'AllowMultipleInstancesPerPatient': boolean\n\n};\nexport type ProfileDefinitionElementCreateBindingModel = {\n    'Name': string\n\n    'Code': string\n\n    'Category': string\n\n};\nexport type PatientProfileDefinitionEnhancedReadModel = {\n    'Name': string\n\n    'Id': string\n\n    'AggregateId': string\n\n    'CreationDateTime': string\n\n    'DistributorId': string\n\n    'TagElements': Array < TagElementDefinition >\n        | TagElementDefinition\n\n    'TextElements': Array < TextElementDefinition >\n        | TextElementDefinition\n\n    'CodeCollections': Array < CodeCollectionDefinition >\n        | CodeCollectionDefinition\n\n    'Category': string\n\n    'AllowMultipleInstancesPerPatient': boolean\n\n};\nexport type TagElementDefinition = {\n    'DefinedTagsBySponsor': {}\n\n    'Id': string\n\n    'Name': string\n\n    'Code': string\n\n    'Category': string\n\n};\nexport type TextElementDefinition = {\n    'Id': string\n\n    'Name': string\n\n    'Code': string\n\n    'Category': string\n\n};\nexport type CodeCollectionDefinition = {\n    'Id': string\n\n    'Name': string\n\n    'Code': string\n\n    'Category': string\n\n};\nexport type PatientProfileDefinitionElementCategoryBindingModel = {\n    'Category': string\n\n};\nexport type CodeCollectionBindingModel = {\n    'Codes': Array < CodesBindingModel >\n        | CodesBindingModel\n\n};\nexport type CodesBindingModel = {\n    'CodingScheme': string\n\n    'Code': string\n\n    'Description': string\n\n};\nexport type SetProfileTagElementBindingModel = {\n    'Tags': Array < string >\n        | string\n\n};\nexport type FullPatientProfileViewModel = {\n    'ProfileDefinitionInstances': {}\n\n};\nexport type PatientProfileCollectionEnhancedReadModel = {\n    'Instances': {}\n\n    'PatientId': string\n\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'PatientProfileDefinitionId': string\n\n    'Category': string\n\n    'AllowMultipleInstances': boolean\n\n};\nexport type PatientProfileEnhancedReadModel = {\n    'Key': string\n\n    'Title': string\n\n    'Subtitle': string\n\n    'TagElements': Array < TagElementReadModel >\n        | TagElementReadModel\n\n    'TextElements': Array < TextElementReadModel >\n        | TextElementReadModel\n\n    'CodeCollections': Array < CodeCollectionReadModel >\n        | CodeCollectionReadModel\n\n    'PatientId': string\n\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'PatientProfileDefinitionId': string\n\n    'Category': string\n\n    'AllowMultipleInstances': boolean\n\n};\nexport type TagElementReadModel = {\n    'SponsorTags': Array < string >\n        | string\n\n    'Tags': Array < string >\n        | string\n\n    'Category': string\n\n    'Code': string\n\n    'Id': string\n\n    'LastUpdated': string\n\n    'Name': string\n\n};\nexport type TextElementReadModel = {\n    'Text': string\n\n    'Category': string\n\n    'Code': string\n\n    'Id': string\n\n    'LastUpdated': string\n\n    'Name': string\n\n};\nexport type CodeCollectionReadModel = {\n    'Codes': Array < CodeReadModel >\n        | CodeReadModel\n\n    'Category': string\n\n    'Code': string\n\n    'Id': string\n\n    'LastUpdated': string\n\n    'Name': string\n\n};\nexport type CodeReadModel = {\n    'CodingScheme': string\n\n    'Code': string\n\n    'Description': string\n\n};\nexport type UpdateSponsorPatientProfileBindingModel = {\n    'TagElements': Array < TagElementUpdateBindingModel >\n        | TagElementUpdateBindingModel\n\n    'TextElements': Array < TextElementUpdateBindingModel >\n        | TextElementUpdateBindingModel\n\n};\nexport type TagElementUpdateBindingModel = {\n    'Id': string\n\n    'Tags': Array < string >\n        | string\n\n};\nexport type TextElementUpdateBindingModel = {\n    'Id': string\n\n    'Text': string\n\n};\nexport type UpdateSponsorPatientProfileInstanceLinkText = {\n    'Title': string\n\n    'Subtitle': string\n\n};\nexport type AppointmentCancelBindingModel = {\n    'AppointmentDateTime': string\n\n    'CancellationDateTime': string\n\n    'SponsorId': string\n\n};\nexport type AppointmentCreateBindingModel = {\n    'AppointmentDateTime': string\n\n    'SponsorId': string\n\n};\nexport type AppointmentUpdateBindingModel = {\n    'OldAppointmentDateTime': string\n\n    'NewAppointmentDateTime': string\n\n    'SponsorId': string\n\n};\nexport type MeasurementBindingModel = {\n    'MeasurementDateTime': string\n\n    'MeasurementData': string\n\n    'Source': string\n\n    'State': \"NoResult\" | \"CompletedSuccessfully\" | \"CompletedUnsuccessfully\" | \"InProgress\" | \"Deferred\"\n\n    'Notes': string\n\n};\nexport type RecordedMeasurementData = {\n    'ScheduledTaskId': string\n\n    'MeasurementId': string\n\n    'MeasurementData': string\n\n};\nexport type PatientScheduleViewModel = {\n    'Days': Array < DayOfCareViewModel >\n        | DayOfCareViewModel\n\n};\nexport type DayOfCareViewModel = {\n    'Date': string\n\n    'ScheduledTasks': Array < ScheduledTaskViewModel >\n        | ScheduledTaskViewModel\n\n    'Surveys': {}\n\n    'SignaledAlerts': Array < SignaledAlertViewModel >\n        | SignaledAlertViewModel\n\n};\nexport type ScheduledTaskViewModel = {\n    'CarePlanId': string\n\n    'CarePlanIds': Array < string >\n        | string\n\n    'CausedAlert': boolean\n\n    'Codes': Array < MedicalCode >\n        | MedicalCode\n\n    'GoalNumber': string\n\n    'Id': string\n\n    'MeasurementDomain': Array < string >\n        | string\n\n    'MeasurementUnits': string\n\n    'Note': string\n\n    'Outcome': MeasurementViewModel\n\n    'RolesAllowedToRecordOutcome': Array < string >\n        | string\n\n    'ScheduledTime': string\n\n    'ScheduledTimePeriod': string\n\n    'SponsorId': string\n\n    'SponsorTaskId': string\n\n    'SurveyInformation': SurveyNodeInformation\n\n    'TaskContentUri': string\n\n    'TaskContentUriRequiresAuthentication': boolean\n\n    'TaskCost': number\n\n    'TaskDuration': number\n\n    'TaskId': string\n\n    'TaskName': string\n\n    'TaskDescription': string\n\n    'TaskTags': Array < string >\n        | string\n\n    'TypeOfMeasurement': string\n\n};\nexport type ScheduledSurveyViewModel = {\n    'SurveyId': string\n\n    'SurveyName': string\n\n    'SurveyScheduledTasks': Array < ScheduledTaskViewModel >\n        | ScheduledTaskViewModel\n\n    'TaskScheduleId': string\n\n    'RolesAllowedToRecordOutcome': Array < string >\n        | string\n\n    'SponsorSurveyId': string\n\n};\nexport type MeasurementViewModel = {\n    'Id': string\n\n    'TaskId': string\n\n    'MeasurementDateTime': string\n\n    'MeasurementData': string\n\n    'NonPatientRecordingUserId': string\n\n    'NonPatientRecordingUserActorKind': \"Patient\" | \"User\" | \"Organization\"\n\n    'NonPatientRecordingUserSponsorId': string\n\n    'NonPatientRecordingUserFirstName': string\n\n    'NonPatientRecordingUserLastName': string\n\n    'Source': string\n\n    'State': \"NoResult\" | \"CompletedSuccessfully\" | \"CompletedUnsuccessfully\" | \"InProgress\" | \"Deferred\"\n\n    'Notes': string\n\n};\nexport type SurveyNodeInformation = {\n    'SurveyId': string\n\n    'BranchData': BranchInfo\n\n    'SponsorSurveyId': string\n\n};\nexport type BranchInfo = {\n    'BranchingTaskId': string\n\n    'TaskId': string\n\n    'NextBranchConditions': Array < BranchCondition >\n        | BranchCondition\n\n    'IsHead': boolean\n\n};\nexport type BranchCondition = {\n    'Condition': Condition\n\n    'BranchingTaskId': string\n\n};\nexport type Condition = {\n    'Operator': \"Default\" | \"Equals\" | \"Contains\"\n\n    'Values': Array < string >\n        | string\n\n};\nexport type SponsorEngagementOrAdherenceWithCarePlanViewModel = {\n    'CarePlans': Array < CarePlanWithAveragesViewModel >\n        | CarePlanWithAveragesViewModel\n\n};\nexport type CarePlanWithAveragesViewModel = {\n    'CarePlanName': string\n\n    'Average': Array < number >\n        | number\n\n    'YYYYMM': Array < number >\n        | number\n\n};\nexport type OrganizationEngagementRatioViewModel = {\n    'Data': Array < CareTeamEngagementModel >\n        | CareTeamEngagementModel\n\n    'OrganizationName': string\n\n};\nexport type CareTeamEngagementModel = {\n    'ActiveUserCount': number\n\n    'EngagedUserCount': number\n\n    'Ratio': number\n\n    'YearMonthDate': string\n\n};\nexport type OrganizationSessionRatioViewModel = {\n    'Data': CareTeamSession\n\n    'OrganizationName': string\n\n};\nexport type CareTeamSession = {\n    'SessionRatio': number\n\n    'TotalPossibleLogins': number\n\n    'TotalUserLogins': number\n\n};\nexport type SponsorEngagementRatioViewModel = {\n    'Data': Array < CareTeamEngagementModel >\n        | CareTeamEngagementModel\n\n    'SponsorName': string\n\n};\nexport type SponsorSessionRatioViewModel = {\n    'Data': CareTeamSession\n\n    'SponsorName': string\n\n};\nexport type PatientChannelPercentagesViewModel = {\n    'Android': number\n\n    'AndroidPush': number\n\n    'Apple': number\n\n    'ApplePush': number\n\n    'Desktop': number\n\n    'Email': number\n\n};\nexport type PatientDemographicsReport = {\n    'Gender': PatientSexCountsReport\n\n    'Age': PatientAgeCountsReport\n\n};\nexport type PatientSexCountsReport = {\n    'MaleCount': number\n\n    'FemaleCount': number\n\n    'UnknownCount': number\n\n};\nexport type PatientAgeCountsReport = {\n    'Range0': number\n\n    'Range1': number\n\n    'Range2': number\n\n    'Range3': number\n\n    'Range4': number\n\n    'Range5': number\n\n    'Range6': number\n\n};\nexport type PatientInvitationReport = {\n    'Count': number\n\n};\nexport type SponsorEngagementOrAdherenceViewModel = {\n    'Engagement': AveragesViewModel\n\n    'Adherence': AveragesViewModel\n\n    'WithoutTasks': AveragesViewModel\n\n};\nexport type AveragesViewModel = {\n    'Average': Array < number >\n        | number\n\n    'YYYYMM': Array < number >\n        | number\n\n};\nexport type PatientOnboardingCountsReport = {\n    'Categories': Array < string >\n        | string\n\n    'InvitesSent': Array < number >\n        | number\n\n    'Activated': Array < number >\n        | number\n\n    'Pending': Array < number >\n        | number\n\n};\nexport type SharedCareListItemViewModel = {\n    'Id': string\n\n    'SponsorPatientId': string\n\n    'Name': INameReadModel\n\n    'OrganizationName': string\n\n    'Photo': string\n\n    'Relationships': Array < SharedCareRelationshipViewModel >\n        | SharedCareRelationshipViewModel\n\n};\nexport type INameReadModel = {\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n};\nexport type SharedCareRelationshipViewModel = {\n    'Id': string\n\n    'SponsorPatientId': string\n\n    'Name': INameReadModel\n\n    'OrganizationName': string\n\n    'Photo': string\n\n    'Relationship': \"Spouse\" | \"SignificantOther\" | \"Grandparent\" | \"Grandchild\" | \"Mother\" | \"Father\" | \"Child\" | \"Employee\" | \"Coworker\" | \"Other\"\n\n    'Permissions': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n};\nexport type SharedCareInvitationAcceptBindingModel = {\n    'Password': string\n\n    'EmailAddressAcceptedWith': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'HomePhone': string\n\n    'MobilePhone': string\n\n    'Sex': string\n\n    'TimeZoneId': string\n\n    'BirthDate': string\n\n    'Relationship': \"Spouse\" | \"SignificantOther\" | \"Grandparent\" | \"Grandchild\" | \"Mother\" | \"Father\" | \"Child\" | \"Employee\" | \"Coworker\" | \"Other\"\n\n};\nexport type SharedCarePermissionsBindingModel = {\n    'Permission': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n};\nexport type SharedCareInvitation = {\n    'Accepted': boolean\n\n    'AcceptedTime': string\n\n    'EmailAddress': string\n\n    'EmailAddressAcceptedWith': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'InvitingPatientId': string\n\n    'InvitationCode': string\n\n    'IsExistingPatient': boolean\n\n    'Permission': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n    'ReceivingPatientId': string\n\n    'Relationship': \"Spouse\" | \"SignificantOther\" | \"Grandparent\" | \"Grandchild\" | \"Mother\" | \"Father\" | \"Child\" | \"Employee\" | \"Coworker\" | \"Other\"\n\n    'SentTime': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'Address1': string\n\n    'Address2': string\n\n    'City': string\n\n    'State': string\n\n    'PostalCode': string\n\n    'Country': string\n\n};\nexport type SharedCareInvitationCreateBindingModel = {\n    'EmailAddress': string\n\n    'FirstName': string\n\n    'LastName': string\n\n    'Relationship': \"Spouse\" | \"SignificantOther\" | \"Grandparent\" | \"Grandchild\" | \"Mother\" | \"Father\" | \"Child\" | \"Employee\" | \"Coworker\" | \"Other\"\n\n    'Permission': \"None\" | \"ReadOnly\" | \"ReadWrite\"\n\n};\nexport type SharedCareInvitationCodeViewModel = {\n    'InvitationCode': string\n\n    'EmailAddress': string\n\n    'PatientId': string\n\n};\nexport type OrganizationSettingsBindingModel = {\n    'Settings': {}\n\n};\nexport type SponsorOrganizationIdBindingModel = {\n    'SponsorOrganizationId': string\n\n};\nexport type SponsorSettingsBindingModel = {\n    'Settings': {}\n\n};\nexport type SponsorSecretsBindingModel = {\n    'SecretName': string\n\n    'SecretValue': string\n\n};\nexport type SponsorSecretsViewModel = {\n    'Secrets': SponsorSecrets\n\n};\nexport type SponsorSecrets = {\n    'CampaignMonitorApiKey': string\n\n    'MandrillApiKey': string\n\n    'CampaignMonitorClientId': string\n\n    'AzureNotificationHubName': string\n\n    'AzureNotificationHubConnectionString': string\n\n    'TwilioAccountSid': string\n\n    'TwilioAuthToken': string\n\n    'TwilioProgrammableVideoSid': string\n\n    'TwilioProgrammableVideoSecret': string\n\n};\nexport type OrganizationCreateBindingModel = {\n    'Name': string\n\n    'Description': string\n\n    'SponsorOrganizationId': string\n\n};\nexport type OrganizationReadModel = {\n    'BusinessAddress': Address\n\n    'Contact': DigitalContactInformation\n\n    'Description': string\n\n    'Id': string\n\n    'Name': string\n\n    'OrganizationPhoto': ImageReadModel\n\n    'PatientCount': number\n\n    'SponsorOrganizationId': string\n\n    'TelephoneNumbers': {\n        'Business': TelephoneNumber\n\n        'Mobile': TelephoneNumber\n\n        'Personal': TelephoneNumber\n\n    }\n\n    'UserCount': number\n\n    'Branding': BrandingReadModel\n\n    'BrandingLogoUrl': string\n\n    'BrandingEmailLogoUrl': string\n\n    'Settings': OrganizationSettings\n\n};\nexport type BrandingReadModel = {\n    'Logo': ImageReadModel\n\n    'EmailLogo': ImageReadModel\n\n    'PrimaryColor': string\n\n    'SecondaryColor': string\n\n    'TertiaryColor': string\n\n};\nexport type SponsorCounterViewModel = {\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'UserCount': number\n\n    'PatientCount': number\n\n    'ActivationCount': number\n\n    'DeactivationCount': number\n\n    'PatientsLoggedInCount': number\n\n    'CarePlanUtilization': {}\n\n};\nexport type OrganizationDescriptionBindingModel = {\n    'Description': string\n\n};\nexport type DigitalContactInformationBindingModel = {\n    'EmailAddress': string\n\n    'WebsiteUrl': string\n\n    'Twitter': string\n\n};\nexport type OrganizationNameBindingModel = {\n    'Name': string\n\n};\nexport type TelephoneBindingModel = {\n    'CountryCode': string\n\n    'Number': string\n\n};\nexport type PhoneBindingModel = {\n    'PhoneNumber': string\n\n};\nexport type WebHookCreateBindingModel = {\n    'EventName': \"SponsorPatientIdAppliedToPatient\" | \"PatientAddedToRepository\" | \"AlertSignaledForScheduledTask\" | \"MeasurementRecorded\" | \"MessageSent\" | \"MessageReceived\" | \"ConversationStatusSet\" | \"PatientCompletedSurvey\"\n\n    'Verb': \"Get\" | \"Post\" | \"Put\" | \"Delete\" | \"Head\" | \"Patch\" | \"Options\"\n\n    'ExternalUri': string\n\n    'PayloadType': \"PatientIo\" | \"Fhir\"\n\n    'AuthorizationUri': string\n\n    'GrantType': \"ClientCredentials\" | \"Password\"\n\n    'UserName': string\n\n    'Password': string\n\n};\nexport type WebHookUpdateBindingModel = {\n    'EventName': \"SponsorPatientIdAppliedToPatient\" | \"PatientAddedToRepository\" | \"AlertSignaledForScheduledTask\" | \"MeasurementRecorded\" | \"MessageSent\" | \"MessageReceived\" | \"ConversationStatusSet\" | \"PatientCompletedSurvey\"\n\n    'Verb': \"Get\" | \"Post\" | \"Put\" | \"Delete\" | \"Head\" | \"Patch\" | \"Options\"\n\n    'ExternalUri': string\n\n    'PayloadType': \"PatientIo\" | \"Fhir\"\n\n};\nexport type WebHookAuthorizationUpdateBindingModel = {\n    'Ids': Array < string >\n        | string\n\n    'AuthorizationUri': string\n\n    'GrantType': \"ClientCredentials\" | \"Password\"\n\n    'UserName': string\n\n    'Password': string\n\n};\nexport type SurveyCreateBindingModel = {\n    'Name': string\n\n    'BranchingTasks': Array < BranchingTaskCreateBindingModel >\n        | BranchingTaskCreateBindingModel\n\n    'State': \"Activated\" | \"Deactivated\"\n\n    'SponsorSurveyId': string\n\n};\nexport type BranchingTaskCreateBindingModel = {\n    'TaskId': string\n\n    'BranchConditions': Array < ConditionTaskCollectionBindingModel >\n        | ConditionTaskCollectionBindingModel\n\n};\nexport type ConditionTaskCollectionBindingModel = {\n    'Condition': Condition\n\n    'BranchingTasks': Array < BranchingTaskCreateBindingModel >\n        | BranchingTaskCreateBindingModel\n\n};\nexport type SurveyReadModel = {\n    'AggregateId': string\n\n    'Id': string\n\n    'Version': number\n\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'Name': string\n\n    'State': \"Activated\" | \"Deactivated\"\n\n    'SponsorSurveyId': string\n\n    'BranchingTasks': Array < BranchingTask >\n        | BranchingTask\n\n    'OwnerAggregateId': string\n\n    'OwningAggregateType': \"Distributor\" | \"Sponsor\" | \"Patient\"\n\n};\nexport type BranchingTask = {\n    'Id': string\n\n    'TaskId': string\n\n    'BranchConditions': Array < ConditionTaskCollection >\n        | ConditionTaskCollection\n\n};\nexport type ConditionTaskCollection = {\n    'Condition': Condition\n\n    'BranchingTasks': Array < BranchingTask >\n        | BranchingTask\n\n};\nexport type SurveyBranchesBindingModel = {\n    'BranchingTasks': Array < BranchingTask >\n        | BranchingTask\n\n    'Version': number\n\n};\nexport type SurveyStateBindingModel = {\n    'State': \"Activated\" | \"Deactivated\"\n\n};\nexport type SurveySponsorSurveyIdBindingModel = {\n    'SponsorSurveyId': string\n\n};\nexport type TagListBindingModel = {\n    'Tags': Array < string >\n        | string\n\n};\nexport type TaskContentBindingModel = {\n    'ContentUri': string\n\n    'ContentUriRequiresAuthentication': boolean\n\n};\nexport type TaskDeactivatedStateBindingModel = {\n    'ShouldBeDeactivated': boolean\n\n};\nexport type TaskDescriptionBindingModel = {\n    'Description': string\n\n};\nexport type TaskMeasurementBindingModel = {\n    'GoalNumber': number\n\n    'MeasurementDomain': Array < string >\n        | string\n\n    'MeasurementUnits': string\n\n    'OwningAggregateId': string\n\n    'TypeOfMeasurement': \"Boolean\" | \"String\" | \"Date\" | \"DateTime\" | \"MultipleChoiceSingle\" | \"MultipleChoiceMultiple\" | \"Numeric\" | \"NumericWithGoal\" | \"Appointment\" | \"Checklist\" | \"Signature\" | \"Interval\" | \"Photo\"\n\n};\nexport type TaskCodesBindingModel = {\n    'Codes': Array < MedicalCode >\n        | MedicalCode\n\n};\nexport type SponsorTaskIdBindingModel = {\n    'SponsorTaskId': string\n\n};\nexport type TaskCreateBindingModel = {\n    'Cost': number\n\n    'Duration': number\n\n    'GoalNumber': number\n\n    'MeasurementDomain': Array < string >\n        | string\n\n    'MeasurementUnits': string\n\n    'Name': string\n\n    'SponsorTaskId': string\n\n    'TaskContentUri': string\n\n    'TaskContentUriRequiresAuthentication': boolean\n\n    'TaskDescription': string\n\n    'TaskTags': Array < string >\n        | string\n\n    'TypeOfMeasurement': \"Boolean\" | \"String\" | \"Date\" | \"DateTime\" | \"MultipleChoiceSingle\" | \"MultipleChoiceMultiple\" | \"Numeric\" | \"NumericWithGoal\" | \"Appointment\" | \"Checklist\" | \"Signature\" | \"Interval\" | \"Photo\"\n\n    'Codes': Array < MedicalCode >\n        | MedicalCode\n\n    'PatientAssignable': boolean\n\n};\nexport type CreateTaskAlertBindingModel = {\n    'TaskAlert': TaskAlert\n\n};\nexport type TaskUpdateBindingModel = {\n    'Duration': number\n\n    'GoalNumber': number\n\n    'MeasurementDomain': Array < string >\n        | string\n\n    'MeasurementUnits': string\n\n    'Name': string\n\n    'SponsorTaskId': string\n\n    'Cost': number\n\n    'TaskContentUri': string\n\n    'TaskContentUriRequiresAuthentication': boolean\n\n    'TaskTags': Array < string >\n        | string\n\n    'TaskDescription': string\n\n    'TypeOfMeasurement': \"Boolean\" | \"String\" | \"Date\" | \"DateTime\" | \"MultipleChoiceSingle\" | \"MultipleChoiceMultiple\" | \"Numeric\" | \"NumericWithGoal\" | \"Appointment\" | \"Checklist\" | \"Signature\" | \"Interval\" | \"Photo\"\n\n    'Codes': Array < MedicalCode >\n        | MedicalCode\n\n    'PatientAssignable': boolean\n\n};\nexport type UpdateTaskAlertBindingModel = {\n    'TaskAlert': TaskAlert\n\n};\nexport type TreatmentTaskScheduleItemBindingModel = {\n    'DaysRelativeToNextTreatment': number\n\n    'ScheduledTime': string\n\n    'ScheduledTimePeriod': string\n\n};\nexport type UpdateTaskScheduleItemBindingModel = {\n    'ScheduledTime': string\n\n    'ScheduledTimePeriod': string\n\n};\nexport type UntilCompleteTaskScheduleItemBindingModel = {\n    'ExpirationPeriodUnits': \"None\" | \"Years\" | \"Months\" | \"Weeks\" | \"Days\" | \"AllDateUnits\" | \"YearMonthDay\" | \"Hours\" | \"Minutes\" | \"Seconds\" | \"Milliseconds\" | \"Ticks\" | \"Nanoseconds\" | \"HourMinuteSecond\" | \"AllTimeUnits\" | \"DateAndTime\" | \"AllUnits\"\n\n    'RepetitionPeriod': \"Once\" | \"Year\" | \"Month\" | \"Week\" | \"Day\"\n\n    'StartPeriodUnits': \"None\" | \"Years\" | \"Months\" | \"Weeks\" | \"Days\" | \"AllDateUnits\" | \"YearMonthDay\" | \"Hours\" | \"Minutes\" | \"Seconds\" | \"Milliseconds\" | \"Ticks\" | \"Nanoseconds\" | \"HourMinuteSecond\" | \"AllTimeUnits\" | \"DateAndTime\" | \"AllUnits\"\n\n    'ExpirationDate': string\n\n    'ExpirationNumberOfPeriods': number\n\n    'RepetitionInterval': number\n\n    'StartDate': string\n\n    'StartNumberOfPeriods': number\n\n};\nexport type WeeklyTaskScheduleItemBindingModel = {\n    'DayOfWeek': \"None\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"\n\n    'ScheduledTime': string\n\n    'StartType': \"OnScheduleStart\" | \"OnInitialTreatment\"\n\n    'StopType': \"NoStop\" | \"OnInitialTreatment\"\n\n    'ScheduledTimePeriod': string\n\n};\nexport type TaskScheduleBindingModel = {\n    'Note': string\n\n    'TaskClass': \"Standard\" | \"Survey\"\n\n    'TaskId': string\n\n    'TreatmentTaskScheduleItems': Array < TreatmentTaskScheduleItemBindingModel >\n        | TreatmentTaskScheduleItemBindingModel\n\n    'WeeklyTaskScheduleItems': Array < WeeklyTaskScheduleItemBindingModel >\n        | WeeklyTaskScheduleItemBindingModel\n\n    'UntilCompleteTaskScheduleItems': Array < UntilCompleteTaskScheduleItemBindingModel >\n        | UntilCompleteTaskScheduleItemBindingModel\n\n    'Target': number\n\n    'RolesAllowedToRecordOutcome': Array < string >\n        | string\n\n};\nexport type TaskScheduleUpdateBindingModel = {\n    'Note': string\n\n};\nexport type TaskScheduleTargetUpdateBindingModel = {\n    'Target': number\n\n};\nexport type TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel = {\n    'RolesAllowedToRecordOutcome': Array < string >\n        | string\n\n};\nexport type TaskScheduleIsDeactivatedBindingModel = {\n    'IsDeactivated': boolean\n\n};\nexport type TimeCardRecordCreateBindingModel = {\n    'PatientId': string\n\n    'TimeCardActions': Array < TimeCardActionCreateBindingModel >\n        | TimeCardActionCreateBindingModel\n\n};\nexport type TimeCardActionCreateBindingModel = {\n    'ActionType': \"Checkin\" | \"Checkout\"\n\n    'Latitude': number\n\n    'LocationAccuracyMeters': number\n\n    'Longitude': number\n\n    'ActionTime': string\n\n    'SignatureImageDataUri': string\n\n    'Note': string\n\n};\nexport type TimeCardUpdateResponse = {\n    'ActionType': \"Checkin\" | \"Checkout\" | \"UpdateState\"\n\n    'Id': string\n\n};\nexport type TimeCardRecordViewModel = {\n    'Id': string\n\n    'TimeIn': TimeCardActionViewModel\n\n    'TimeOut': TimeCardActionViewModel\n\n    'User': ActorReadModel\n\n    'Patient': ActorReadModel\n\n};\nexport type TimeCardActionViewModel = {\n    'Latitude': number\n\n    'LocationAccuracyMeters': number\n\n    'Longitude': number\n\n    'ActionTime': string\n\n    'Note': string\n\n    'SignatureUri': string\n\n};\nexport type CurrentTimeCardActionBindingModel = {\n    'PatientId': string\n\n    'ActionType': \"Checkin\" | \"Checkout\" | \"UpdateState\"\n\n    'Latitude': number\n\n    'LocationAccuracyMeters': number\n\n    'Longitude': number\n\n    'SignatureImageDataUri': string\n\n    'Note': string\n\n};\nexport type TimeCardRecordUpdateBindingModel = {\n    'PatientId': string\n\n    'TimeCardAction': TimeCardActionUpdateBindingModel\n\n};\nexport type TimeCardActionUpdateBindingModel = {\n    'ActionType': \"Checkin\" | \"Checkout\"\n\n    'Latitude': number\n\n    'LocationAccuracyMeters': number\n\n    'Longitude': number\n\n    'UpdatedActionTime': string\n\n    'Note': string\n\n};\nexport type UserSettingsBindingModel = {\n    'NotifyOfAlerts': boolean\n\n    'AllowableDirectMessaging': \"ByNone\" | \"ByInOrganization\"\n\n    'NewDirectMessageNotification': Array < \"Email\" | \"Push\" >\n        | \"Email\" | \"Push\"\n\n    'NewOrganizationMessageNotification': Array < \"Email\" | \"Push\" >\n        | \"Email\" | \"Push\"\n\n};\nexport type UserCreateBindingModel = {\n    'Address1': string\n\n    'Address2': string\n\n    'Biography': string\n\n    'BirthDate': string\n\n    'City': string\n\n    'CompanyName': string\n\n    'Country': string\n\n    'FirstName': string\n\n    'HomePhone': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n    'MobilePhone': string\n\n    'OrganizationIds': Array < string >\n        | string\n\n    'Password': string\n\n    'PostalCode': string\n\n    'Roles': Array < string >\n        | string\n\n    'Sex': string\n\n    'SponsorUserId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'UserName': string\n\n};\nexport type UserCreatedViewModel = {\n    'UserName': string\n\n    'Id': string\n\n    'Roles': Array < string >\n        | string\n\n};\nexport type DistributorUserListViewModel = {\n    'DistributorId': string\n\n    'Users': {}\n\n};\nexport type UserUpdateBindingModel = {\n    'Address1': string\n\n    'Address2': string\n\n    'Biography': string\n\n    'BirthDate': string\n\n    'City': string\n\n    'CompanyName': string\n\n    'Country': string\n\n    'Prefix': string\n\n    'FirstName': string\n\n    'MiddleName': string\n\n    'HomePhone': string\n\n    'LastName': string\n\n    'Suffix': string\n\n    'MobilePhone': string\n\n    'NewUserName': string\n\n    'OrganizationId': string\n\n    'PostalCode': string\n\n    'Sex': string\n\n    'SponsorId': string\n\n    'SponsorUserId': string\n\n    'State': string\n\n    'TimeZoneId': string\n\n    'UserName': string\n\n};\nexport type SponsorUserListViewModel = {\n    'SponsorId': string\n\n    'Users': {}\n\n};\nexport type UserAcceptInvitationBindingModel = {\n    'EmailAddress': string\n\n    'Sex': string\n\n    'BirthDate': string\n\n    'Password': string\n\n    'ActivationCode': string\n\n};\nexport type UserCreateInvitationBindingModel = {\n    'Name': FullNameBindingModel\n\n    'Address': AddressBindingModel\n\n    'MobilePhone': string\n\n    'HomePhone': string\n\n    'EmailAddress': string\n\n    'Sex': string\n\n    'BirthDate': string\n\n    'TimeZoneId': string\n\n    'Biography': string\n\n    'SponsorUserId': string\n\n    'OrganizationIds': Array < string >\n        | string\n\n    'Roles': Array < string >\n        | string\n\n    'ChannelTypes': Array < \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\" >\n        | \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n};\nexport type UserInvitationCreateViewModel = {\n    'UserName': string\n\n    'Id': string\n\n    'Roles': Array < string >\n        | string\n\n    'InvitationCode': string\n\n};\nexport type UserStatusViewModel = {\n    'InvitedByUserId': string\n\n    'InvitedBySponsorUserId': string\n\n    'InvitedByUserName': NameViewModel\n\n    'InvitationSentDate': string\n\n    'InvitationAcceptedDate': string\n\n    'InvitationCode': string\n\n    'DistributorId': string\n\n    'SponsorId': string\n\n    'Id': string\n\n    'BirthDate': string\n\n    'EmailAddress': string\n\n    'HomePhone': string\n\n    'MobilePhone': string\n\n    'Name': NameViewModel\n\n    'Organizations': Array < string >\n        | string\n\n    'Roles': Array < string >\n        | string\n\n    'Sex': string\n\n    'SponsorUserId': string\n\n    'TimeZoneId': string\n\n    'UserPhoto': ImageViewModel\n\n    'Archived': boolean\n\n    'Status': \"Invited\" | \"Activated\"\n\n};\nexport type NameViewModel = {\n    'FirstName': string\n\n    'LastName': string\n\n    'MiddleName': string\n\n    'Prefix': string\n\n    'Suffix': string\n\n};\nexport type ResendUserInvitationsByInvitationCodeBindingModel = {\n    'InvitationCodes': Array < string >\n        | string\n\n    'ChannelTypes': Array < \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\" >\n        | \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n};\nexport type ResendUserInvitationsByDateBindingModel = {\n    'LastSentStartDate': string\n\n    'LastSentEndDate': string\n\n    'ChannelTypes': Array < \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\" >\n        | \"Unknown\" | \"Push\" | \"App\" | \"Email\" | \"Sms\" | \"Api\" | \"Ivr\" | \"None\" | \"ChatBot\"\n\n};\nexport type VideoCallBindingModel = {\n    'RecipientId': string\n\n};\nexport type VideoCallCreateViewModel = {\n    'Token': string\n\n    'RoomId': string\n\n};\nexport type VideoCallViewModel = {\n    'Parties': Array < ActorReadModel >\n        | ActorReadModel\n\n    'RoomId': string\n\n    'VideoCallEndReason': \"FinishedSuccessfully\" | \"NoResponseFromRecipient\" | \"CanceledByCaller\" | \"RejectedByRecipient\"\n\n    'TimeSent': string\n\n    'TimeEnd': string\n\n};\nexport type VideoCallTokenViewModel = {\n    'Token': string\n\n};\nexport type VideoCallEndBindingModel = {\n    'VideoCallEndReason': \"FinishedSuccessfully\" | \"NoResponseFromRecipient\" | \"CanceledByCaller\" | \"RejectedByRecipient\"\n\n};\n\nexport type Logger = {\n    log: (line: string) => any\n};\n\n/**\n * \n * @class ApiClass\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport class ApiClass {\n\n    domain: string = \"\";\n    errorHandlers: CallbackHandler[] = [];\n\n    constructor(domain ? : string, private logger ? : Logger) {\n        if (domain) {\n            this.domain = domain;\n        }\n    }\n\n    getDomain() {\n        return this.domain;\n    }\n\n    addErrorHandler(handler: CallbackHandler) {\n        this.errorHandlers.push(handler);\n    }\n\n    request(method: string, url: string, body: any, headers: any, queryParameters: any, form: any, reject: CallbackHandler, resolve: CallbackHandler) {\n        if (this.logger) {\n            this.logger.log(`Call ${method} ${url}`);\n        }\n\n        let req = (anyRequest.default || anyRequest)(method, url).query(queryParameters);\n\n        Object.keys(headers).forEach(key => {\n            req.set(key, headers[key]);\n        });\n\n        if (body) {\n            req.send(body);\n        }\n\n        if (typeof(body) === 'object' && !(body.constructor.name === 'Buffer')) {\n            req.set('Content-Type', 'application/json');\n        }\n\n        if (Object.keys(form).length > 0) {\n            req.type('form');\n            req.send(form);\n        }\n\n        req.end((error, response) => {\n            if (error || !response.ok) {\n                reject(error);\n                this.errorHandlers.forEach(handler => handler(error));\n            } else {\n                resolve(response);\n            }\n        });\n    }\n\n}\n\nexport default ApiClass;\n\n\n// WEBPACK FOOTER //\n// ./src/lib/api.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Accounts\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Accounts extends ApiClass {\n\n    LookupAccountByUserNameURL(parameters: {\n        userName: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/accounts';\n        if (parameters['userName'] !== undefined) {\n            queryParameters['userName'] = parameters['userName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that looks up information about a specific account for a user.\n     * @method\n     * @name Accounts#LookupAccountByUserName\n     * @param {string} userName - Name of the user.\n     */\n    LookupAccountByUserName(parameters: {\n        userName: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/accounts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            if (parameters['userName'] !== undefined) {\n                queryParameters['userName'] = parameters['userName'];\n            }\n\n            if (parameters['userName'] === undefined) {\n                reject(new Error('Missing required  parameter: userName'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendPasswordResetEmailURL(parameters: {\n        model: Api.PasswordResetViewModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/accounts/passwordreset';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that initiates a password reset for an account holder with a given email address, by\n                    sending a password reset email to that address.\n    * @method\n    * @name Accounts#SendPasswordResetEmail\n         * @param {} model - Model view with only an email address.\n    */\n    SendPasswordResetEmail(parameters: {\n        model: Api.PasswordResetViewModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/accounts/passwordreset';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ResetPasswordWithTokenURL(parameters: {\n        model: Api.ResetPasswordByCodeBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/accounts/password';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that resets a user's password, given that they have a reset token.\n     * @method\n     * @name Accounts#ResetPasswordWithToken\n     * @param {} model - \n     */\n    ResetPasswordWithToken(parameters: {\n        model: Api.ResetPasswordByCodeBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/accounts/password';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/accounts.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Audit\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Audit extends ApiClass {\n\n    GetURL(parameters: {\n        id: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/audit/aggregates/{id}';\n\n        path = path.replace('{id}', `${parameters['id']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves audit information for a system aggregate -\n                    Patient, User, Sponsor, CarePlan, Organization, Distributor, etc.\n    * @method\n    * @name Audit#Get\n         * @param {string} id - The unique ID of the aggregate\n         * @param {string} fromDate - If supplied, retrieves entries that occurred on or after the specified date\n         * @param {string} toDate - If supplied, retrieves entries that occurred on or before the specified date\n         * @param {string} authorization - access token\n    */\n    Get(parameters: {\n        id: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/audit/aggregates/{id}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{id}', `${parameters['id']}`);\n\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/audit.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Beacon\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Beacon extends ApiClass {\n\n    RecordBeaconURL(parameters: {\n        model: Api.RecordBeaconBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/beacons';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is an endpoint for capturing beacons in an authenticated context. The endpoint uses the current user and\n                    the following http headers to create a beacon: \n                    X-FILAMENT-OS-TYPE - The platform operating system\n                    X-FILAMENT-OS-VERSION - The platform operating system's version\n                    X-FILAMENT-APP-VERSION - The version of the Patient IO App\n    * @method\n    * @name Beacon#RecordBeacon\n         * @param {} model - The model containg the type of beacon.\n         * @param {string} authorization - access token\n    */\n    RecordBeacon(parameters: {\n        model: Api.RecordBeaconBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/beacons';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RecordInvitationBeaconURL(parameters: {\n        model: Api.RecordInvitationBeaconBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/beacons/invitations';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is an endpoint for capturing beacons in an unauthenticated context for invitations. The endpoint \n                    uses the following http headers to create a beacon: \n                    X-FILAMENT-OS-TYPE - The platform operating system\n                    X-FILAMENT-OS-VERSION - The platform operating system's version\n                    X-FILAMENT-APP-VERSION - The version of the Patient IO App\n    * @method\n    * @name Beacon#RecordInvitationBeacon\n         * @param {} model - The model containing the type of beacon and the invitation code.\n    */\n    RecordInvitationBeacon(parameters: {\n        model: Api.RecordInvitationBeaconBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/beacons/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/beacon.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Branding\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Branding extends ApiClass {\n\n    GetBrandingURL(parameters: {\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Get the branding for the logged in user.\n     * @method\n     * @name Branding#GetBranding\n     * @param {string} authorization - access token\n     */\n    GetBranding(parameters: {\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorBrandingURL(parameters: {\n        distributorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding/distributors/{distributorId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Gets the branding for a given distributor.\n     * @method\n     * @name Branding#GetDistributorBranding\n     * @param {string} distributorId - The distributor identifier.\n     */\n    GetDistributorBranding(parameters: {\n        distributorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding/distributors/{distributorId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * Gets the combined branding for a given sponsor of a given distributor. \n                    This effectively returns the combination of sponsor and distributor\n                    branding, with a sponsor's branding taking precednece over the distributor\n                    branding.\n    * @method\n    * @name Branding#GetSponsorBranding\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n    */\n    GetSponsorBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetOrganizationBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * Gets the combined branding for a given organization of a given sponsor. \n                    This effectively returns the combination of sponsor and distributor\n                    branding, with a sponsor's branding taking precednece over the distributor\n                    branding.\n    * @method\n    * @name Branding#GetOrganizationBranding\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n    */\n    GetOrganizationBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/branding/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/branding.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class CampaignMonitor\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class CampaignMonitor extends ApiClass {\n\n    GetTransactionalSmartEmailsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/transactional/smartEmail';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Gets a list of all the smart emails for a sponsor.\n     * @method\n     * @name CampaignMonitor#GetTransactionalSmartEmails\n     * @param {string} distributorId - The distributor Id.\n     * @param {string} sponsorId - The sponsor Id.\n     * @param {string} authorization - access token\n     */\n    GetTransactionalSmartEmails(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/transactional/smartEmail';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSubscriberListsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/driplists';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Get a list of all the client's email subscriber list.\n     * @method\n     * @name CampaignMonitor#GetSubscriberLists\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetSubscriberLists(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/campaignmonitor/driplists';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/campaign-monitor.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class CareCenter\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class CareCenter extends ApiClass {\n\n    GetCareCenterContentForDistributorURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets all of the care center content items for a sponsor.\n     * @method\n     * @name CareCenter#GetCareCenterContentForDistributor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} authorization - access token\n     */\n    GetCareCenterContentForDistributor(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddDistributorCareCenterContentURL(parameters: {\n        distributorId: string,\n        model: Api.CareCenterContentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method to create a new distributor care center center content item.\n     * @method\n     * @name CareCenter#AddDistributorCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The care center content model.\n     * @param {string} authorization - access token\n     */\n    AddDistributorCareCenterContent(parameters: {\n        distributorId: string,\n        model: Api.CareCenterContentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCareCenterContentForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets all of the care center content items for a sponsor.\n     * @method\n     * @name CareCenter#GetCareCenterContentForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetCareCenterContentForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCareCenterContentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.CareCenterContentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method to create a new care center center content item.\n     * @method\n     * @name CareCenter#AddCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The care center content model.\n     * @param {string} authorization - access token\n     */\n    AddCareCenterContent(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.CareCenterContentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorCareCenterContentURL(parameters: {\n        distributorId: string,\n        contentId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves an individual piece of care center content, by ID.\n     * @method\n     * @name CareCenter#GetDistributorCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} contentId - The content identifier.\n     */\n    GetDistributorCareCenterContent(parameters: {\n        distributorId: string,\n        contentId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorCareCenterContentURL(parameters: {\n        distributorId: string,\n        contentId: string,\n        model: Api.CareCenterContentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a care center content item.\n     * @method\n     * @name CareCenter#UpdateDistributorCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} contentId - The id of the content item to update.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorCareCenterContent(parameters: {\n        distributorId: string,\n        contentId: string,\n        model: Api.CareCenterContentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorCareCenterContentURL(parameters: {\n        distributorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a care center content item and it's associated media.\n     * @method\n     * @name CareCenter#DeleteDistributorCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} contentId - The content identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorCareCenterContent(parameters: {\n        distributorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCareCenterContentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves an individual piece of care center content, by ID.\n     * @method\n     * @name CareCenter#GetCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} contentId - The content identifier.\n     */\n    GetCareCenterContent(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateCareCenterContentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        model: Api.CareCenterContentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a care center content item.\n     * @method\n     * @name CareCenter#UpdateCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} contentId - The id of the content item to update.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    UpdateCareCenterContent(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        model: Api.CareCenterContentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteCareCenterContentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a care center content item.\n     * @method\n     * @name CareCenter#DeleteCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} contentId - The content identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteCareCenterContent(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadDistributorMediaURL(parameters: {\n        distributorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}/image';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that uploads an arbitrary media item for a sponsor and associated it to a piece of already created\n                    content.\n                    The returned URL points to the uploaded item. Invocation of this method must be done as Mime Multi-part content.\n    * @method\n    * @name CareCenter#UploadDistributorMedia\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} contentId - The content identifier for the content for which to upload media.\n         * @param {string} authorization - access token\n    */\n    UploadDistributorMedia(parameters: {\n        distributorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}/image';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorMediaURL(parameters: {\n        distributorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}/image';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a piece of media based on its URL.\n     * @method\n     * @name CareCenter#DeleteDistributorMedia\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} contentId - The content identifier of the content image to be deleted.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorMedia(parameters: {\n        distributorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/{contentId}/image';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadMediaURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that uploads an arbitrary media item for a sponsor and associated it to a piece of already created\n                    content.\n                    The returned URL points to the uploaded item. Invocation of this method must be done as Mime Multi-part content.\n    * @method\n    * @name CareCenter#UploadMedia\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} contentId - The content identifier for the content for which to upload media.\n         * @param {string} authorization - access token\n    */\n    UploadMedia(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteMediaURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a piece of media based on its URL.\n     * @method\n     * @name CareCenter#DeleteMedia\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} contentId - The content identifier of the content image to be deleted.\n     * @param {string} authorization - access token\n     */\n    DeleteMedia(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        contentId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/{contentId}/image';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{contentId}', `${parameters['contentId']}`);\n\n            if (parameters['contentId'] === undefined) {\n                reject(new Error('Missing required  parameter: contentId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCareCenterContentForCareTeamURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/careteams/{organizationId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves care team members within a given sponsor organization.\n     * @method\n     * @name CareCenter#GetCareCenterContentForCareTeam\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     */\n    GetCareCenterContentForCareTeam(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/careteams/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadDistributorCareCenterContentURL(parameters: {\n        distributorId: string,\n        model: Api.CareCenterContentUploadBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/upload';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates an item of care center content with a document to upload at the sponsor level.\n     * @method\n     * @name CareCenter#UploadDistributorCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The model\n     * @param {string} authorization - access token\n     */\n    UploadDistributorCareCenterContent(parameters: {\n        distributorId: string,\n        model: Api.CareCenterContentUploadBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/content/upload';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadCareCenterContentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.CareCenterContentUploadBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/upload';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates an item of care center content with a document to upload at the sponsor level.\n     * @method\n     * @name CareCenter#UploadCareCenterContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    UploadCareCenterContent(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.CareCenterContentUploadBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/carecenter/content/upload';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCareCenterContentForPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the care center content for patient.\n     * @method\n     * @name CareCenter#GetCareCenterContentForPatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} authorization - access token\n     */\n    GetCareCenterContentForPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCareCenterNodesForPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves all care center content for a patient,\n                    including organization and care team sections.\n    * @method\n    * @name CareCenter#GetCareCenterNodesForPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} authorization - access token\n    */\n    GetCareCenterNodesForPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/carecenter';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/care-center.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class CareCenterInternal\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class CareCenterInternal extends ApiClass {\n\n    GetCareCenterContentForPatientURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/carecenter/content';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the care center content for patient.\n     * @method\n     * @name CareCenterInternal#GetCareCenterContentForPatient\n     * @param {string} patientId - The patient identifier. Must be the Patient IO internal identifier.\n     * @param {string} authorization - access token\n     */\n    GetCareCenterContentForPatient(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/carecenter/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCareCenterNodesForPatientURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/carecenter';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves all care center content for a patient,\n                    including organization and care team sections.\n    * @method\n    * @name CareCenterInternal#GetCareCenterNodesForPatient\n         * @param {string} patientId - The patient identifier.\n         * @param {string} authorization - access token\n    */\n    GetCareCenterNodesForPatient(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/carecenter';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/care-center-internal.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class CarePlans\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class CarePlans extends ApiClass {\n\n    AddCategoriesToCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        categoryIdList: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds categories to a care plan.\n                    Within the dashboard UI, categories are referred to as \"Groups\".\n                    Categories are most frequently used to describe groups of patients.\n    * @method\n    * @name CarePlans#AddCategoriesToCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} categoryIdList - List of category ids to add.\n         * @param {string} authorization - access token\n    */\n    AddCategoriesToCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        categoryIdList: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['categoryIdList'] !== undefined) {\n                body = parameters['categoryIdList'];\n            }\n\n            if (parameters['categoryIdList'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryIdList'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveCategoriesFromCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that removes categories from a care plan. Categories are referred to as groups within\n                    the UI of Patient IO applications.\n    * @method\n    * @name CarePlans#RemoveCategoriesFromCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - List of category ids to remove\n         * @param {string} authorization - access token\n    */\n    RemoveCategoriesFromCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCategoriesToDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        categoryIdList: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds categories to a distributor care plan.\n                    Within the dashboard UI, categories are referred to as \"Groups\".\n                    Categories are most frequently used to describe groups of patients.\n    * @method\n    * @name CarePlans#AddCategoriesToDistributorCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} categoryIdList - List of category ids to add.\n         * @param {string} authorization - access token\n    */\n    AddCategoriesToDistributorCarePlan(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        categoryIdList: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['categoryIdList'] !== undefined) {\n                body = parameters['categoryIdList'];\n            }\n\n            if (parameters['categoryIdList'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryIdList'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveCategoriesFromDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Remove categories fom a distributor care plan\n     * @method\n     * @name CarePlans#RemoveCategoriesFromDistributorCarePlan\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {} model - The list of category Ids.\n     * @param {string} authorization - access token\n     */\n    RemoveCategoriesFromDistributorCarePlan(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ApplyCarePlanSponsorCarePlanIdURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.ValueBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/sponsorcareplanid';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that applies a sponsor assigned id to a care plan.\n                    This is an arbitrary string referred to as the SponsorCarePlanId.\n    * @method\n    * @name CarePlans#ApplyCarePlanSponsorCarePlanId\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The SponsorCarePlanId\n         * @param {string} authorization - access token\n    */\n    ApplyCarePlanSponsorCarePlanId(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.ValueBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/sponsorcareplanid';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves data about a care plan.\n     * @method\n     * @name CarePlans#GetSponsorCarePlan\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    GetSponsorCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CloneCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        carePlanCloneModel: Api.CloneCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that clones a care plan within a sponsor.\n                    This action creates a new and independent clone of the care plan.\n                    The name, categories and plan types of the care plan can be changed.\n    * @method\n    * @name CarePlans#CloneCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} carePlanCloneModel - Model describing new care plan name, CategoryId, PlanTypeId.\n         * @param {string} authorization - access token\n    */\n    CloneCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        carePlanCloneModel: Api.CloneCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['carePlanCloneModel'] !== undefined) {\n                body = parameters['carePlanCloneModel'];\n            }\n\n            if (parameters['carePlanCloneModel'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanCloneModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ArchiveCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that archives a care plan.\n                    Archiving a care plan makes it inaccessible for new assignments\n                    to patients or changes to the care plan. A care plan to which\n                    patients are currently assigned cannot be archived.\n                    Archived care plans can be un-archived.\n                    Personal care plans cannot be archived.\n    * @method\n    * @name CarePlans#ArchiveCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan definition.\n         * @param {string} authorization - access token\n    */\n    ArchiveCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves data about a care plan.\n     * @method\n     * @name CarePlans#GetDistributorCarePlan\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    GetDistributorCarePlan(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CloneDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        carePlanCloneModel: Api.CloneCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that clones a care plan within a sponsor.\n                    This action creates a new and independent clone of the care plan.\n                    The name, categories and plan types of the care plan can be changed.\n    * @method\n    * @name CarePlans#CloneDistributorCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} carePlanCloneModel - Model describing new care plan name, CategoryId, PlanTypeId.\n         * @param {string} authorization - access token\n    */\n    CloneDistributorCarePlan(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        carePlanCloneModel: Api.CloneCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['carePlanCloneModel'] !== undefined) {\n                body = parameters['carePlanCloneModel'];\n            }\n\n            if (parameters['carePlanCloneModel'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanCloneModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ArchiveDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that archives a care plan.\n                    Archiving a care plan makes it inaccessible for new assignments\n                    to patients or changes to the care plan. A care plan to which\n                    patients are currently assigned cannot be archived.\n    * @method\n    * @name CarePlans#ArchiveDistributorCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan definition.\n         * @param {string} authorization - access token\n    */\n    ArchiveDistributorCarePlan(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCarePlansURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a sponsor's care plans. The return set is \n                limited; it does not retrieve all the of the information about a care plan \n                 because sponsors may have a large number of care plans.\n    * @method\n    * @name CarePlans#GetCarePlans\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    GetCarePlans(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlan: Api.CarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates a new sponsor population care plan.\n                    Care plans are always created and \"owned\" in the context of a sponsor.\n    * @method\n    * @name CarePlans#CreateCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} carePlan - The care plan definition.\n         * @param {string} authorization - access token\n    */\n    CreateCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlan: Api.CarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['carePlan'] !== undefined) {\n                body = parameters['carePlan'];\n            }\n\n            if (parameters['carePlan'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlan'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorCarePlansURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a distributor's care plans. The return set is \n                limited; it does not retrieve all the of the information about a care plan \n                 because distributors may have a large number of care plans.\n    * @method\n    * @name CarePlans#GetDistributorCarePlans\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} authorization - access token\n    */\n    GetDistributorCarePlans(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        model: Api.CreateCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates a new distributor population care plan.\n                    Care plans are always created and \"owned\" in the context of a sponsor.\n    * @method\n    * @name CarePlans#CreateDistributorCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {} model - The care plan definition.\n         * @param {string} authorization - access token\n    */\n    CreateDistributorCarePlan(parameters: {\n        distributorId: string,\n        model: Api.CreateCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameDistributorCarePlanURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This method renames a dstributor care plan.\n     * @method\n     * @name CarePlans#RenameDistributorCarePlan\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {} model - The name model.\n     * @param {string} authorization - access token\n     */\n    RenameDistributorCarePlan(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCarePlanURL(parameters: {\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/careplans/{carePlanId}';\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves data about a care plan.\n     * @method\n     * @name CarePlans#GetCarePlan\n     * @param {string} carePlanId - The internal care plan identifier.\n     * @param {string} authorization - access token\n     */\n    GetCarePlan(parameters: {\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCarePlanForDateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        dayOfCare: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/days/{dayOfCare}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves data about a Care Plan for a specific day.\n     * @method\n     * @name CarePlans#GetCarePlanForDate\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} dayOfCare - The day of care in the format yyyy-MM-dd\n     * @param {string} authorization - access token\n     */\n    GetCarePlanForDate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        dayOfCare: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/days/{dayOfCare}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n            if (parameters['dayOfCare'] === undefined) {\n                reject(new Error('Missing required  parameter: dayOfCare'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RecordSupervisorApprovalURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.SignatureBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/approve';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that records the signature of a supervisor, indicating that revisions to a care plan have\n                    been reviewed and approved.\n    * @method\n    * @name CarePlans#RecordSupervisorApproval\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The signature model.\n         * @param {string} authorization - access token\n    */\n    RecordSupervisorApproval(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.SignatureBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/approve';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a care plan.\n     * @method\n     * @name CarePlans#RenameCarePlan\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The name model.\n     * @param {string} authorization - access token\n     */\n    RenameCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/care-plans.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Categories\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Categories extends ApiClass {\n\n    GetCategoriesForDistributorURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets all of the categories within a distributor.\n     * @method\n     * @name Categories#GetCategoriesForDistributor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} authorization - access token\n     */\n    GetCategoriesForDistributor(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCategoryForDistributorURL(parameters: {\n        distributorId: string,\n        categoryModel: Api.CategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates a Category for a distributor.\n                    Categories can be created at the Distributor level and shared\n                    to Sponsors within that Distributor.\n    * @method\n    * @name Categories#CreateCategoryForDistributor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {} categoryModel - Category to be created.\n         * @param {string} authorization - access token\n    */\n    CreateCategoryForDistributor(parameters: {\n        distributorId: string,\n        categoryModel: Api.CategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['categoryModel'] !== undefined) {\n                body = parameters['categoryModel'];\n            }\n\n            if (parameters['categoryModel'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameDistributorCategoryURL(parameters: {\n        distributorId: string,\n        categoryId: string,\n        nameModel: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/categories/{categoryId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a distributor category.\n     * @method\n     * @name Categories#RenameDistributorCategory\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} categoryId - The category identifier.\n     * @param {} nameModel - The name binding model.\n     * @param {string} authorization - access token\n     */\n    RenameDistributorCategory(parameters: {\n        distributorId: string,\n        categoryId: string,\n        nameModel: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/categories/{categoryId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n            if (parameters['categoryId'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryId'));\n                return;\n            }\n\n            if (parameters['nameModel'] !== undefined) {\n                body = parameters['nameModel'];\n            }\n\n            if (parameters['nameModel'] === undefined) {\n                reject(new Error('Missing required  parameter: nameModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCategoriesForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets all of the categories within a sponsor.\n     * @method\n     * @name Categories#GetCategoriesForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetCategoriesForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCategoryForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        categoryModel: Api.CategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a category with a sponsor.\n     * @method\n     * @name Categories#CreateCategoryForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} categoryModel - Category to be created.\n     * @param {string} authorization - access token\n     */\n    CreateCategoryForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        categoryModel: Api.CategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['categoryModel'] !== undefined) {\n                body = parameters['categoryModel'];\n            }\n\n            if (parameters['categoryModel'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameCategoryURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        categoryId: string,\n        categoryName: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories/{categoryId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a category within a sponsor.\n     * @method\n     * @name Categories#RenameCategory\n     * @param {string} distributorId - The distributor Id.\n     * @param {string} sponsorId - The sponsor Id.\n     * @param {string} categoryId - The category Id.\n     * @param {} categoryName - The categoryName\n     * @param {string} authorization - access token\n     */\n    RenameCategory(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        categoryId: string,\n        categoryName: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/categories/{categoryId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n            if (parameters['categoryId'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryId'));\n                return;\n            }\n\n            if (parameters['categoryName'] !== undefined) {\n                body = parameters['categoryName'];\n            }\n\n            if (parameters['categoryName'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryName'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/categories.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class ChatBot\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class ChatBot extends ApiClass {\n\n    GetDistributorChatBotContextModelURL(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves a Distributor's chat bot context.\n     * @method\n     * @name ChatBot#GetDistributorChatBotContextModel\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorChatBotContextModel(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorChatBotContextModelURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves a Sponsor's chat bot context.\n     * @method\n     * @name ChatBot#GetSponsorChatBotContextModel\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {string} authorization - access token\n     */\n    GetSponsorChatBotContextModel(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetAllSponsorChatBotContextModelsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/context/all';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Get all of the Chat Bot Contexts associated with a sponsor and distributor.\n     * @method\n     * @name ChatBot#GetAllSponsorChatBotContextModels\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetAllSponsorChatBotContextModels(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/context/all';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorBotAsyncURL(parameters: {\n        distributorId: string,\n        model: Api.ChatBotCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/bot';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Create a distributor level bot.\n     * @method\n     * @name ChatBot#CreateDistributorBotAsync\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The create binding model for the bot.\n     * @param {string} authorization - access token\n     */\n    CreateDistributorBotAsync(parameters: {\n        distributorId: string,\n        model: Api.ChatBotCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/bot';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateChatBotDistributorContextURL(parameters: {\n        distributorId: string,\n        model: Api.ChatBotContextCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Creates a new Distributor Chat Bot context.\n     * @method\n     * @name ChatBot#CreateChatBotDistributorContext\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The chat bot context create binding model.\n     * @param {string} authorization - access token\n     */\n    CreateChatBotDistributorContext(parameters: {\n        distributorId: string,\n        model: Api.ChatBotContextCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateChatBotSponsorContextURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ChatBotContextCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Creates a new Sponsor Chat Bot context.\n     * @method\n     * @name ChatBot#CreateChatBotSponsorContext\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The chat bot context create binding model.\n     * @param {string} authorization - access token\n     */\n    CreateChatBotSponsorContext(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ChatBotContextCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddDistributorChatBotContextItemURL(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Create a Distributor's chat bot context item.\n     * @method\n     * @name ChatBot#AddDistributorChatBotContextItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    AddDistributorChatBotContextItem(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddSponsorChatBotContextItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Create a Sponsor's chat bot context item.\n     * @method\n     * @name ChatBot#AddSponsorChatBotContextItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    AddSponsorChatBotContextItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendChatBotResponseFeedbackURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        model: Api.ChatBotResponseFeedbackBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}/feedback';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Provide feedback on a chat bot response\n     * @method\n     * @name ChatBot#SendChatBotResponseFeedback\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} chatBotContextId - The chat bot context identifier\n     * @param {string} chatBotContextItemId - The chat bot context item identifier\n     * @param {} model - The chat bot response feedback model\n     * @param {string} authorization - access token\n     */\n    SendChatBotResponseFeedback(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        model: Api.ChatBotResponseFeedbackBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}/feedback';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n            if (parameters['chatBotContextItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextItemId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorChatBotContextItemURL(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Edit a Distributor's chat bot context item.\n     * @method\n     * @name ChatBot#UpdateDistributorChatBotContextItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {string} chatBotContextItemId - The chatbot context item identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorChatBotContextItem(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n            if (parameters['chatBotContextItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextItemId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorChatBotContextItemURL(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Delete a Distributor's chat bot context item.\n     * @method\n     * @name ChatBot#DeleteDistributorChatBotContextItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {string} chatBotContextItemId - The chatbot context item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorChatBotContextItem(parameters: {\n        distributorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n            if (parameters['chatBotContextItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorChatBotContextItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Edit a Sponsor's chat bot context item.\n     * @method\n     * @name ChatBot#UpdateSponsorChatBotContextItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {string} chatBotContextItemId - The chatbot context item identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    UpdateSponsorChatBotContextItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        model: Api.ChatBotContextItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n            if (parameters['chatBotContextItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextItemId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteSponsorChatBotContextItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n        path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Delete a Sponsor's chat bot context item.\n     * @method\n     * @name ChatBot#DeleteSponsorChatBotContextItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} chatBotContextId - The chatbot context identifier.\n     * @param {string} chatBotContextItemId - The chatbot context item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteSponsorChatBotContextItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        chatBotContextId: string,\n        chatBotContextItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/chatbot/{chatBotContextId}/items/{chatBotContextItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextId}', `${parameters['chatBotContextId']}`);\n\n            if (parameters['chatBotContextId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextId'));\n                return;\n            }\n\n            path = path.replace('{chatBotContextItemId}', `${parameters['chatBotContextItemId']}`);\n\n            if (parameters['chatBotContextItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: chatBotContextItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/chat-bot.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class ClientDataExport\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class ClientDataExport extends ApiClass {\n\n    GetPatientsCarePlansURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves data describing the precise definition\n                    of the care plan assigned to each patient within a sponsor.\n    * @method\n    * @name ClientDataExport#GetPatientsCarePlans\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    GetPatientsCarePlans(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientTaskDataExtractURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.CreatePatientTaskDataExtractBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves all the ScheduledTasks assigned to\n                    patients within a sponsor, along with the outcomes of those ScheduledTasks\n                    covering a specific date range. If no dates are provided, the results will\n                    cover the last 30 days.\n    * @method\n    * @name ClientDataExport#CreatePatientTaskDataExtract\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The model.\n         * @param {string} authorization - access token\n    */\n    CreatePatientTaskDataExtract(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.CreatePatientTaskDataExtractBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientsTaskCompletionURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskName: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['taskName'] !== undefined) {\n            queryParameters['taskName'] = parameters['taskName'];\n        }\n\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the completion state of a specific task over a time range.\n     * @method\n     * @name ClientDataExport#GetPatientsTaskCompletion\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskName - The name of the task.\n     * @param {string} fromDate - From date (inclusive).\n     * @param {string} toDate - To date (inclusive).\n     * @param {string} authorization - access token\n     */\n    GetPatientsTaskCompletion(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskName: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml, text/csv';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['taskName'] !== undefined) {\n                queryParameters['taskName'] = parameters['taskName'];\n            }\n\n            if (parameters['taskName'] === undefined) {\n                reject(new Error('Missing required  parameter: taskName'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetActiveUsersInformationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves the list of users for a given distributor/sponsor.\n     * @method\n     * @name ClientDataExport#GetActiveUsersInformation\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetActiveUsersInformation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/client-data-export.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class ConversationLists\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class ConversationLists extends ApiClass {\n\n    GetSponsorOrganizationConversationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters['tags'] !== undefined) {\n            queryParameters['tags'] = parameters['tags'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a list of all of a sponsor's organization conversations,\n                    optionally within a specified date range. The organization list is constrained to the organizations\n                    which the calling user has a right to view.\n    * @method\n    * @name ConversationLists#GetSponsorOrganizationConversations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be\n                    omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive.\n                    May be omitted.\n         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of\n                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in\n                    the list,\n                    all tags must be present on the conversation in order for it to be included. Parameter is optional.\n         * @param {string} authorization - access token\n    */\n    GetSponsorOrganizationConversations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['tags'] !== undefined) {\n                queryParameters['tags'] = parameters['tags'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorOrganizationConversationsMetaDataURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations/metadata';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves metadata about all the conversations in a sponsor's organizations.\n                    The organizations are constrained to those the caller can see.\n    * @method\n    * @name ConversationLists#GetSponsorOrganizationConversationsMetaData\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    GetSponsorOrganizationConversationsMetaData(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/conversations/metadata';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetOrganizationConversationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters['tags'] !== undefined) {\n            queryParameters['tags'] = parameters['tags'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a list of all of an organization's conversations, optionally within a specified date range.\n    * @method\n    * @name ConversationLists#GetOrganizationConversations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be\n                    omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of\n                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in\n                    the list,\n                    all tags must be present on the conversation in order for it to be included. Parameter is optional.\n         * @param {string} authorization - access token\n    */\n    GetOrganizationConversations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['tags'] !== undefined) {\n                queryParameters['tags'] = parameters['tags'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetUserConversationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters['tags'] !== undefined) {\n            queryParameters['tags'] = parameters['tags'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a list of all of a user's conversations, optionally within a specified date range.\n    * @method\n    * @name ConversationLists#GetUserConversations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of\n                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in\n                    the list,\n                    all tags must be present on the conversation in order for it to be included. Parameter is optional.\n         * @param {string} authorization - access token\n    */\n    GetUserConversations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['tags'] !== undefined) {\n                queryParameters['tags'] = parameters['tags'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientConversationsURL(parameters: {\n        patientId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters['tags'] !== undefined) {\n            queryParameters['tags'] = parameters['tags'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a list of all of a patient's conversations, optionally within a specified date range.\n    * @method\n    * @name ConversationLists#GetPatientConversations\n         * @param {string} patientId - The patient identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of\n                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in\n                    the list,\n                    all tags must be present on the conversation in order for it to be included. Parameter is optional\n         * @param {string} authorization - access token\n    */\n    GetPatientConversations(parameters: {\n        patientId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['tags'] !== undefined) {\n                queryParameters['tags'] = parameters['tags'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientConversationsSponsorIdentifierURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters['tags'] !== undefined) {\n            queryParameters['tags'] = parameters['tags'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a list of all of a patient's conversations, optionally within a specified date range.\n    * @method\n    * @name ConversationLists#GetPatientConversationsSponsorIdentifier\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} tags - A CSV list of tags that may be used to filter which conversations are returned. Placing an ! in front of\n                    a tag (e.g. !Inbox) will result in conversations with that tag being excluded. If more than one tag is present in\n                    the list,\n                    all tags must be present on the conversation in order for it to be included. Parameter is optional\n         * @param {string} authorization - access token\n    */\n    GetPatientConversationsSponsorIdentifier(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        tags ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['tags'] !== undefined) {\n                queryParameters['tags'] = parameters['tags'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/conversation-lists.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class ConversationParties\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class ConversationParties extends ApiClass {\n\n    GetMessageablePartiesForPatientExternalURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations/messageable';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the patient's list of messageable parties.\n     * @method\n     * @name ConversationParties#GetMessageablePartiesForPatientExternal\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} authorization - access token\n     */\n    GetMessageablePartiesForPatientExternal(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/conversations/messageable';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetMessageablePartiesForPatientURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/messageable';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the patient's list of messageable parties.\n     * @method\n     * @name ConversationParties#GetMessageablePartiesForPatient\n     * @param {string} patientId - The patient identifier, must be the internal identifier to Patient IO.\n     * @param {string} authorization - access token\n     */\n    GetMessageablePartiesForPatient(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/messageable';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetMessageablePatientsForUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/messageable';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a user's list of messageable parties\n     * @method\n     * @name ConversationParties#GetMessageablePatientsForUser\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier.\n     * @param {string} authorization - access token\n     */\n    GetMessageablePatientsForUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/messageable';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetMessageablePatientsForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/messageable';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets an organization's list of messageable parties (patients).\n     * @method\n     * @name ConversationParties#GetMessageablePatientsForOrganization\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The user identifier.\n     * @param {string} authorization - access token\n     */\n    GetMessageablePatientsForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/messageable';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/conversation-parties.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Conversations\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Conversations extends ApiClass {\n\n    GetOrganizationConversationWithPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        organizationId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets an organization's conversation with a patient (from the organization's perspective). Optionally,\n                    it can retrieve only those messages within a specified date range.\n    * @method\n    * @name Conversations#GetOrganizationConversationWithPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be\n                    omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} authorization - access token\n    */\n    GetOrganizationConversationWithPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        organizationId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationConversationStatusURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        organizationId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the state of an organization's conversation with a patient.\n     * @method\n     * @name Conversations#UpdateOrganizationConversationStatus\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The conversation model.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationConversationStatus(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        organizationId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendMessageFromOrganizationToPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        patientId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sends a message from an organization to a patient.\n     * @method\n     * @name Conversations#SendMessageFromOrganizationToPatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {} messageModel - The message.\n     * @param {string} authorization - access token\n     */\n    SendMessageFromOrganizationToPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        patientId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['messageModel'] !== undefined) {\n                body = parameters['messageModel'];\n            }\n\n            if (parameters['messageModel'] === undefined) {\n                reject(new Error('Missing required  parameter: messageModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetUserConversationWithPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        userId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a user's conversation with a patient (from the user's perspective). Optionally,\n                    it can retrieve only those messages within a specified date range.\n    * @method\n    * @name Conversations#GetUserConversationWithPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} userId - The user identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be\n                    omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} authorization - access token\n    */\n    GetUserConversationWithPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        userId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateUserConversationStateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        userId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the state of an user's conversation with a patient.\n     * @method\n     * @name Conversations#UpdateUserConversationState\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} userId - The organization identifier.\n     * @param {} model - The conversation model.\n     * @param {string} authorization - access token\n     */\n    UpdateUserConversationState(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        userId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendMessageFromUserToPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sends a message from a user to a patient.\n     * @method\n     * @name Conversations#SendMessageFromUserToPatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The organization identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {} messageModel - The message.\n     * @param {string} authorization - access token\n     */\n    SendMessageFromUserToPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['messageModel'] !== undefined) {\n                body = parameters['messageModel'];\n            }\n\n            if (parameters['messageModel'] === undefined) {\n                reject(new Error('Missing required  parameter: messageModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientConversationWithOrganizationURL(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a patient's conversation with an organization (from the patient's perspective). Optionally,\n                    it can retrieve only those messages within a specified date range.\n    * @method\n    * @name Conversations#GetPatientConversationWithOrganization\n         * @param {string} patientId - The patient identifier.\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be\n                    omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} authorization - access token\n    */\n    GetPatientConversationWithOrganization(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientConversationWithOrganizationStatusURL(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the state of a patient's conversation with an organization.\n     * @method\n     * @name Conversations#UpdatePatientConversationWithOrganizationStatus\n     * @param {string} patientId - The patient identifier.\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The conversation model.\n     * @param {string} authorization - access token\n     */\n    UpdatePatientConversationWithOrganizationStatus(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendMessageFromPatientToOrganizationURL(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sends a message from a patient to an organization.\n     * @method\n     * @name Conversations#SendMessageFromPatientToOrganization\n     * @param {string} patientId - The patient identifier.\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsors identifier.\n     * @param {string} organizationId - The org identifier.\n     * @param {} messageModel - The message.\n     * @param {string} authorization - access token\n     */\n    SendMessageFromPatientToOrganization(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['messageModel'] !== undefined) {\n                body = parameters['messageModel'];\n            }\n\n            if (parameters['messageModel'] === undefined) {\n                reject(new Error('Missing required  parameter: messageModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientConversationWithUserURL(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n        if (parameters['fromDateTime'] !== undefined) {\n            queryParameters['fromDateTime'] = parameters['fromDateTime'];\n        }\n\n        if (parameters['toDateTime'] !== undefined) {\n            queryParameters['toDateTime'] = parameters['toDateTime'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a patient's conversation with a user (from the patient's perspective). Optionally,\n                    it can retrieve only those messages within a specified date range.\n    * @method\n    * @name Conversations#GetPatientConversationWithUser\n         * @param {string} patientId - The patient identifier.\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The organization identifier.\n         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be\n                    omitted.\n         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.\n         * @param {string} authorization - access token\n    */\n    GetPatientConversationWithUser(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        fromDateTime ? : string,\n        toDateTime ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['fromDateTime'] !== undefined) {\n                queryParameters['fromDateTime'] = parameters['fromDateTime'];\n            }\n\n            if (parameters['toDateTime'] !== undefined) {\n                queryParameters['toDateTime'] = parameters['toDateTime'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientConversationWithUserStatusURL(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the state of a patient's conversation with an user.\n     * @method\n     * @name Conversations#UpdatePatientConversationWithUserStatus\n     * @param {string} patientId - The patient identifier.\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The organization identifier.\n     * @param {} model - The conversation model.\n     * @param {string} authorization - access token\n     */\n    UpdatePatientConversationWithUserStatus(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.ConversationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendMessageFromPatientToUserURL(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sends a message from a patient to an user.\n     * @method\n     * @name Conversations#SendMessageFromPatientToUser\n     * @param {string} patientId - The patient identifier.\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsors identifier.\n     * @param {string} userId - The org identifier.\n     * @param {} messageModel - The message.\n     * @param {string} authorization - access token\n     */\n    SendMessageFromPatientToUser(parameters: {\n        patientId: string,\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        messageModel: Api.MessageCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['messageModel'] !== undefined) {\n                body = parameters['messageModel'];\n            }\n\n            if (parameters['messageModel'] === undefined) {\n                reject(new Error('Missing required  parameter: messageModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/conversations.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Distributors\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Distributors extends ApiClass {\n\n    ChangeDistributorSettingsURL(parameters: {\n        distributorId: string,\n        model: Api.DistributorSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/settings';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sets the settings for a distributor.\n     * @method\n     * @name Distributors#ChangeDistributorSettings\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    ChangeDistributorSettings(parameters: {\n        distributorId: string,\n        model: Api.DistributorSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/settings';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateAuthorizationCodeURL(parameters: {\n        distributorId: string,\n        authCodeModel: Api.AuthorizationCodeBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/authorizationcodes';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates an authorization code. An authorization code can be used to allow a Patient\n                    to self-register with Patient IO in connection with a sponsor.\n    * @method\n    * @name Distributors#CreateAuthorizationCode\n         * @param {string} distributorId - The distributor identifier.\n         * @param {} authCodeModel - Describes the sponsor and the authorization code.\n         * @param {string} authorization - access token\n    */\n    CreateAuthorizationCode(parameters: {\n        distributorId: string,\n        authCodeModel: Api.AuthorizationCodeBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/authorizationcodes';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authCodeModel'] !== undefined) {\n                body = parameters['authCodeModel'];\n            }\n\n            if (parameters['authCodeModel'] === undefined) {\n                reject(new Error('Missing required  parameter: authCodeModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteAuthorizationCodeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorizationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes/{authorizationCode}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes an authorization code.\n     * @method\n     * @name Distributors#DeleteAuthorizationCode\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorizationCode - The authorization code to remove.\n     * @param {string} authorization - access token\n     */\n    DeleteAuthorizationCode(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorizationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes/{authorizationCode}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);\n\n            if (parameters['authorizationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: authorizationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorURL(parameters: {\n        distributorModel: Api.DistributorBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates the distributor.\n     * @method\n     * @name Distributors#CreateDistributor\n     * @param {} distributorModel - Distributor to be created\n     * @param {string} authorization - access token\n     */\n    CreateDistributor(parameters: {\n        distributorModel: Api.DistributorBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['distributorModel'] !== undefined) {\n                body = parameters['distributorModel'];\n            }\n\n            if (parameters['distributorModel'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorsForDistributorURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a list of sponsors within a distributor.\n     * @method\n     * @name Distributors#GetSponsorsForDistributor\n     * @param {string} distributorId - The distributor id.\n     * @param {string} authorization - access token\n     */\n    GetSponsorsForDistributor(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorURL(parameters: {\n        distributorId: string,\n        sponsorModel: Api.SponsorBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a Sponsor within a distributor.\n     * @method\n     * @name Distributors#CreateSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} sponsorModel - The sponsor to be created.\n     * @param {string} authorization - access token\n     */\n    CreateSponsor(parameters: {\n        distributorId: string,\n        sponsorModel: Api.SponsorBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['sponsorModel'] !== undefined) {\n                body = parameters['sponsorModel'];\n            }\n\n            if (parameters['sponsorModel'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorModel'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorBrandingURL(parameters: {\n        distributorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the branding for the sponsor.\n     * @method\n     * @name Distributors#GetDistributorBranding\n     * @param {string} distributorId - The distributor identifier.\n     */\n    GetDistributorBranding(parameters: {\n        distributorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorBrandingURL(parameters: {\n        distributorId: string,\n        model: Api.BrandingBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates branding within a distributor.\n     * @method\n     * @name Distributors#UpdateDistributorBranding\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The sponsor to be created.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorBranding(parameters: {\n        distributorId: string,\n        model: Api.BrandingBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorBrandingURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes Distributor level branding.\n                    Branding describes how dynamic white labeling\n                    functionality works at the distributor level.\n    * @method\n    * @name Distributors#DeleteDistributorBranding\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} authorization - access token\n    */\n    DeleteDistributorBranding(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets information about a Distributor -\n                    all the sponsors, categories and other items.\n    * @method\n    * @name Distributors#GetDistributor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} authorization - access token\n    */\n    GetDistributor(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gives a new name to a sponsor within a distributor.\n     * @method\n     * @name Distributors#RenameSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    RenameSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadDistributorBrandingEmailLogoURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding/emaillogo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding email logo for the distributor.\n     * @method\n     * @name Distributors#UploadDistributorBrandingEmailLogo\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} authorization - access token\n     */\n    UploadDistributorBrandingEmailLogo(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding/emaillogo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadDistributorBrandingLogoURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding/logo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding logo for the distributor.\n     * @method\n     * @name Distributors#UploadDistributorBrandingLogo\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} authorization - access token\n     */\n    UploadDistributorBrandingLogo(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/branding/logo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/distributors.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class IntegrationManagement\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class IntegrationManagement extends ApiClass {\n\n    AddExportFileRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ExportFileRecordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds an export file record for a sponsor.\n                    This record specifies the exact internal PatientIO components to\n                    be used to push an automated export of PatientIO data to a\n                    client system.\n    * @method\n    * @name IntegrationManagement#AddExportFileRecord\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The model.\n         * @param {string} authorization - access token\n    */\n    AddExportFileRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ExportFileRecordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteExportFileRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fileName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fileName'] !== undefined) {\n            queryParameters['fileName'] = parameters['fileName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an export file record.\n     * @method\n     * @name IntegrationManagement#DeleteExportFileRecord\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} fileName - Name of the file.\n     * @param {string} authorization - access token\n     */\n    DeleteExportFileRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fileName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/exportfiles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fileName'] !== undefined) {\n                queryParameters['fileName'] = parameters['fileName'];\n            }\n\n            if (parameters['fileName'] === undefined) {\n                reject(new Error('Missing required  parameter: fileName'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddImportFileRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ImportFileRecordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds an import file record. The Import\n                    File Record describes where on a customer's external system\n                    data to be imported into PatientIO is located, and how that\n                    data is to be processed within PatientIO.\n    * @method\n    * @name IntegrationManagement#AddImportFileRecord\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The model.\n         * @param {string} authorization - access token\n    */\n    AddImportFileRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ImportFileRecordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteImportFileRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fileName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fileName'] !== undefined) {\n            queryParameters['fileName'] = parameters['fileName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an import file record.\n     * @method\n     * @name IntegrationManagement#DeleteImportFileRecord\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} fileName - Name of the file.\n     * @param {string} authorization - access token\n     */\n    DeleteImportFileRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fileName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/importfiles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fileName'] !== undefined) {\n                queryParameters['fileName'] = parameters['fileName'];\n            }\n\n            if (parameters['fileName'] === undefined) {\n                reject(new Error('Missing required  parameter: fileName'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetIntegrationManagementDataURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves all integration management data for a sponsor.\n     * @method\n     * @name IntegrationManagement#GetIntegrationManagementData\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetIntegrationManagementData(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteIntegrationManagementDataURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes all integration management data for a sponsor.\n     * @method\n     * @name IntegrationManagement#DeleteIntegrationManagementData\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteIntegrationManagementData(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateIntegrationManagementCredentialsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.IntegrationManagementCredentialBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/credentials';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates or creates integration management credentials for a sponsor.\n                    These credentials are used to authenticate Patient IO automated processes with external\n                    customer systems.\n    * @method\n    * @name IntegrationManagement#UpdateIntegrationManagementCredentials\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The integration management credential model.\n         * @param {string} authorization - access token\n    */\n    UpdateIntegrationManagementCredentials(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.IntegrationManagementCredentialBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/integration/credentials';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/integration-management.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Invitations\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Invitations extends ApiClass {\n\n    GetInvitationURL(parameters: {\n        invitationCode: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/invitations/{invitationCode}';\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrives information about a specific invitation.\n     * @method\n     * @name Invitations#GetInvitation\n     * @param {string} invitationCode - The invitation code.\n     */\n    GetInvitation(parameters: {\n        invitationCode: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/invitations/{invitationCode}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GenerateActivationCodeURL(parameters: {\n        invitationCode: string,\n        model: Api.GenerateActivationCodeBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/invitations/{invitationCode}/activationcode';\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that generates and sends the two factor activation code.\n     * @method\n     * @name Invitations#GenerateActivationCode\n     * @param {string} invitationCode - The invitation code.\n     * @param {} model - The model.\n     */\n    GenerateActivationCode(parameters: {\n        invitationCode: string,\n        model: Api.GenerateActivationCodeBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/invitations/{invitationCode}/activationcode';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/invitations.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Patient\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Patient extends ApiClass {\n\n    IsPatientDeactivatedURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        sponsorPatientId: string,\n        dateOfBirth: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['sponsorPatientId'] !== undefined) {\n            queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];\n        }\n\n        if (parameters['dateOfBirth'] !== undefined) {\n            queryParameters['dateOfBirth'] = parameters['dateOfBirth'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that determines whether the patient is deactivated.\n     * @method\n     * @name Patient#IsPatientDeactivated\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} sponsorPatientId - The sponsor patient identifier.\n     * @param {string} dateOfBirth - The date of birth.\n     */\n    IsPatientDeactivated(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        sponsorPatientId: string,\n        dateOfBirth: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['sponsorPatientId'] !== undefined) {\n                queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];\n            }\n\n            if (parameters['sponsorPatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorPatientId'));\n                return;\n            }\n\n            if (parameters['dateOfBirth'] !== undefined) {\n                queryParameters['dateOfBirth'] = parameters['dateOfBirth'];\n            }\n\n            if (parameters['dateOfBirth'] === undefined) {\n                reject(new Error('Missing required  parameter: dateOfBirth'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ActivateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ActivatePatientDobSponsorPatientIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that activates a patient which is currently in inactive state.\n     * @method\n     * @name Patient#Activate\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The activate patient with date of birth and sponsor patient id model.\n     */\n    Activate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ActivatePatientDobSponsorPatientIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/activate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientCarePlansURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves all care plans to which a patient has access\n     * @method\n     * @name Patient#GetPatientCarePlans\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    GetPatientCarePlans(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCarePlansToPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.SponsorIdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that associates a care plan to a patient. A patient can be\n                    associated to multiple care plans. A care plan is not owned by a patient\n                    unless it is a \"personal care plan.\" A patient can have only one personal \n                    care plan per sponsor.\n    * @method\n    * @name Patient#AddCarePlansToPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The list of care plans to assign to the patient.\n         * @param {string} authorization - access token\n    */\n    AddCarePlansToPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.SponsorIdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CloneCarePlanToPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.CloneCarePlanToPatientBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that clones a care plan to a patient, creating a personal care plan for that patient.\n                    The personal care plan will be an exact copy of the cloned care plan.\n    * @method\n    * @name Patient#CloneCarePlanToPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - Identifies the care plan to be cloned to the patient and how the operation should occur.\n         * @param {string} authorization - access token\n    */\n    CloneCarePlanToPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.CloneCarePlanToPatientBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCategoriesToPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds categories to the patient.\n                    Categories are known as groups within the dashboard UI.\n    * @method\n    * @name Patient#AddCategoriesToPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The categories to assign to the patient.\n         * @param {string} authorization - access token\n    */\n    AddCategoriesToPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AffiliatePatientFromOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that affiliates a patient to an organization or\n                    multiple organizations.\n    * @method\n    * @name Patient#AffiliatePatientFromOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The list of organization ids to assign.\n         * @param {string} authorization - access token\n    */\n    AffiliatePatientFromOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ArchivePatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/archive';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that archives a patient record, putting it into a state where it\n                    cannot be authenticated modified or accessed. This takes place in the context of\n                    a sponsor, so the patient may be active in other sponsors. Patient's cannot be \n                    archived while they are associated with population level care plans for the sponsor.\n    * @method\n    * @name Patient#ArchivePatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    ArchivePatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/archive';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetBroadcastToPatientsShortCodesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the list of broadcast to patients short codes.\n     * @method\n     * @name Patient#GetBroadcastToPatientsShortCodes\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetBroadcastToPatientsShortCodes(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    BroadcastToPatientsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PatientBroadcastModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that broadcasts a message to a list of patients through\n                    either push, email, or sms.\n    * @method\n    * @name Patient#BroadcastToPatients\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The patient broadcast model.\n         * @param {string} authorization - access token\n    */\n    BroadcastToPatients(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PatientBroadcastModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/broadcast';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    BulkUpdateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SponsorEntityIdBulkPatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/bulkUpdate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that allows a care team member to bulk manage patients. \n                    The user can specify a collection of patients by ID to be managed. \n                    Supported operations include adding/removing the care plans, adding/removing\n                    the categories, and changing the organization of each patient in the collection.\n    * @method\n    * @name Patient#BulkUpdate\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The bulk patient update model.\n         * @param {string} authorization - access token\n    */\n    BulkUpdate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SponsorEntityIdBulkPatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/bulkUpdate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePasswordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/password';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that allows a patient to change his password.\n                    This API relies on the call used being authorized in the system\n                    and knowing the existing password. Higher privilege users may\n                    reset the password using this API without knowing the\n                    existing password.\n    * @method\n    * @name Patient#ChangePassword\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n                    This must match authenticated user, except for those with higher\n                    privilege levels than the patient.\n         * @param {} model - The old and new passwords.\n         * @param {string} authorization - access token\n    */\n    ChangePassword(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/password';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePatientRoleURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.PatientChangeRoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/roles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes a patient's role.\n     * @method\n     * @name Patient#ChangePatientRole\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The patient change model.\n     * @param {string} authorization - access token\n     */\n    ChangePatientRole(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.PatientChangeRoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePatientSettingsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.PatientSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/settings';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes a patient's settings.\n     * @method\n     * @name Patient#ChangePatientSettings\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The patient settings model.\n     * @param {string} authorization - access token\n     */\n    ChangePatientSettings(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.PatientSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/settings';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ClearPatientAlertsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/alerts';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that clears all active alerts on the patient.\n     * @method\n     * @name Patient#ClearPatientAlerts\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    ClearPatientAlerts(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/alerts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientsForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of all patients for a particular sponsor.\n                    Constraints on the list are based on the caller's access permissions.\n    * @method\n    * @name Patient#GetPatientsForSponsor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n         * @param {string} authorization - access token\n    */\n    GetPatientsForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PatientCreateBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a new patient record using an authorization code.\n     * @method\n     * @name Patient#CreatePatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The model describing the patient record to be created.\n     */\n    CreatePatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PatientCreateBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/patient';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * Create a Patient care plan for a patient. Only a patient can\n                create a Patient care plan.\n    * @method\n    * @name Patient#CreatePatientCarePlan\n         * @param {string} distributorId - \n         * @param {string} sponsorId - \n         * @param {string} patientId - \n         * @param {string} authorization - access token\n    */\n    CreatePatientCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/patient';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientInFilamentDistributorURL(parameters: {\n        model: Api.PatientCreateBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates a new patient record within the filament distributor\n                    using an authorization code.\n    * @method\n    * @name Patient#CreatePatientInFilamentDistributor\n         * @param {} model - The model describing the patient record to be created.\n    */\n    CreatePatientInFilamentDistributor(parameters: {\n        model: Api.PatientCreateBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePersonalCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AddPersonalCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/personal';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a personal care plan, which will initially have no content.\n     * @method\n     * @name Patient#CreatePersonalCarePlan\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The model describing the personal care plan.\n     * @param {string} authorization - access token\n     */\n    CreatePersonalCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AddPersonalCarePlanBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/personal';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeactivateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/deactivate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deactivates a patient. Deactivating a patient puts them into a state\n                    where the patient cannot login unless the patient is activated by supplying\n                    secret properties, by default the SponsorPatientId and patient's recorded date of birth.\n    * @method\n    * @name Patient#Deactivate\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    Deactivate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/deactivate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReactivateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/reactivate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that reactivates a patient.\n     * @method\n     * @name Patient#Reactivate\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    Reactivate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/reactivate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves patient data.\n                    The data is constrained by caller access permissions.\n    * @method\n    * @name Patient#GetPatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    GetPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.PatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates the patient's information. If user name and email\n                    address are to be changed, set NewUserName, leaving UserName as the original user name.\n    * @method\n    * @name Patient#UpdatePatient\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The patient update model.\n         * @param {string} authorization - access token\n    */\n    UpdatePatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.PatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeletePatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that permanently and finally deletes a patient record.\n     * @method\n     * @name Patient#DeletePatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    DeletePatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadPhotoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds or updates a photo for the patient.\n                    This endpoint requires use of mime multipart content, not json.\n    * @method\n    * @name Patient#UploadPhoto\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    UploadPhoto(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeletePhotoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a patient's profile photo.\n     * @method\n     * @name Patient#DeletePhoto\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    DeletePhoto(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetAlertedPatientsForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/alerted';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of all alerted patients for a particular organization.\n                    Constraints on the list are based on the caller's access permissions.\n    * @method\n    * @name Patient#GetAlertedPatientsForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} authorization - access token\n    */\n    GetAlertedPatientsForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/alerted';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetAlertedPatientsForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/alerted';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of all alerted patients for a particular sponsor.\n                    Constraints on the list are based on the caller's access permissions.\n    * @method\n    * @name Patient#GetAlertedPatientsForSponsor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    GetAlertedPatientsForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/alerted';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetArchivedPatientsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/archived-patients';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of all archived patients for a particular sponsor.\n                    Archived patients may still be active for other sponsors, but are inactive for this sponsor.\n    * @method\n    * @name Patient#GetArchivedPatients\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    GetArchivedPatients(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/archived-patients';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCompletedTaskReadModelsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves tasks a patient has completed.\n     * @method\n     * @name Patient#GetCompletedTaskReadModels\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    GetCompletedTaskReadModels(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientSchedulableTasksURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedulable';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method to retrives tasks that a patient may assign.\n     * @method\n     * @name Patient#GetPatientSchedulableTasks\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifer.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} authorization - access token\n     */\n    GetPatientSchedulableTasks(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedulable';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientsForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of all patients for a particular sponsor that are\n                    associated to a particular organization id.\n    * @method\n    * @name Patient#GetPatientsForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} authorization - access token\n    */\n    GetPatientsForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetTaskOutcomesOverTimeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        taskId: string,\n        startDate: string,\n        endDate: string,\n        intervalType: \"Day\" | \"Month\",\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks/{taskId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters['intervalType'] !== undefined) {\n            queryParameters['intervalType'] = parameters['intervalType'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the patient's task outcomes over time.\n     * @method\n     * @name Patient#GetTaskOutcomesOverTime\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskId - The task identifier.\n     * @param {string} startDate - The yyyy-MM-dd format for the start date.\n     * @param {string} endDate - The yyyy-MM-dd format for the end date.\n     * @param {string} intervalType - The period of time the results should be grouped by.\n     * @param {string} authorization - access token\n     */\n    GetTaskOutcomesOverTime(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        taskId: string,\n        startDate: string,\n        endDate: string,\n        intervalType: \"Day\" | \"Month\",\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/tasks/{taskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['intervalType'] !== undefined) {\n                queryParameters['intervalType'] = parameters['intervalType'];\n            }\n\n            if (parameters['intervalType'] === undefined) {\n                reject(new Error('Missing required  parameter: intervalType'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    PushScheduleUpdateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/pushscheduleupdate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that pushes a schedule update to the patient immediately.\n                    This call is used if a patient's care plan(s) has changed, and we want to update\n                    today's tasks right away rather than leaving them stable according to the\n                    previous care plan assignments.\n    * @method\n    * @name Patient#PushScheduleUpdate\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    PushScheduleUpdate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/pushscheduleupdate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReplacePatientCarePlanURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        carePlanId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a patient's care plan to another care plan.\n                    That is, swap one care plan for another. This method does not operate on Patient care plans.\n    * @method\n    * @name Patient#ReplacePatientCarePlan\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} carePlanId - The care plan identifier.\n         * @param {} model - The list of care plan ids to swap in.\n         * @param {string} authorization - access token\n    */\n    ReplacePatientCarePlan(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        carePlanId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveCarePlanFromPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a population or personal care plan from a patient.\n     * @method\n     * @name Patient#RemoveCarePlanFromPatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    RemoveCarePlanFromPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReplacePatientCategoryURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        categoryId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a patient's category to another category.\n                    That is, swap one category for another.\n    * @method\n    * @name Patient#ReplacePatientCategory\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} categoryId - The category identifier.\n         * @param {} model - The list of category ids to swap in.\n         * @param {string} authorization - access token\n    */\n    ReplacePatientCategory(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        categoryId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n            if (parameters['categoryId'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveCategoryFromPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        categoryId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a category from a patient.\n     * @method\n     * @name Patient#RemoveCategoryFromPatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} categoryId - The category identifier.\n     * @param {string} authorization - access token\n     */\n    RemoveCategoryFromPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        categoryId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/categories/{categoryId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n            if (parameters['categoryId'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UnaffiliatePatientFromOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations/{organizationId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that unaffiliates a patient from an organization.\n     * @method\n     * @name Patient#UnaffiliatePatientFromOrganization\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} organizationId - The organization which should be removed from the patient.\n     * @param {string} authorization - access token\n     */\n    UnaffiliatePatientFromOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UnarchivePatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/unarchive';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a patient from archived state and makes them available for normal operations.\n     * @method\n     * @name Patient#UnarchivePatient\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    UnarchivePatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/unarchive';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientFullNameURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fullName: Api.FullNameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/fullname';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Update the patient's name.\n     * @method\n     * @name Patient#UpdatePatientFullName\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} fullName - The patient full name model.\n     * @param {string} authorization - access token\n     */\n    UpdatePatientFullName(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fullName: Api.FullNameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/fullname';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['fullName'] !== undefined) {\n                body = parameters['fullName'];\n            }\n\n            if (parameters['fullName'] === undefined) {\n                reject(new Error('Missing required  parameter: fullName'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientAddressURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AddressBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/address';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Update the patient's address.\n     * @method\n     * @name Patient#UpdatePatientAddress\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The patient address binding model.\n     * @param {string} authorization - access token\n     */\n    UpdatePatientAddress(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AddressBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/address';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientTimeZoneURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.TimeZoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/timezone';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Update the patient's time zone.\n     * @method\n     * @name Patient#UpdatePatientTimeZone\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The patient time zone binding model.\n     * @param {string} authorization - access token\n     */\n    UpdatePatientTimeZone(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.TimeZoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/timezone';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSignaledAlertsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDate: string,\n        toDate: string,\n        activeOnly ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/signaledalerts';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters['activeOnly'] !== undefined) {\n            queryParameters['activeOnly'] = parameters['activeOnly'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves signaled alerts for the provided sponsor across a date range.\n     * @method\n     * @name Patient#GetSignaledAlerts\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} fromDate - From date (inclusive).\n     * @param {string} toDate - To date (inclusive).\n     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.\n     * @param {string} authorization - access token\n     */\n    GetSignaledAlerts(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDate: string,\n        toDate: string,\n        activeOnly ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/signaledalerts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['activeOnly'] !== undefined) {\n                queryParameters['activeOnly'] = parameters['activeOnly'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientIndex\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientIndex extends ApiClass {\n\n    GetRecentActivityPatientsForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        endDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retreives a list of patients that have recorded a measurement in the given time range.\n     * @method\n     * @name PatientIndex#GetRecentActivityPatientsForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} startDate - The start date.  Expected format: yyyy-MM-dd\n     * @param {string} endDate - The end date.  Expected format: yyyy-MM-dd\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetRecentActivityPatientsForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        endDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPopulationCarePlansForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanIds: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['carePlanIds'] !== undefined) {\n            queryParameters['carePlanIds'] = parameters['carePlanIds'];\n        }\n\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retreives a list of patients that belong to one of the given care plans.\n     * @method\n     * @name PatientIndex#GetPopulationCarePlansForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanIds - The list of care plan identifiers.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetPopulationCarePlansForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanIds: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['carePlanIds'] !== undefined) {\n                queryParameters['carePlanIds'] = parameters['carePlanIds'];\n            }\n\n            if (parameters['carePlanIds'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanIds'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetNoCarePlansForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retreives a list of patients that are not assigned a care plan.\n     * @method\n     * @name PatientIndex#GetNoCarePlansForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetNoCarePlansForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPersonalPatientCarePlansForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retreives a list of patients that have a personal care plan.\n     * @method\n     * @name PatientIndex#GetPersonalPatientCarePlansForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetPersonalPatientCarePlansForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientCarePlansForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retreives a list of patients that have a patient care plan.\n     * @method\n     * @name PatientIndex#GetPatientCarePlansForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetPatientCarePlansForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientsbyNameForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        lastName: string,\n        firstName ? : string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['lastName'] !== undefined) {\n            queryParameters['lastName'] = parameters['lastName'];\n        }\n\n        if (parameters['firstName'] !== undefined) {\n            queryParameters['firstName'] = parameters['firstName'];\n        }\n\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retreives a list of patients that match a last name.  First name is used for additional filtering.\n     * @method\n     * @name PatientIndex#GetPatientsbyNameForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} lastName - The last name.\n     * @param {string} firstName - The first name.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetPatientsbyNameForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        lastName: string,\n        firstName ? : string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['lastName'] !== undefined) {\n                queryParameters['lastName'] = parameters['lastName'];\n            }\n\n            if (parameters['lastName'] === undefined) {\n                reject(new Error('Missing required  parameter: lastName'));\n                return;\n            }\n\n            if (parameters['firstName'] !== undefined) {\n                queryParameters['firstName'] = parameters['firstName'];\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetAlertedPatientsForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of all alerted patients for a particular sponsor.\n                    Constraints on the list are based on the caller's access permissions.\n    * @method\n    * @name PatientIndex#GetAlertedPatientsForSponsor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n         * @param {string} authorization - access token\n    */\n    GetAlertedPatientsForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetNewPatientsForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        endDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves a list of patients that were created within the date range provided.\n     * @method\n     * @name PatientIndex#GetNewPatientsForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} startDate - The start date.  Expected format: yyyy-MM-dd\n     * @param {string} endDate - The end date.  Expected format: yyyy-MM-dd\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetNewPatientsForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        endDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientsByAppointmentDateForSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        endDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves a list of patients that have appointments within the specified date range.\n     * @method\n     * @name PatientIndex#GetPatientsByAppointmentDateForSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} startDate - The start date.\n     * @param {string} endDate - The end date.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetPatientsByAppointmentDateForSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        endDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientsByUserLastMeasurementURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['includeShareCare'] !== undefined) {\n            queryParameters['includeShareCare'] = parameters['includeShareCare'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves a list of patients that the current user has recorded task for since a previous date.\n     * @method\n     * @name PatientIndex#GetPatientsByUserLastMeasurement\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} startDate - The start date.\n     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.\n     * @param {string} authorization - access token\n     */\n    GetPatientsByUserLastMeasurement(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        startDate: string,\n        includeShareCare ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['includeShareCare'] !== undefined) {\n                queryParameters['includeShareCare'] = parameters['includeShareCare'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-index.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientInternal\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientInternal extends ApiClass {\n\n    ActivateWithSponsorNameURL(parameters: {\n        sponsorName: string,\n        model: Api.ActivatePatientDobSponsorPatientIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{sponsorName}/activate';\n\n        path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that activates a patient which is currently in inactive state.\n     * @method\n     * @name PatientInternal#ActivateWithSponsorName\n     * @param {string} sponsorName - The sponsor identifier.\n     * @param {} model - The model.\n     */\n    ActivateWithSponsorName(parameters: {\n        sponsorName: string,\n        model: Api.ActivatePatientDobSponsorPatientIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{sponsorName}/activate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);\n\n            if (parameters['sponsorName'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorName'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    IsPatientDeactivatedURL(parameters: {\n        sponsorPatientId: string,\n        dateOfBirth: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/activate';\n        if (parameters['sponsorPatientId'] !== undefined) {\n            queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];\n        }\n\n        if (parameters['dateOfBirth'] !== undefined) {\n            queryParameters['dateOfBirth'] = parameters['dateOfBirth'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that determines whether the patient is deactivated.\n     * @method\n     * @name PatientInternal#IsPatientDeactivated\n     * @param {string} sponsorPatientId - The sponsor patient identifier.\n     * @param {string} dateOfBirth - The date of birth.\n     */\n    IsPatientDeactivated(parameters: {\n        sponsorPatientId: string,\n        dateOfBirth: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/activate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            if (parameters['sponsorPatientId'] !== undefined) {\n                queryParameters['sponsorPatientId'] = parameters['sponsorPatientId'];\n            }\n\n            if (parameters['sponsorPatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorPatientId'));\n                return;\n            }\n\n            if (parameters['dateOfBirth'] !== undefined) {\n                queryParameters['dateOfBirth'] = parameters['dateOfBirth'];\n            }\n\n            if (parameters['dateOfBirth'] === undefined) {\n                reject(new Error('Missing required  parameter: dateOfBirth'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ActivateURL(parameters: {\n        model: Api.ActivatePatientDobSponsorPatientIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/activate';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that activates a patient which is currently in inactivate state.\n     * @method\n     * @name PatientInternal#Activate\n     * @param {} model - The activate patient with date of birth and sponsor patient id model.\n     */\n    Activate(parameters: {\n        model: Api.ActivatePatientDobSponsorPatientIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/activate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCarePlansToPatientURL(parameters: {\n        patientId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/careplans';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that associates a care plan to a patient. A patient can be associated\n                    to multiple care plans. A care plan is not owned by a patient unless it is a \"personal\n                    care plan.\" A patient can have only one personal care plan at a time, and may not mix\n                    a personal care plan with other population level care plans.\n    * @method\n    * @name PatientInternal#AddCarePlansToPatient\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {} model - The list of care plans to assign to the patient.\n         * @param {string} authorization - access token\n    */\n    AddCarePlansToPatient(parameters: {\n        patientId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/careplans';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCategoriesToPatientURL(parameters: {\n        patientId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/categories';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds categories to the patient.\n                    Categories are known as groups within the dashboard UI.\n    * @method\n    * @name PatientInternal#AddCategoriesToPatient\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {} model - The categories to assign to the patient.\n         * @param {string} authorization - access token\n    */\n    AddCategoriesToPatient(parameters: {\n        patientId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/categories';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AffiliatePatientFromOrganizationURL(parameters: {\n        patientId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/organizations';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that affiliates a patient to an organization or organizations.\n     * @method\n     * @name PatientInternal#AffiliatePatientFromOrganization\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {} model - The list of organization ids.\n     * @param {string} authorization - access token\n     */\n    AffiliatePatientFromOrganization(parameters: {\n        patientId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/organizations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePasswordURL(parameters: {\n        patientId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/password';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that allows a patient to change his password. This API relies\n                    on the calling used being authorized in the system and knowing the existing password.\n                    Higher privilege users may reset the password using this API without knowing the\n                    existing password.\n    * @method\n    * @name PatientInternal#ChangePassword\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {} model - The old and new passwords.\n         * @param {string} authorization - access token\n    */\n    ChangePassword(parameters: {\n        patientId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/password';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePatientRoleInternalURL(parameters: {\n        patientId: string,\n        model: Api.PatientChangeRoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/roles';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes patient's role.\n     * @method\n     * @name PatientInternal#ChangePatientRoleInternal\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {} model - The patient role change model.\n     * @param {string} authorization - access token\n     */\n    ChangePatientRoleInternal(parameters: {\n        patientId: string,\n        model: Api.PatientChangeRoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddRolesURL(parameters: {\n        patientId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/roles';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Adds roles to a patient.\n     * @method\n     * @name PatientInternal#AddRoles\n     * @param {string} patientId - The patient identifier.\n     * @param {} model - The roles to add.\n     * @param {string} authorization - access token\n     */\n    AddRoles(parameters: {\n        patientId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePatientSettingsInternalURL(parameters: {\n        patientId: string,\n        model: Api.PatientSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/settings';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes patient settings.\n     * @method\n     * @name PatientInternal#ChangePatientSettingsInternal\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    ChangePatientSettingsInternal(parameters: {\n        patientId: string,\n        model: Api.PatientSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/settings';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ClearPatientAlertsURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/alerts';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that clears all active alerts on the patient.\n     * @method\n     * @name PatientInternal#ClearPatientAlerts\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} authorization - access token\n     */\n    ClearPatientAlerts(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/alerts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadPhotoURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/photo';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds or updates a photo for the patient.\n                    This endpoint requires use of mime multipart content, not json.\n    * @method\n    * @name PatientInternal#UploadPhoto\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {string} authorization - access token\n    */\n    UploadPhoto(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeletePhotoURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/photo';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a patient's profile photo.\n     * @method\n     * @name PatientInternal#DeletePhoto\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} authorization - access token\n     */\n    DeletePhoto(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCompletedTaskReadModelsURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/tasks';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves tasks a patient has completed.\n     * @method\n     * @name PatientInternal#GetCompletedTaskReadModels\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} authorization - access token\n     */\n    GetCompletedTaskReadModels(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/tasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetTaskOutcomesOverTimeURL(parameters: {\n        patientId: string,\n        taskId: string,\n        startDate: string,\n        endDate: string,\n        intervalType: \"Day\" | \"Month\",\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/tasks/{taskId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters['intervalType'] !== undefined) {\n            queryParameters['intervalType'] = parameters['intervalType'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the patients task outcomes over time.\n     * @method\n     * @name PatientInternal#GetTaskOutcomesOverTime\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {string} startDate - yyyy-MM-dd\n     * @param {string} endDate - yyyy-MM-dd\n     * @param {string} intervalType - The period of time the results should be grouped by.\n     * @param {string} authorization - access token\n     */\n    GetTaskOutcomesOverTime(parameters: {\n        patientId: string,\n        taskId: string,\n        startDate: string,\n        endDate: string,\n        intervalType: \"Day\" | \"Month\",\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/tasks/{taskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['intervalType'] !== undefined) {\n                queryParameters['intervalType'] = parameters['intervalType'];\n            }\n\n            if (parameters['intervalType'] === undefined) {\n                reject(new Error('Missing required  parameter: intervalType'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    PushScheduleUpdateURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/pushscheduleupdate';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that pushes a schedule update to the patient immediately.\n                    This call is used if a patient's care plan(s) has changed, and we want to\n                    update today's tasks right away rather than leaving them stable according \n                    to the previous care plan assignments.\n    * @method\n    * @name PatientInternal#PushScheduleUpdate\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {string} authorization - access token\n    */\n    PushScheduleUpdate(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/pushscheduleupdate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReplacePatientCarePlanURL(parameters: {\n        patientId: string,\n        carePlanId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/careplans/{carePlanId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a patient's care plan to another care plan.\n                    That is, swap one care plan for another. This method works on Personal and Population\n                    Care Plans, but not on Patient care plans, which cannot be removed.\n    * @method\n    * @name PatientInternal#ReplacePatientCarePlan\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {string} carePlanId - The care plan identifier.\n         * @param {} model - The list of care plan ids to swap in.\n         * @param {string} authorization - access token\n    */\n    ReplacePatientCarePlan(parameters: {\n        patientId: string,\n        carePlanId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveCarePlanFromPatientURL(parameters: {\n        patientId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/careplans/{carePlanId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that removes a population or personal care plan from a patient.\n                    This method does not operate on Patient care plans.\n    * @method\n    * @name PatientInternal#RemoveCarePlanFromPatient\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {string} carePlanId - The care plan identifier.\n         * @param {string} authorization - access token\n    */\n    RemoveCarePlanFromPatient(parameters: {\n        patientId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/careplans/{carePlanId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReplacePatientCategoryURL(parameters: {\n        patientId: string,\n        categoryId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/categories/{categoryId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a patient's category to another category.\n                    That is, swap one category for another.\n    * @method\n    * @name PatientInternal#ReplacePatientCategory\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {string} categoryId - The category identifier.\n         * @param {} model - The list of category ids to swap in.\n         * @param {string} authorization - access token\n    */\n    ReplacePatientCategory(parameters: {\n        patientId: string,\n        categoryId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/categories/{categoryId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n            if (parameters['categoryId'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveCategoryFromPatientURL(parameters: {\n        patientId: string,\n        categoryId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/categories/{categoryId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a category from a patient.\n     * @method\n     * @name PatientInternal#RemoveCategoryFromPatient\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} categoryId - The category identifier.\n     * @param {string} authorization - access token\n     */\n    RemoveCategoryFromPatient(parameters: {\n        patientId: string,\n        categoryId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/categories/{categoryId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{categoryId}', `${parameters['categoryId']}`);\n\n            if (parameters['categoryId'] === undefined) {\n                reject(new Error('Missing required  parameter: categoryId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UnaffiliatePatientFromOrganizationURL(parameters: {\n        patientId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/organizations/{organizationId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that unaffiliates a patient from an organization.\n     * @method\n     * @name PatientInternal#UnaffiliatePatientFromOrganization\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} organizationId - The organization which should be removed from the patient.\n     * @param {string} authorization - access token\n     */\n    UnaffiliatePatientFromOrganization(parameters: {\n        patientId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSignaledAlertsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDate: string,\n        toDate: string,\n        activeOnly ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/signaledalerts';\n        if (parameters['distributorId'] !== undefined) {\n            queryParameters['distributorId'] = parameters['distributorId'];\n        }\n\n        if (parameters['sponsorId'] !== undefined) {\n            queryParameters['sponsorId'] = parameters['sponsorId'];\n        }\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters['activeOnly'] !== undefined) {\n            queryParameters['activeOnly'] = parameters['activeOnly'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves signaled alerts for the provided sponsor across a date range.\n     * @method\n     * @name PatientInternal#GetSignaledAlerts\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} fromDate - From date (inclusive).\n     * @param {string} toDate - To date (inclusive).\n     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.\n     * @param {string} authorization - access token\n     */\n    GetSignaledAlerts(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDate: string,\n        toDate: string,\n        activeOnly ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/signaledalerts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            if (parameters['distributorId'] !== undefined) {\n                queryParameters['distributorId'] = parameters['distributorId'];\n            }\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['sponsorId'] !== undefined) {\n                queryParameters['sponsorId'] = parameters['sponsorId'];\n            }\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['activeOnly'] !== undefined) {\n                queryParameters['activeOnly'] = parameters['activeOnly'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves patient data.\n                    The data is constrained by caller access permissions.\n    * @method\n    * @name PatientInternal#GetPatient\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {string} authorization - access token\n    */\n    GetPatient(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdatePatientURL(parameters: {\n        patientId: string,\n        model: Api.PatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates the patient's information.\n                    If user name and email address are to be changed: set NewUserName,\n                    leaving UserName as the original user name.\n    * @method\n    * @name PatientInternal#UpdatePatient\n         * @param {string} patientId - The internal Patient IO patient identifier.\n         * @param {} model - The patient update model.\n         * @param {string} authorization - access token\n    */\n    UpdatePatient(parameters: {\n        patientId: string,\n        model: Api.PatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeletePatientURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that permanently and finally deletes a patient record.\n     * @method\n     * @name PatientInternal#DeletePatient\n     * @param {string} patientId - The internal Patient IO patient identifier.\n     * @param {string} authorization - access token\n     */\n    DeletePatient(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    BulkPatientUpdateURL(parameters: {\n        model: Api.InternalBulkPatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/bulkUpdate';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * Allows a care team member to bulk manage patients. \n                    The user can specify a collection of patients by ID to be managed. \n                    Supported operations include adding/removing the care plans, adding/removing\n                    the categories, and changing the organization of each patient in the collection.\n    * @method\n    * @name PatientInternal#BulkPatientUpdate\n         * @param {} model - The bulk patient update model\n         * @param {string} authorization - access token\n    */\n    BulkPatientUpdate(parameters: {\n        model: Api.InternalBulkPatientUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/bulkUpdate';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-internal.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientInvitations\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientInvitations extends ApiClass {\n\n    AcceptPatientInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        model: Api.AcceptInvitationBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that accepts an invitation for a patient.\n                    Accepting the invitation creates an actual Patient record within Patient IO,\n                    using the data in the invitation.\n    * @method\n    * @name PatientInvitations#AcceptPatientInvitation\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} invitationCode - The invitation code.\n         * @param {} model - The invitation acceptance model.\n    */\n    AcceptPatientInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        model: Api.AcceptInvitationBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientInvitationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        accepted ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['accepted'] !== undefined) {\n            queryParameters['accepted'] = parameters['accepted'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves patient invitations for a sponsor.\n    * @method\n    * @name PatientInvitations#GetPatientInvitations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {boolean} accepted - If set to true retrieve accepted. false retrieves unaccepted. If ommitted\n                    retrieves both.\n         * @param {string} authorization - access token\n    */\n    GetPatientInvitations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        accepted ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['accepted'] !== undefined) {\n                queryParameters['accepted'] = parameters['accepted'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PatientInvitationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a patient invitation and sends a notice to the invited patient.\n     * @method\n     * @name PatientInvitations#CreatePatientInvitation\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The patient invitation creation model.\n     * @param {string} authorization - access token\n     */\n    CreatePatientInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PatientInvitationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientInvitationWithAuthCodeURL(parameters: {\n        distributorId: string,\n        authorizationCode: string,\n        model: Api.KioskPatientInvitationCreateBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method creates an invitation and sends a notice to the patient. \n                    This method allows the creation of a patient invitation for a\n                    sponsor based on an authorization code. This allows a client that only knows\n                    the authorization code for a sponsor to create and send an invitation to a\n                    sponsor to a patient without authenticating (supports the Kiosk application.)\n    * @method\n    * @name PatientInvitations#CreatePatientInvitationWithAuthCode\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} authorizationCode - The authorization code.\n         * @param {} model - The kiosk patient invitation creation model.\n    */\n    CreatePatientInvitationWithAuthCode(parameters: {\n        distributorId: string,\n        authorizationCode: string,\n        model: Api.KioskPatientInvitationCreateBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{authorizationCode}', `${parameters['authorizationCode']}`);\n\n            if (parameters['authorizationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: authorizationCode'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeletePatientInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an invitation for a patient.\n     * @method\n     * @name PatientInvitations#DeletePatientInvitation\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    DeletePatientInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ResendPatientInvitationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ResendInvitationsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that resends unsent invitations given a list of invitation codes, \n                    or invitations created within a certain date range.\n    * @method\n    * @name PatientInvitations#ResendPatientInvitations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The resend invitations model.\n         * @param {string} authorization - access token\n    */\n    ResendPatientInvitations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ResendInvitationsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-invitations.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientProfileDefinitions\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientProfileDefinitions extends ApiClass {\n\n    AddPatientProfileDefinitionURL(parameters: {\n        distributorId: string,\n        model: Api.PatientProfileDefinitionCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a patient profile definition within a distributor.\n     * @method\n     * @name PatientProfileDefinitions#AddPatientProfileDefinition\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The patient profile definition model.\n     * @param {string} authorization - access token\n     */\n    AddPatientProfileDefinition(parameters: {\n        distributorId: string,\n        model: Api.PatientProfileDefinitionCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AffiliatePatientProfileDefinitionToSponsorURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that provisions a patient profile definition from a distributor to a sponsor.\n     * @method\n     * @name PatientProfileDefinitions#AffiliatePatientProfileDefinitionToSponsor\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {} model - The list of sponsor identifiers.\n     * @param {string} authorization - access token\n     */\n    AffiliatePatientProfileDefinitionToSponsor(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.IdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientProfileDefinitionCodeCollectionURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.ProfileDefinitionElementCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a CodeCollection within a patient profile definition.\n     * @method\n     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionCodeCollection\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {} model - The profile definition element model.\n     * @param {string} authorization - access token\n     */\n    CreatePatientProfileDefinitionCodeCollection(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.ProfileDefinitionElementCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientProfileDefinitionTagElementURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.ProfileDefinitionElementCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a TagElement within a patient profile definition\n     * @method\n     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTagElement\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {} model - The profile definition element model.\n     * @param {string} authorization - access token\n     */\n    CreatePatientProfileDefinitionTagElement(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.ProfileDefinitionElementCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientProfileDefinitionTextElementURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.ProfileDefinitionElementCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a TextElement within a patient profile definition\n     * @method\n     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTextElement\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {} model - The profile definition element model.\n     * @param {string} authorization - access token\n     */\n    CreatePatientProfileDefinitionTextElement(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.ProfileDefinitionElementCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientProfileDefinitionURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a patient profile definition.\n     * @method\n     * @name PatientProfileDefinitions#GetPatientProfileDefinition\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} authorization - access token\n     */\n    GetPatientProfileDefinition(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemovePatientProfileDefinitionCodeCollectionURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a CodeableElement with a patient profile definition.\n     * @method\n     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionCodeCollection\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} elementId - The patient profile definition code element identifier.\n     * @param {string} authorization - access token\n     */\n    RemovePatientProfileDefinitionCodeCollection(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n            if (parameters['elementId'] === undefined) {\n                reject(new Error('Missing required  parameter: elementId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemovePatientProfileDefinitionTagElementURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTagElementId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a TagElement within a patient profile definition\n     * @method\n     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTagElement\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.\n     * @param {string} authorization - access token\n     */\n    RemovePatientProfileDefinitionTagElement(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTagElementId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);\n\n            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemovePatientProfileDefinitionTextElementURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTextElementId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{patientProfileDefinitionTextElementId}', `${parameters['patientProfileDefinitionTextElementId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a TextElement within a patient profile definition\n     * @method\n     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTextElement\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} patientProfileDefinitionTextElementId - The patient profile definition text element identifier.\n     * @param {string} authorization - access token\n     */\n    RemovePatientProfileDefinitionTextElement(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTextElementId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionTextElementId}', `${parameters['patientProfileDefinitionTextElementId']}`);\n\n            if (parameters['patientProfileDefinitionTextElementId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionTextElementId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SetPatientProfileDefinitionCategoryURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.PatientProfileDefinitionElementCategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sets the category on any PatientProfileDefinition.\n     * @method\n     * @name PatientProfileDefinitions#SetPatientProfileDefinitionCategory\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {} model - PaitnetProfileDefinition information to update.\n     * @param {string} authorization - access token\n     */\n    SetPatientProfileDefinitionCategory(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        model: Api.PatientProfileDefinitionElementCategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SetPatientProfileDefinitionElementCategoryURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        model: Api.PatientProfileDefinitionElementCategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sets the category on any PatientProfileDefinition element.\n     * @method\n     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategory\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} elementId - The element identifier.\n     * @param {} model - PatientProfileDefinition information to update\n     * @param {string} authorization - access token\n     */\n    SetPatientProfileDefinitionElementCategory(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        model: Api.PatientProfileDefinitionElementCategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n            if (parameters['elementId'] === undefined) {\n                reject(new Error('Missing required  parameter: elementId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SetPatientProfileDefinitionElementCategoryByNameURL(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        elementName: string,\n        model: Api.PatientProfileDefinitionElementCategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{elementName}', `${parameters['elementName']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sets the category on any PatientProfileDefinition element by looking up the element by name.\n     * @method\n     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategoryByName\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} elementName - Name of the element.\n     * @param {} model - PatientProfileDefinition information to update\n     * @param {string} authorization - access token\n     */\n    SetPatientProfileDefinitionElementCategoryByName(parameters: {\n        distributorId: string,\n        patientProfileDefinitionId: string,\n        elementName: string,\n        model: Api.PatientProfileDefinitionElementCategoryBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{elementName}', `${parameters['elementName']}`);\n\n            if (parameters['elementName'] === undefined) {\n                reject(new Error('Missing required  parameter: elementName'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-profile-definitions.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientProfiles\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientProfiles extends ApiClass {\n\n    AddCodesToCodeCollectionOnSponsorPatientProfileURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        model: Api.CodeCollectionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that adds or replaces codes on a profile code collection.\n     * @method\n     * @name PatientProfiles#AddCodesToCodeCollectionOnSponsorPatientProfile\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} elementId - The code collection identifier.\n     * @param {} model - The code collection model.\n     * @param {string} authorization - access token\n     */\n    AddCodesToCodeCollectionOnSponsorPatientProfile(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        model: Api.CodeCollectionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/codeCollections/{elementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n            if (parameters['elementId'] === undefined) {\n                reject(new Error('Missing required  parameter: elementId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKeyURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        key: string,\n        model: Api.CodeCollectionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n        path = path.replace('{key}', `${parameters['key']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that adds or replaces codes on a profile code collection.\n     * @method\n     * @name PatientProfiles#AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} elementId - The code collection identifier.\n     * @param {string} key - The instance of the patient profile definition to update.\n     * @param {} model - The code collection model.\n     * @param {string} authorization - access token\n     */\n    AddCodesToCodeCollectionOnSponsorPatientProfileWithInstanceKey(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        elementId: string,\n        key: string,\n        model: Api.CodeCollectionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/codeCollections/{elementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{elementId}', `${parameters['elementId']}`);\n\n            if (parameters['elementId'] === undefined) {\n                reject(new Error('Missing required  parameter: elementId'));\n                return;\n            }\n\n            path = path.replace('{key}', `${parameters['key']}`);\n\n            if (parameters['key'] === undefined) {\n                reject(new Error('Missing required  parameter: key'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddElementTagsToSponsorPatientProfileURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTagElementId: string,\n        model: Api.SetProfileTagElementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that adds a tag to a tag element in the patients profile.\n     * @method\n     * @name PatientProfiles#AddElementTagsToSponsorPatientProfile\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.\n     * @param {} model - The profile tag element model.\n     * @param {string} authorization - access token\n     */\n    AddElementTagsToSponsorPatientProfile(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTagElementId: string,\n        model: Api.SetProfileTagElementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);\n\n            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddElementTagsToSponsorPatientProfileInstanceURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTagElementId: string,\n        key: string,\n        model: Api.SetProfileTagElementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);\n\n        path = path.replace('{key}', `${parameters['key']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that adds a tag to a tag element in the patients profile.\n     * @method\n     * @name PatientProfiles#AddElementTagsToSponsorPatientProfileInstance\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.\n     * @param {string} key - The instance of the profile definition to retrieve.\n     * @param {} model - The profile tage element model.\n     * @param {string} authorization - access token\n     */\n    AddElementTagsToSponsorPatientProfileInstance(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        patientProfileDefinitionTagElementId: string,\n        key: string,\n        model: Api.SetProfileTagElementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/tagelements/{patientProfileDefinitionTagElementId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionTagElementId}', `${parameters['patientProfileDefinitionTagElementId']}`);\n\n            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));\n                return;\n            }\n\n            path = path.replace('{key}', `${parameters['key']}`);\n\n            if (parameters['key'] === undefined) {\n                reject(new Error('Missing required  parameter: key'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetAllSponsorPatientProfilesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves all instances of the patient profile within\n                    the context of a particular sponsor. That is - retrieves the patient's profile record.\n    * @method\n    * @name PatientProfiles#GetAllSponsorPatientProfiles\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} authorization - access token\n    */\n    GetAllSponsorPatientProfiles(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetAllSponsorPatientProfilesForProfileDefinitionURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves all instances of the patient profile of\n                    a particular patient profile definition, within the context of a particular\n                    sponsor. That is - retrieves the patient's profile record.\n    * @method\n    * @name PatientProfiles#GetAllSponsorPatientProfilesForProfileDefinition\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n         * @param {string} authorization - access token\n    */\n    GetAllSponsorPatientProfilesForProfileDefinition(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorPatientProfileURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves the default instance of a patient profile for a\n                    particular patient profile definition, within  the context of a particular sponsor.\n                    That is - retrieves the patient's profile record. This is the API to call for profiles\n                    that are not instance based.\n    * @method\n    * @name PatientProfiles#GetSponsorPatientProfile\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n         * @param {string} authorization - access token\n    */\n    GetSponsorPatientProfile(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorPatientProfileURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        model: Api.UpdateSponsorPatientProfileBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that supports updating multiple text and tag elements\n                    within a patient's profile as a single operation.\n    * @method\n    * @name PatientProfiles#UpdateSponsorPatientProfile\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n         * @param {} model - The sponsor patient profile update model.\n         * @param {string} authorization - access token\n    */\n    UpdateSponsorPatientProfile(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        model: Api.UpdateSponsorPatientProfileBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorPatientProfileInstanceURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{key}', `${parameters['key']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves the patient profile for a particular instance of a particular patient\n                    profile definition, within the context of a particular sponsor. That is - retrieves\n                    the patient's profile record.\n    * @method\n    * @name PatientProfiles#GetSponsorPatientProfileInstance\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n         * @param {string} key - The instance of the profile definition to retrieve.\n         * @param {string} authorization - access token\n    */\n    GetSponsorPatientProfileInstance(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{key}', `${parameters['key']}`);\n\n            if (parameters['key'] === undefined) {\n                reject(new Error('Missing required  parameter: key'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorPatientProfileInstanceURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        model: Api.UpdateSponsorPatientProfileBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{key}', `${parameters['key']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that supports updating multiple text and tag elements\n                    within a patient's profile as a single operation.\n    * @method\n    * @name PatientProfiles#UpdateSponsorPatientProfileInstance\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n         * @param {string} key - The instance of the profile definition to update.\n         * @param {} model - The sponsor patient profile update model.\n         * @param {string} authorization - access token\n    */\n    UpdateSponsorPatientProfileInstance(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        model: Api.UpdateSponsorPatientProfileBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{key}', `${parameters['key']}`);\n\n            if (parameters['key'] === undefined) {\n                reject(new Error('Missing required  parameter: key'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveInstanceFromSponsorPatientProfileURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{key}', `${parameters['key']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes a specific instance of a patient profile for a particular patient\n                    profile definition, within  the context of a particular sponsor.\n    * @method\n    * @name PatientProfiles#RemoveInstanceFromSponsorPatientProfile\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier.\n         * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n         * @param {string} key - The instance of the profile definition to delete.\n         * @param {string} authorization - access token\n    */\n    RemoveInstanceFromSponsorPatientProfile(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{key}', `${parameters['key']}`);\n\n            if (parameters['key'] === undefined) {\n                reject(new Error('Missing required  parameter: key'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SetLinkTextURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        model: Api.UpdateSponsorPatientProfileInstanceLinkText,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n        path = path.replace('{key}', `${parameters['key']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sets the link text of a particular instance of a sponsor patient profile.\n     * @method\n     * @name PatientProfiles#SetLinkText\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier.\n     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.\n     * @param {string} key - The instance of the patient profile definition to update.\n     * @param {} model - The sponsor patient profile instance link text update model.\n     * @param {string} authorization - access token\n     */\n    SetLinkText(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        patientProfileDefinitionId: string,\n        key: string,\n        model: Api.UpdateSponsorPatientProfileInstanceLinkText,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/profiles/{patientProfileDefinitionId}/instances/{key}/linkText';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{patientProfileDefinitionId}', `${parameters['patientProfileDefinitionId']}`);\n\n            if (parameters['patientProfileDefinitionId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));\n                return;\n            }\n\n            path = path.replace('{key}', `${parameters['key']}`);\n\n            if (parameters['key'] === undefined) {\n                reject(new Error('Missing required  parameter: key'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-profiles.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientSchedules\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientSchedules extends ApiClass {\n\n    UpdateAppointmentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AppointmentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a patient appointment.\n     * @method\n     * @name PatientSchedules#UpdateAppointment\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - \n     * @param {string} authorization - access token\n     */\n    UpdateAppointment(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AppointmentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateAppointmentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AppointmentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a new appointment for a patient.\n     * @method\n     * @name PatientSchedules#CreateAppointment\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The appointment creation model.\n     * @param {string} authorization - access token\n     */\n    CreateAppointment(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AppointmentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CancelAppointmentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AppointmentCancelBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that cancels a Patient appointment.\n     * @method\n     * @name PatientSchedules#CancelAppointment\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The appointment cancellation model.\n     * @param {string} authorization - access token\n     */\n    CancelAppointment(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.AppointmentCancelBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CancelAppointmentByDateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        appointmentDateTime: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments/date';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['appointmentDateTime'] !== undefined) {\n            queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes a Patient appointment by taking a\n                    specific appointment date time.\n    * @method\n    * @name PatientSchedules#CancelAppointmentByDate\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} appointmentDateTime - The appointment date time.\n         * @param {string} authorization - access token\n    */\n    CancelAppointmentByDate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        appointmentDateTime: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/appointments/date';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['appointmentDateTime'] !== undefined) {\n                queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];\n            }\n\n            if (parameters['appointmentDateTime'] === undefined) {\n                reject(new Error('Missing required  parameter: appointmentDateTime'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RecordScheduledTaskOutcomeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        dayOfCare: string,\n        scheduledTaskId: string,\n        model: Api.MeasurementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n        path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that records a measurement associated to a particular scheduled task.\n    * @method\n    * @name PatientSchedules#RecordScheduledTaskOutcome\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor)\n                    who owns the scheduled task\n         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned\n                    in the format yyyy-MM-dd\n         * @param {string} scheduledTaskId - The identifier of the scheduled task\n         * @param {} model - The measurement model.\n         * @param {string} authorization - access token\n    */\n    RecordScheduledTaskOutcome(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        dayOfCare: string,\n        scheduledTaskId: string,\n        model: Api.MeasurementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n            if (parameters['dayOfCare'] === undefined) {\n                reject(new Error('Missing required  parameter: dayOfCare'));\n                return;\n            }\n\n            path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);\n\n            if (parameters['scheduledTaskId'] === undefined) {\n                reject(new Error('Missing required  parameter: scheduledTaskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetScheduleWithDateRangeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        startDate: string,\n        endDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the schedule for a given patient within a date range.\n     * @method\n     * @name PatientSchedules#GetScheduleWithDateRange\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} startDate - yyyy-MM-dd\n     * @param {string} endDate - yyyy-MM-dd\n     * @param {string} authorization - access token\n     */\n    GetScheduleWithDateRange(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        startDate: string,\n        endDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetScheduleForDayOfCareURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        dayOfCare: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves the schedule for a patient for a particular day.\n    * @method\n    * @name PatientSchedules#GetScheduleForDayOfCare\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned\n                    in the format yyyy-MM-dd\n         * @param {string} authorization - access token\n    */\n    GetScheduleForDayOfCare(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        dayOfCare: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/schedule/days/{dayOfCare}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n            if (parameters['dayOfCare'] === undefined) {\n                reject(new Error('Missing required  parameter: dayOfCare'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-schedules.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class PatientSchedulesInternal\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class PatientSchedulesInternal extends ApiClass {\n\n    UpdateAppointmentURL(parameters: {\n        patientId: string,\n        model: Api.AppointmentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/appointments';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a patient appointment.\n     * @method\n     * @name PatientSchedulesInternal#UpdateAppointment\n     * @param {string} patientId - The Internal PatientIO patient identifier.\n     * @param {} model - The appointment update model.\n     * @param {string} authorization - access token\n     */\n    UpdateAppointment(parameters: {\n        patientId: string,\n        model: Api.AppointmentUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateAppointmentURL(parameters: {\n        patientId: string,\n        model: Api.AppointmentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/appointments';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a new Appointment for a patient.\n     * @method\n     * @name PatientSchedulesInternal#CreateAppointment\n     * @param {string} patientId - The Internal PatientIO patient identifier.\n     * @param {} model - The appointment creation model.\n     * @param {string} authorization - access token\n     */\n    CreateAppointment(parameters: {\n        patientId: string,\n        model: Api.AppointmentCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CancelAppointmentURL(parameters: {\n        patientId: string,\n        model: Api.AppointmentCancelBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/appointments';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a Patient appointment.\n     * @method\n     * @name PatientSchedulesInternal#CancelAppointment\n     * @param {string} patientId - The Internal PatientIO patient identifier.\n     * @param {} model - The appointment cancellation model.\n     * @param {string} authorization - access token\n     */\n    CancelAppointment(parameters: {\n        patientId: string,\n        model: Api.AppointmentCancelBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CancelAppointmentByDateURL(parameters: {\n        patientId: string,\n        sponsorId: string,\n        appointmentDateTime: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['appointmentDateTime'] !== undefined) {\n            queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a Patient appointment.\n     * @method\n     * @name PatientSchedulesInternal#CancelAppointmentByDate\n     * @param {string} patientId - The Internal PatientIO patient identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} appointmentDateTime - The appointment date time.\n     * @param {string} authorization - access token\n     */\n    CancelAppointmentByDate(parameters: {\n        patientId: string,\n        sponsorId: string,\n        appointmentDateTime: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['appointmentDateTime'] !== undefined) {\n                queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];\n            }\n\n            if (parameters['appointmentDateTime'] === undefined) {\n                reject(new Error('Missing required  parameter: appointmentDateTime'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetScheduleWithDateRangeURL(parameters: {\n        patientId: string,\n        startDate: string,\n        endDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n        if (parameters['startDate'] !== undefined) {\n            queryParameters['startDate'] = parameters['startDate'];\n        }\n\n        if (parameters['endDate'] !== undefined) {\n            queryParameters['endDate'] = parameters['endDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the Schedule for a given patient within a date range.\n     * @method\n     * @name PatientSchedulesInternal#GetScheduleWithDateRange\n     * @param {string} patientId - The Internal PatientIO patient identifier.\n     * @param {string} startDate - yyyy-MM-dd\n     * @param {string} endDate - yyyy-MM-dd\n     * @param {string} authorization - access token\n     */\n    GetScheduleWithDateRange(parameters: {\n        patientId: string,\n        startDate: string,\n        endDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['startDate'] !== undefined) {\n                queryParameters['startDate'] = parameters['startDate'];\n            }\n\n            if (parameters['startDate'] === undefined) {\n                reject(new Error('Missing required  parameter: startDate'));\n                return;\n            }\n\n            if (parameters['endDate'] !== undefined) {\n                queryParameters['endDate'] = parameters['endDate'];\n            }\n\n            if (parameters['endDate'] === undefined) {\n                reject(new Error('Missing required  parameter: endDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetScheduleForDayOfCareURL(parameters: {\n        patientId: string,\n        dayOfCare: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves the schedule for a patient for a particular day.\n    * @method\n    * @name PatientSchedulesInternal#GetScheduleForDayOfCare\n         * @param {string} patientId - The Internal PatientIO patient identifier.\n         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned\n                    in the format yyyy-MM-dd\n         * @param {string} authorization - access token\n    */\n    GetScheduleForDayOfCare(parameters: {\n        patientId: string,\n        dayOfCare: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n            if (parameters['dayOfCare'] === undefined) {\n                reject(new Error('Missing required  parameter: dayOfCare'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RecordScheduledTaskOutcomeURL(parameters: {\n        patientId: string,\n        dayOfCare: string,\n        scheduledTaskId: string,\n        model: Api.MeasurementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n        path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that records a measurement associated to a particular scheduled task.\n    * @method\n    * @name PatientSchedulesInternal#RecordScheduledTaskOutcome\n         * @param {string} patientId - The Internal PatientIO patient identifier.\n         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned\n                    in the format yyyy-MM-dd\n         * @param {string} scheduledTaskId - The scheduled task identifier.\n         * @param {} model - The measurement model.\n         * @param {string} authorization - access token\n    */\n    RecordScheduledTaskOutcome(parameters: {\n        patientId: string,\n        dayOfCare: string,\n        scheduledTaskId: string,\n        model: Api.MeasurementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{dayOfCare}', `${parameters['dayOfCare']}`);\n\n            if (parameters['dayOfCare'] === undefined) {\n                reject(new Error('Missing required  parameter: dayOfCare'));\n                return;\n            }\n\n            path = path.replace('{scheduledTaskId}', `${parameters['scheduledTaskId']}`);\n\n            if (parameters['scheduledTaskId'] === undefined) {\n                reject(new Error('Missing required  parameter: scheduledTaskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/patient-schedules-internal.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Reports\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Reports extends ApiClass {\n\n    CreateCarePlanAdherenceReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient adherence percentage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateCarePlanAdherenceReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateCarePlanAdherenceReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/adherence';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCarePlanAdherenceReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient adherence percentage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateCarePlanAdherenceReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateCarePlanAdherenceReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/adherence';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCarePlanEngagementReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient engagement percentage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateCarePlanEngagementReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateCarePlanEngagementReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-plans/engagement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCarePlanEngagementReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient engagement percentage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateCarePlanEngagementReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateCarePlanEngagementReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/care-plans/engagement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCareTeamOrganizationEngagementReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets the organization engagement reports\n                    for the given spondor identifier and date range.\n    * @method\n    * @name Reports#CreateCareTeamOrganizationEngagementReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n    */\n    CreateCareTeamOrganizationEngagementReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/engagement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCareTeamOrganizationSessionReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets the organization session reports\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateCareTeamOrganizationSessionReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n    */\n    CreateCareTeamOrganizationSessionReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/care-team/sessions';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCareTeamSponsorEngagementReportURL(parameters: {\n        distributorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/care-team/engagement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a sponsor engagement reports\n                    for the given distributor and date range.\n    * @method\n    * @name Reports#CreateCareTeamSponsorEngagementReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n    */\n    CreateCareTeamSponsorEngagementReport(parameters: {\n        distributorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/care-team/engagement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateCareTeamSponsorSessionReportURL(parameters: {\n        distributorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/care-team/sessions';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets the sponsor session reports\n                    for the given distributor identifier and date range.\n    * @method\n    * @name Reports#CreateCareTeamSponsorSessionReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n    */\n    CreateCareTeamSponsorSessionReport(parameters: {\n        distributorId: string,\n        fromDate: string,\n        toDate: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/care-team/sessions';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientChannelReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient channel percent usage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreatePatientChannelReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreatePatientChannelReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/channels';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientChannelReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient channel percent usage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreatePatientChannelReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreatePatientChannelReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/channels';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientDemographicReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient demographic report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreatePatientDemographicReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreatePatientDemographicReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/patients/demographics';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientDemographicReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient demographic report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreatePatientDemographicReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreatePatientDemographicReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/patients/demographics';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientInvitationReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient invitation report\n                    for the given sponsor identifier and date range within\n                    all organizations in the sponsor.\n    * @method\n    * @name Reports#CreatePatientInvitationReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreatePatientInvitationReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/invitations/report';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreatePatientInvitationReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient invitation report within a specific organization\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreatePatientInvitationReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreatePatientInvitationReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/invitations/report';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorEngagementAndAdherenceReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient engagement and adherence percentage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateSponsorEngagementAndAdherenceReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateSponsorEngagementAndAdherenceReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/engagement-adherence';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorEngagementAndAdherenceReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient engagement and adherence percentage report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateSponsorEngagementAndAdherenceReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateSponsorEngagementAndAdherenceReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/engagement-adherence';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorOnboardingReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient invitations sent, activated, and pending report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateSponsorOnboardingReport\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateSponsorOnboardingReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/onboarding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorOnboardingReportForOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a patient invitations sent, activated, and pending report\n                    for the given sponsor identifier and date range.\n    * @method\n    * @name Reports#CreateSponsorOnboardingReportForOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} fromDate - From date.\n         * @param {string} toDate - To date.\n         * @param {string} authorization - access token\n    */\n    CreateSponsorOnboardingReportForOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/report/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/onboarding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/reports.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class SharedCare\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class SharedCare extends ApiClass {\n\n    GetSharedCareUsersReportURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves a list of shared care users and who invited them.\n     * @method\n     * @name SharedCare#GetSharedCareUsersReport\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} authorization - access token\n     */\n    GetSharedCareUsersReport(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/sharedCare';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AcceptSharedCareInvitationForNewPatientURL(parameters: {\n        invitationCode: string,\n        model: Api.SharedCareInvitationAcceptBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sharedcare/incoming/invitations/{invitationCode}/acceptance';\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that allows new users to accept a shared care invitation they've received.\n     * @method\n     * @name SharedCare#AcceptSharedCareInvitationForNewPatient\n     * @param {string} invitationCode - The invitation code.\n     * @param {} model - The shared care invitation acceptance model.\n     */\n    AcceptSharedCareInvitationForNewPatient(parameters: {\n        invitationCode: string,\n        model: Api.SharedCareInvitationAcceptBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sharedcare/incoming/invitations/{invitationCode}/acceptance';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSharedCareInvitationURL(parameters: {\n        invitationCode: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sharedcare/invitations/{invitationCode}';\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the specified shared care invitation.\n     * @method\n     * @name SharedCare#GetSharedCareInvitation\n     * @param {string} invitationCode - The invitation code.\n     */\n    GetSharedCareInvitation(parameters: {\n        invitationCode: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sharedcare/invitations/{invitationCode}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AcceptSharedCareInvitationForExistingPatientURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that allows existing Patient IO Patients\n                    to accept a shared care invitation they've received.\n    * @method\n    * @name SharedCare#AcceptSharedCareInvitationForExistingPatient\n         * @param {string} distributorId - The distributor identifier\n         * @param {string} sponsorId - The sponsor identifier\n         * @param {string} patientId - The invited's patient identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} invitationCode - The invitation code.\n         * @param {string} authorization - access token\n    */\n    AcceptSharedCareInvitationForExistingPatient(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeOutgoingSharedCareMemberPermissionsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        sharedCarePatientId: string,\n        model: Api.SharedCarePermissionsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the shared care patient permissions.\n     * @method\n     * @name SharedCare#ChangeOutgoingSharedCareMemberPermissions\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} sharedCarePatientId - The shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The shared care permissions model.\n     * @param {string} authorization - access token\n     */\n    ChangeOutgoingSharedCareMemberPermissions(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        sharedCarePatientId: string,\n        model: Api.SharedCarePermissionsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n            if (parameters['sharedCarePatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sharedCarePatientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveOutgoingSharedCareMemberURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes shared care rights from a patient, for a relation.\n     * @method\n     * @name SharedCare#RemoveOutgoingSharedCareMember\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} sharedCarePatientId - The shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    RemoveOutgoingSharedCareMember(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n            if (parameters['sharedCarePatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sharedCarePatientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeclineSharedCareInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that declines a shared care invitation.\n     * @method\n     * @name SharedCare#DeclineSharedCareInvitation\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    DeclineSharedCareInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPendingReceivedSharedCareInvitationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a patient's received shared care invitations.\n     * @method\n     * @name SharedCare#GetPendingReceivedSharedCareInvitations\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    GetPendingReceivedSharedCareInvitations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemovePatientFromIncomingSharedCareURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a patient from the incoming shared care of the specified patient.\n     * @method\n     * @name SharedCare#RemovePatientFromIncomingSharedCare\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} sharedCarePatientId - The incoming shared care patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} authorization - access token\n     */\n    RemovePatientFromIncomingSharedCare(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n            if (parameters['sharedCarePatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sharedCarePatientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RevokeSharedCareInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that revokes a shared care invitation.\n     * @method\n     * @name SharedCare#RevokeSharedCareInvitation\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    RevokeSharedCareInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendSharedCareInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.SharedCareInvitationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a patient invitation, and sends a notice to the invited patient.\n     * @method\n     * @name SharedCare#SendSharedCareInvitation\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The shared care invitation creation model.\n     * @param {string} authorization - access token\n     */\n    SendSharedCareInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        model: Api.SharedCareInvitationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendSharedCareInvitationEmailURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sends the shared care invitation email.\n     * @method\n     * @name SharedCare#SendSharedCareInvitationEmail\n     * @param {string} distributorId - The distributor identifier\n     * @param {string} sponsorId - The sponsor identifier\n     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    SendSharedCareInvitationEmail(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/shared-care.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class SharedCareInternal\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class SharedCareInternal extends ApiClass {\n\n    AcceptSharedCareInvitationForExistingPatientInternalURL(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that allows existing Patient IO Patients\n                    to accept a shared care invitation they've received.\n    * @method\n    * @name SharedCareInternal#AcceptSharedCareInvitationForExistingPatientInternal\n         * @param {string} patientId - The invited's patient identifier.\n         * @param {string} invitationCode - The invitation code.\n         * @param {string} authorization - access token\n    */\n    AcceptSharedCareInvitationForExistingPatientInternal(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeOutgoingSharedCareMemberPermissionsInternalURL(parameters: {\n        patientId: string,\n        sharedCarePatientId: string,\n        model: Api.SharedCarePermissionsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the shared care patient permissions.\n     * @method\n     * @name SharedCareInternal#ChangeOutgoingSharedCareMemberPermissionsInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} sharedCarePatientId - The shared care patient identifier.\n     * @param {} model - The shared care permissions model.\n     * @param {string} authorization - access token\n     */\n    ChangeOutgoingSharedCareMemberPermissionsInternal(parameters: {\n        patientId: string,\n        sharedCarePatientId: string,\n        model: Api.SharedCarePermissionsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n            if (parameters['sharedCarePatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sharedCarePatientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveOutgoingSharedCareMemberInternalURL(parameters: {\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes shared care rights from a patient, for a relation.\n     * @method\n     * @name SharedCareInternal#RemoveOutgoingSharedCareMemberInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} sharedCarePatientId - The shared care patient identifier.\n     * @param {string} authorization - access token\n     */\n    RemoveOutgoingSharedCareMemberInternal(parameters: {\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n            if (parameters['sharedCarePatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sharedCarePatientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeclineSharedCareInvitationInternalURL(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that declines a shared care invitation.\n     * @method\n     * @name SharedCareInternal#DeclineSharedCareInvitationInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    DeclineSharedCareInvitationInternal(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPendingReceivedSharedCareInvitationsInternalURL(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a patient's received shared care invitations.\n     * @method\n     * @name SharedCareInternal#GetPendingReceivedSharedCareInvitationsInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} authorization - access token\n     */\n    GetPendingReceivedSharedCareInvitationsInternal(parameters: {\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemovePatientFromIncomingSharedCareInternalURL(parameters: {\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a patient from the incoming shared care of the specified patient.\n     * @method\n     * @name SharedCareInternal#RemovePatientFromIncomingSharedCareInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} sharedCarePatientId - The incoming shared care patient identifier.\n     * @param {string} authorization - access token\n     */\n    RemovePatientFromIncomingSharedCareInternal(parameters: {\n        patientId: string,\n        sharedCarePatientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);\n\n            if (parameters['sharedCarePatientId'] === undefined) {\n                reject(new Error('Missing required  parameter: sharedCarePatientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RevokeSharedCareInvitationInternalURL(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that revokes a shared care invitation.\n     * @method\n     * @name SharedCareInternal#RevokeSharedCareInvitationInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    RevokeSharedCareInvitationInternal(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendSharedCareInvitationInternalURL(parameters: {\n        patientId: string,\n        model: Api.SharedCareInvitationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a patient invitation, and sends a notice to the invited patient.\n     * @method\n     * @name SharedCareInternal#SendSharedCareInvitationInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {} model - The shared care invitation creation model.\n     * @param {string} authorization - access token\n     */\n    SendSharedCareInvitationInternal(parameters: {\n        patientId: string,\n        model: Api.SharedCareInvitationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    SendSharedCareInvitationEmailInternalURL(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';\n\n        path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that sends the shared care invitation email.\n     * @method\n     * @name SharedCareInternal#SendSharedCareInvitationEmailInternal\n     * @param {string} patientId - The patient identifier.\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    SendSharedCareInvitationEmailInternal(parameters: {\n        patientId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{patientId}', `${parameters['patientId']}`);\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/shared-care-internal.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Sponsors\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Sponsors extends ApiClass {\n\n    ChangeOrganizationSettingsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.OrganizationSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/settings';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that modifies organization settings.\n     * @method\n     * @name Sponsors#ChangeOrganizationSettings\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The organization settings model.\n     * @param {string} authorization - access token\n     */\n    ChangeOrganizationSettings(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.OrganizationSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/settings';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorOrganizationIdURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.SponsorOrganizationIdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/sponsorOrganizationId';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that changes the SponsorOrganizationId of an organization.\n                    The SponsorOrganizationId is an identifier, meaningful to a client, which\n                    describes an Organization (e.g. an id number.)\n    * @method\n    * @name Sponsors#ChangeSponsorOrganizationId\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {} model - The sponsor organization identifier model.\n         * @param {string} authorization - access token\n    */\n    ChangeSponsorOrganizationId(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.SponsorOrganizationIdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/sponsorOrganizationId';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorSettingsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SponsorSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/settings';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes sponsor settings.\n     * @method\n     * @name Sponsors#ChangeSponsorSettings\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The sponsor settings model.\n     * @param {string} authorization - access token\n     */\n    ChangeSponsorSettings(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SponsorSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/settings';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorSecretsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets sponsor secrets.\n     * @method\n     * @name Sponsors#GetSponsorSecrets\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetSponsorSecrets(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorSecretsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SponsorSecretsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes sponsor secrets.\n     * @method\n     * @name Sponsors#ChangeSponsorSecrets\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The sponsor secrets model.\n     * @param {string} authorization - access token\n     */\n    ChangeSponsorSecrets(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SponsorSecretsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetOrganizationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves information about every organization within a sponsor.\n     * @method\n     * @name Sponsors#GetOrganizations\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetOrganizations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.OrganizationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates an Organization within a sponsor.\n                    An Organization is meant to be any organizational unit,\n                    like a physical location or region.\n    * @method\n    * @name Sponsors#CreateOrganization\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The organization creation model.\n         * @param {string} authorization - access token\n    */\n    CreateOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.OrganizationCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves information about a single organization within a Sponsor.\n     * @method\n     * @name Sponsors#GetOrganization\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     */\n    GetOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteOrganizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an Organization within a sponsor.\n     * @method\n     * @name Sponsors#DeleteOrganization\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteOrganization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetOrganizationBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the branding information for an organization.\n     * @method\n     * @name Sponsors#GetOrganizationBranding\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     */\n    GetOrganizationBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.BrandingBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding for the organization.\n     * @method\n     * @name Sponsors#UpdateOrganizationBranding\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The branding model.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.BrandingBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteOrganizationBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes Organization level branding.\n                    Branding describes how dynamic white labeling\n                    functionality works at the organization level.\n    * @method\n    * @name Sponsors#DeleteOrganizationBranding\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} authorization - access token\n    */\n    DeleteOrganizationBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadOrganizationPhotoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a photo for the organization.\n     * @method\n     * @name Sponsors#UploadOrganizationPhoto\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {string} authorization - access token\n     */\n    UploadOrganizationPhoto(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteOrganizationPhotoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes the photo for an organization,\n                    which is used an Organization identification pages.\n    * @method\n    * @name Sponsors#DeleteOrganizationPhoto\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} organizationId - The organization identifier.\n         * @param {string} authorization - access token\n    */\n    DeleteOrganizationPhoto(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves information about a sponsor.\n                    Different role types may receive a more limited view of Sponsor information.\n    * @method\n    * @name Sponsors#GetSponsor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    GetSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteSponsorURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes a Sponsor within a distributor - also all\n                    care plans, patients, users, content and related data.\n                    Cannot be reversed or recovered.\n    * @method\n    * @name Sponsors#DeleteSponsor\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor to be delete.\n         * @param {string} authorization - access token\n    */\n    DeleteSponsor(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the branding for the sponsor.\n     * @method\n     * @name Sponsors#GetSponsorBranding\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     */\n    GetSponsorBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.BrandingBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding for the sponsor.\n     * @method\n     * @name Sponsors#UpdateSponsorBranding\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The branding model.\n     * @param {string} authorization - access token\n     */\n    UpdateSponsorBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.BrandingBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteSponsorBrandingURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes the branding for a Sponsor,\n                    which causes the Sponsor and any Organizations that do not have\n                    their own branding, to revert to default Patient IO branding.\n    * @method\n    * @name Sponsors#DeleteSponsorBranding\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} authorization - access token\n    */\n    DeleteSponsorBranding(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteSponsorSecretURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        secretKey: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets/{secretKey}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{secretKey}', `${parameters['secretKey']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Deletes a sponsor secret from the sponsor secrets object.\n     * @method\n     * @name Sponsors#DeleteSponsorSecret\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - the sponsor identifier.\n     * @param {string} secretKey - The name of the secret to delete.\n     * @param {string} authorization - access token\n     */\n    DeleteSponsorSecret(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        secretKey: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/secrets/{secretKey}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{secretKey}', `${parameters['secretKey']}`);\n\n            if (parameters['secretKey'] === undefined) {\n                reject(new Error('Missing required  parameter: secretKey'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorAuthorizationCodesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves all assigned authorization codes for a sponsor.\n     * @method\n     * @name Sponsors#GetSponsorAuthorizationCodes\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetSponsorAuthorizationCodes(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/authorizationcodes';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorCountsForDateRangeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/counts';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the counts for the sponsor for the specified date range.\n     * @method\n     * @name Sponsors#GetSponsorCountsForDateRange\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} fromDate - From date.\n     * @param {string} toDate - To date.\n     * @param {string} authorization - access token\n     */\n    GetSponsorCountsForDateRange(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/counts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorDataByNameURL(parameters: {\n        distributorId: string,\n        sponsorName: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/names/{sponsorName}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves a limited subset of information about a sponsor,\n                    given a sponsor name. Primarily omits sponsor tasks, care plans, organization\n                    population count information.\n    * @method\n    * @name Sponsors#GetSponsorDataByName\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorName - Name of the sponsor.\n    */\n    GetSponsorDataByName(parameters: {\n        distributorId: string,\n        sponsorName: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/names/{sponsorName}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorName}', `${parameters['sponsorName']}`);\n\n            if (parameters['sponsorName'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorName'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorDataByRegistrationCodeURL(parameters: {\n        distributorId: string,\n        id: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{id}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{id}', `${parameters['id']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets data for a sponsor, within a distributor, with a given registration\n     * @method\n     * @name Sponsors#GetSponsorDataByRegistrationCode\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} id - The identifier.\n     */\n    GetSponsorDataByRegistrationCode(parameters: {\n        distributorId: string,\n        id: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{id}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{id}', `${parameters['id']}`);\n\n            if (parameters['id'] === undefined) {\n                reject(new Error('Missing required  parameter: id'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationAddressURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.AddressBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/address';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the organization address.\n     * @method\n     * @name Sponsors#UpdateOrganizationAddress\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The address model.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationAddress(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.AddressBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/address';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationDescriptionURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.OrganizationDescriptionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/description';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the name of the organization.\n     * @method\n     * @name Sponsors#UpdateOrganizationDescription\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The for updating the description.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationDescription(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.OrganizationDescriptionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/description';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationDigitalContractURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.DigitalContactInformationBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/digitalcontact';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the organization digital contact information for an organization.\n     * @method\n     * @name Sponsors#UpdateOrganizationDigitalContract\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The digital contact information model.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationDigitalContract(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.DigitalContactInformationBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/digitalcontact';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationNameURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.OrganizationNameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the name of an organization.\n     * @method\n     * @name Sponsors#UpdateOrganizationName\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The organization name model.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationName(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.OrganizationNameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateOrganizationPhoneNumberURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.TelephoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/phonenumber';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates an organization phone number.\n     * @method\n     * @name Sponsors#UpdateOrganizationPhoneNumber\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {} model - The telephone model.\n     * @param {string} authorization - access token\n     */\n    UpdateOrganizationPhoneNumber(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        model: Api.TelephoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/phonenumber';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadOrganizationBrandingLogoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/logo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding logo for the organization.\n     * @method\n     * @name Sponsors#UploadOrganizationBrandingLogo\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {string} authorization - access token\n     */\n    UploadOrganizationBrandingLogo(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/logo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadOrganizationBrandingEmailLogoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/emaillogo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding email logo for the organization.\n     * @method\n     * @name Sponsors#UploadOrganizationBrandingEmailLogo\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} organizationId - The organization identifier.\n     * @param {string} authorization - access token\n     */\n    UploadOrganizationBrandingEmailLogo(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/branding/emaillogo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{organizationId}', `${parameters['organizationId']}`);\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadSponsorBrandingLogoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/logo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branding logo for a sponsor.\n     * @method\n     * @name Sponsors#UploadSponsorBrandingLogo\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    UploadSponsorBrandingLogo(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/logo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadSponsorBrandingEmailLogoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/emaillogo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * THis is a method that update the branding email logo for a sponsor.\n     * @method\n     * @name Sponsors#UploadSponsorBrandingEmailLogo\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    UploadSponsorBrandingEmailLogo(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/branding/emaillogo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSignaledAlertsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        activeOnly ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/signaledalerts';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters['activeOnly'] !== undefined) {\n            queryParameters['activeOnly'] = parameters['activeOnly'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Retrieves signaled alerts for the provided sponsor across a date range.\n     * @method\n     * @name Sponsors#GetSignaledAlerts\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} fromDate - From date (inclusive).\n     * @param {string} toDate - To date (inclusive).\n     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.\n     * @param {string} authorization - access token\n     */\n    GetSignaledAlerts(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        fromDate: string,\n        toDate: string,\n        activeOnly ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/signaledalerts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['fromDate'] === undefined) {\n                reject(new Error('Missing required  parameter: fromDate'));\n                return;\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['toDate'] === undefined) {\n                reject(new Error('Missing required  parameter: toDate'));\n                return;\n            }\n\n            if (parameters['activeOnly'] !== undefined) {\n                queryParameters['activeOnly'] = parameters['activeOnly'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    TestSmsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PhoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/testsms';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This method sends a test SMS message to a specified number.  This exists\n                    for the purpose of verifying that a sponsor has SMS configured properly.\n    * @method\n    * @name Sponsors#TestSms\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The PhoneBindingModel.\n         * @param {string} authorization - access token\n    */\n    TestSms(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.PhoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/testsms';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/sponsors.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class SponsorWebHook\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class SponsorWebHook extends ApiClass {\n\n    GetWebHooksURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the current web hooks for the sponsor.\n     * @method\n     * @name SponsorWebHook#GetWebHooks\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetWebHooks(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateWebHookURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.WebHookCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a web hook for the sponsor.\n     * @method\n     * @name SponsorWebHook#CreateWebHook\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The web hook model.\n     * @param {string} authorization - access token\n     */\n    CreateWebHook(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.WebHookCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateWebHookURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        webHookId: string,\n        model: Api.WebHookUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{webHookId}', `${parameters['webHookId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a particular web hook for a sponsor.\n     * @method\n     * @name SponsorWebHook#UpdateWebHook\n     * @param {string} distributorId - The distributor identifier,\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} webHookId - The web hook identifier.\n     * @param {} model - The web hook model.\n     * @param {string} authorization - access token\n     */\n    UpdateWebHook(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        webHookId: string,\n        model: Api.WebHookUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{webHookId}', `${parameters['webHookId']}`);\n\n            if (parameters['webHookId'] === undefined) {\n                reject(new Error('Missing required  parameter: webHookId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteWebHookURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        webHookId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{webHookId}', `${parameters['webHookId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that delete's a particular web hook for a sponsor.\n     * @method\n     * @name SponsorWebHook#DeleteWebHook\n     * @param {string} distributorId - The distributor identifier,\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} webHookId - The web hook identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteWebHook(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        webHookId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/{webHookId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{webHookId}', `${parameters['webHookId']}`);\n\n            if (parameters['webHookId'] === undefined) {\n                reject(new Error('Missing required  parameter: webHookId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    BulkUpdateWebHookPayloadTypesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        payloadType: \"PatientIo\" | \"Fhir\",\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/bulkupdate/{payloadType}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{payloadType}', `${parameters['payloadType']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates multiple web hooks with a new payload type\n     * @method\n     * @name SponsorWebHook#BulkUpdateWebHookPayloadTypes\n     * @param {string} distributorId - \n     * @param {string} sponsorId - \n     * @param {string} payloadType - \n     * @param {} model - The list of web hook ids\n     * @param {string} authorization - access token\n     */\n    BulkUpdateWebHookPayloadTypes(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        payloadType: \"PatientIo\" | \"Fhir\",\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/bulkupdate/{payloadType}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{payloadType}', `${parameters['payloadType']}`);\n\n            if (parameters['payloadType'] === undefined) {\n                reject(new Error('Missing required  parameter: payloadType'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateWebHookAuthorizationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.WebHookAuthorizationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/authorization';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a particular web hook's authorization for a sponsor.\n     * @method\n     * @name SponsorWebHook#UpdateWebHookAuthorization\n     * @param {string} distributorId - The distributor identifier,\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The web hook model.\n     * @param {string} authorization - access token\n     */\n    UpdateWebHookAuthorization(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.WebHookAuthorizationUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/webhooks/authorization';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/sponsor-web-hook.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Surveys\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Surveys extends ApiClass {\n\n    GetSurveysURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a collection of surveys for a sponsor.\n     * @method\n     * @name Surveys#GetSurveys\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetSurveys(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SurveyCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a new survey.\n     * @method\n     * @name Surveys#Create\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The survey creation model.\n     * @param {string} authorization - access token\n     */\n    Create(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.SurveyCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorSurveysURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a collection of surveys for a distributor.\n     * @method\n     * @name Surveys#GetDistributorSurveys\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorSurveys(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorSurveyURL(parameters: {\n        distributorId: string,\n        model: Api.SurveyCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a new survey.\n     * @method\n     * @name Surveys#CreateDistributorSurvey\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The survey creation model.\n     * @param {string} authorization - access token\n     */\n    CreateDistributorSurvey(parameters: {\n        distributorId: string,\n        model: Api.SurveyCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSurveyURL(parameters: {\n        surveyId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/surveys/{surveyId}';\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a survey.\n     * @method\n     * @name Surveys#GetSurvey\n     * @param {string} surveyId - The survey identifier.\n     * @param {string} authorization - access token\n     */\n    GetSurvey(parameters: {\n        surveyId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/surveys/{surveyId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorSurveyURL(parameters: {\n        distributorId: string,\n        surveyId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a survey.\n     * @method\n     * @name Surveys#GetDistributorSurvey\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorSurvey(parameters: {\n        distributorId: string,\n        surveyId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorSurveyURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a survey.\n     * @method\n     * @name Surveys#GetSponsorSurvey\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {string} authorization - access token\n     */\n    GetSponsorSurvey(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a survey.\n     * @method\n     * @name Surveys#Rename\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The name model.\n     * @param {string} authorization - access token\n     */\n    Rename(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameDistributorSurveyURL(parameters: {\n        distributorId: string,\n        surveyId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a survey.\n     * @method\n     * @name Surveys#RenameDistributorSurvey\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The name model.\n     * @param {string} authorization - access token\n     */\n    RenameDistributorSurvey(parameters: {\n        distributorId: string,\n        surveyId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateBranchesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.SurveyBranchesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/branches';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branches of an existing survey.\n     * @method\n     * @name Surveys#UpdateBranches\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The survey's branches.\n     * @param {string} authorization - access token\n     */\n    UpdateBranches(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.SurveyBranchesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/branches';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorBranchesURL(parameters: {\n        distributorId: string,\n        surveyId: string,\n        model: Api.SurveyBranchesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/branches';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the branches of an existing survey.\n     * @method\n     * @name Surveys#UpdateDistributorBranches\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The survey's branches.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorBranches(parameters: {\n        distributorId: string,\n        surveyId: string,\n        model: Api.SurveyBranchesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/branches';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorStateURL(parameters: {\n        distributorId: string,\n        surveyId: string,\n        model: Api.SurveyStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/state';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that activates an existing survey.\n     * @method\n     * @name Surveys#UpdateDistributorState\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The survey state model.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorState(parameters: {\n        distributorId: string,\n        surveyId: string,\n        model: Api.SurveyStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/surveys/{surveyId}/state';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateStateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.SurveyStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/state';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that activates an existing survey.\n     * @method\n     * @name Surveys#UpdateState\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The survey state model.\n     * @param {string} authorization - access token\n     */\n    UpdateState(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.SurveyStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/state';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorSurveyIdURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.SurveySponsorSurveyIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/sponsorsurveyid';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Responsible for updating the survey's sponsor survey id\n     * @method\n     * @name Surveys#UpdateSponsorSurveyId\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} surveyId - The survey identifier.\n     * @param {} model - The survey sponsor survey id model.\n     */\n    UpdateSponsorSurveyId(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        surveyId: string,\n        model: Api.SurveySponsorSurveyIdBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/surveys/{surveyId}/sponsorsurveyid';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{surveyId}', `${parameters['surveyId']}`);\n\n            if (parameters['surveyId'] === undefined) {\n                reject(new Error('Missing required  parameter: surveyId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/surveys.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Tasks\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Tasks extends ApiClass {\n\n    AddTagsToDistributorTaskURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TagListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/tags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds tags to a Distributor owned task. Tags are used to facilitate grouping\n                    and filtering Tasks.\n    * @method\n    * @name Tasks#AddTagsToDistributorTask\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} taskId - The task identifier.\n         * @param {} model - The tag list model.\n         * @param {string} authorization - access token\n    */\n    AddTagsToDistributorTask(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TagListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/tags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddTagsToSponsorTaskURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TagListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that adds tags to a Sponsor owned Task.\n                    Tags are used to facilitate grouping and filtering Tasks.\n    * @method\n    * @name Tasks#AddTagsToSponsorTask\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} taskId - The task identifier.\n         * @param {} model - The tag list model.\n         * @param {string} authorization - access token\n    */\n    AddTagsToSponsorTask(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TagListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveTagsFromDistributorTaskURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TagListBindingModel,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes tags from a distributor task.\n     * @method\n     * @name Tasks#RemoveTagsFromDistributorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The tag list model.\n     * @param {string} sponsorId - \n     * @param {string} authorization - access token\n     */\n    RemoveTagsFromDistributorTask(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TagListBindingModel,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/tags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeDistributorTaskContentURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskContentBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the content URI assigned to a distributor task\n     * @method\n     * @name Tasks#ChangeDistributorTaskContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The task content model.\n     * @param {string} authorization - access token\n     */\n    ChangeDistributorTaskContent(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskContentBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeDistributorTaskDeactivatedStateURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskDeactivatedStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/deactivated';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that activates or Deactivates a Distributor Task.\n                    A deactivated Task can no longer be assigned to a Patient.\n    * @method\n    * @name Tasks#ChangeDistributorTaskDeactivatedState\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} taskId - The task identifier.\n         * @param {} model - The task deactivated state model.\n         * @param {string} authorization - access token\n    */\n    ChangeDistributorTaskDeactivatedState(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskDeactivatedStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/deactivated';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeDistributorTaskDescriptionURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskDescriptionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/description';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the description for a Distributor Task\n     * @method\n     * @name Tasks#ChangeDistributorTaskDescription\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The task description model.\n     * @param {string} authorization - access token\n     */\n    ChangeDistributorTaskDescription(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskDescriptionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/description';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeDistributorTaskMeasurementURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskMeasurementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/measurement';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the Measurement information for a Distributor Task.\n     * @method\n     * @name Tasks#ChangeDistributorTaskMeasurement\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The task measurement model.\n     * @param {string} authorization - access token\n     */\n    ChangeDistributorTaskMeasurement(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskMeasurementBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/measurement';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeDistributorTaskCodesURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskCodesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/codes';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that changes the MedicalCodes of a distributor \n                task. Any existing codes are replaced.\n    * @method\n    * @name Tasks#ChangeDistributorTaskCodes\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} taskId - The task identifier.\n         * @param {} model - &gt;The MedicalCodes model.\n         * @param {string} authorization - access token\n    */\n    ChangeDistributorTaskCodes(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskCodesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/codes';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorTaskCodesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskCodesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/codes';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that changes the MedicalCodes of a task. \n                Any existing codes are replaced.\n    * @method\n    * @name Tasks#ChangeSponsorTaskCodes\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} taskId - The task identifier.\n         * @param {} model - The MedicalCodes model.\n         * @param {string} authorization - access token\n    */\n    ChangeSponsorTaskCodes(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskCodesBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/codes';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorTaskContentURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskContentBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/content';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the content URI of the sponsor task.\n     * @method\n     * @name Tasks#ChangeSponsorTaskContent\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The task content model.\n     * @param {string} authorization - access token\n     */\n    ChangeSponsorTaskContent(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskContentBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/content';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorTaskDeactivatedStateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskDeactivatedStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/deactivated';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that activates or deactivates a Sponsor Task.\n                    A deactivated task can no longer be assigned to Care Plans.\n    * @method\n    * @name Tasks#ChangeSponsorTaskDeactivatedState\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} taskId - The task identifier.\n         * @param {} model - The task deactivated state model.\n         * @param {string} authorization - access token\n    */\n    ChangeSponsorTaskDeactivatedState(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskDeactivatedStateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/deactivated';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorTaskDescriptionURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskDescriptionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/description';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the description for a sponsor task.\n     * @method\n     * @name Tasks#ChangeSponsorTaskDescription\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    ChangeSponsorTaskDescription(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskDescriptionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/description';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorTaskIdURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.SponsorTaskIdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/sponsortaskid';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that changes the sponsor task identifier for a sponsor task.\n     * @method\n     * @name Tasks#ChangeSponsorTaskId\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    ChangeSponsorTaskId(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.SponsorTaskIdBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/sponsortaskid';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorTasksURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets all Distributor tasks.\n     * @method\n     * @name Tasks#GetDistributorTasks\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorTasks(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorTaskURL(parameters: {\n        distributorId: string,\n        model: Api.TaskCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a distributor level task.\n     * @method\n     * @name Tasks#CreateDistributorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The task creation model.\n     * @param {string} authorization - access token\n     */\n    CreateDistributorTask(parameters: {\n        distributorId: string,\n        model: Api.TaskCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReplaceDistributorTaskTagURL(parameters: {\n        distributorId: string,\n        tagName: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasktags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n        if (parameters['tagName'] !== undefined) {\n            queryParameters['tagName'] = parameters['tagName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that replaces a TaskTag for a Distributor.\n     * @method\n     * @name Tasks#ReplaceDistributorTaskTag\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} tagName - The name of the tag to replace.\n     * @param {} model - The model for the name of the tag to add\n     * @param {string} authorization - access token\n     */\n    ReplaceDistributorTaskTag(parameters: {\n        distributorId: string,\n        tagName: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasktags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['tagName'] !== undefined) {\n                queryParameters['tagName'] = parameters['tagName'];\n            }\n\n            if (parameters['tagName'] === undefined) {\n                reject(new Error('Missing required  parameter: tagName'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorTaskTagURL(parameters: {\n        distributorId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasktags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a TaskTag for a Distributor\n     * @method\n     * @name Tasks#CreateDistributorTaskTag\n     * @param {string} distributorId - The distributor identifier.\n     * @param {} model - The model for the name of the tag to add\n     * @param {string} authorization - access token\n     */\n    CreateDistributorTaskTag(parameters: {\n        distributorId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasktags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorTaskTagURL(parameters: {\n        distributorId: string,\n        tagName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasktags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n        if (parameters['tagName'] !== undefined) {\n            queryParameters['tagName'] = parameters['tagName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that delete a TaskTag for a distributor.\n     * @method\n     * @name Tasks#DeleteDistributorTaskTag\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} tagName - The tag name.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorTaskTag(parameters: {\n        distributorId: string,\n        tagName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasktags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['tagName'] !== undefined) {\n                queryParameters['tagName'] = parameters['tagName'];\n            }\n\n            if (parameters['tagName'] === undefined) {\n                reject(new Error('Missing required  parameter: tagName'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorTasksURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the sponsor tasks.\n     * @method\n     * @name Tasks#GetSponsorTasks\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetSponsorTasks(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorTaskURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.TaskCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a task for a Sponsor.\n     * @method\n     * @name Tasks#CreateSponsorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The task creation model.\n     * @param {string} authorization - access token\n     */\n    CreateSponsorTask(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.TaskCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorTaskAlertURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.CreateTaskAlertBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates the task alert for a Task.\n     * @method\n     * @name Tasks#CreateSponsorTaskAlert\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    CreateSponsorTaskAlert(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.CreateTaskAlertBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ReplaceSponsorTaskTagURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        tagName: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['tagName'] !== undefined) {\n            queryParameters['tagName'] = parameters['tagName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that replaces a TaskTag for a Distributor.\n     * @method\n     * @name Tasks#ReplaceSponsorTaskTag\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} tagName - The name of the tag to replace.\n     * @param {} model - The model for the name of the tag to add\n     * @param {string} authorization - access token\n     */\n    ReplaceSponsorTaskTag(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        tagName: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['tagName'] !== undefined) {\n                queryParameters['tagName'] = parameters['tagName'];\n            }\n\n            if (parameters['tagName'] === undefined) {\n                reject(new Error('Missing required  parameter: tagName'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorTaskTagURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a TaskTag for a Sponsor\n     * @method\n     * @name Tasks#CreateSponsorTaskTag\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The model for the name of the tag to add\n     * @param {string} authorization - access token\n     */\n    CreateSponsorTaskTag(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteSponsorTaskTagURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        tagName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['tagName'] !== undefined) {\n            queryParameters['tagName'] = parameters['tagName'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a TaskTag from a Sponsor.\n     * @method\n     * @name Tasks#DeleteSponsorTaskTag\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} tagName - The name of the tag to delete.\n     * @param {string} authorization - access token\n     */\n    DeleteSponsorTaskTag(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        tagName: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasktags';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['tagName'] !== undefined) {\n                queryParameters['tagName'] = parameters['tagName'];\n            }\n\n            if (parameters['tagName'] === undefined) {\n                reject(new Error('Missing required  parameter: tagName'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorTaskURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a Distributor task.\n     * @method\n     * @name Tasks#GetDistributorTask\n     * @param {string} distributorId - The Distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorTask(parameters: {\n        distributorId: string,\n        taskId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorTaskURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a task for a sponsor.\n     * @method\n     * @name Tasks#UpdateDistributorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The task update model.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorTask(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.TaskUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorTaskURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the sponsor task.\n     * @method\n     * @name Tasks#GetSponsorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {string} authorization - access token\n     */\n    GetSponsorTask(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorTaskURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a task for a sponsor.\n     * @method\n     * @name Tasks#UpdateSponsorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The task update model.\n     * @param {string} authorization - access token\n     */\n    UpdateSponsorTask(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.TaskUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorTaskAlertURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        alertId: string,\n        model: Api.UpdateTaskAlertBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        path = path.replace('{alertId}', `${parameters['alertId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a task alert for a Task.\n     * @method\n     * @name Tasks#UpdateSponsorTaskAlert\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {string} alertId - The alert identifier.\n     * @param {} model - The task alert update model.\n     * @param {string} authorization - access token\n     */\n    UpdateSponsorTaskAlert(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        alertId: string,\n        model: Api.UpdateTaskAlertBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            path = path.replace('{alertId}', `${parameters['alertId']}`);\n\n            if (parameters['alertId'] === undefined) {\n                reject(new Error('Missing required  parameter: alertId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveSponsorTaskAlertURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        alertId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        path = path.replace('{alertId}', `${parameters['alertId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes the task alert for a Task.\n     * @method\n     * @name Tasks#RemoveSponsorTaskAlert\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {string} alertId - The alert identifier.\n     * @param {string} authorization - access token\n     */\n    RemoveSponsorTaskAlert(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        alertId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/alerts/{alertId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            path = path.replace('{alertId}', `${parameters['alertId']}`);\n\n            if (parameters['alertId'] === undefined) {\n                reject(new Error('Missing required  parameter: alertId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameDistributorTaskURL(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a task for a distributor.\n     * @method\n     * @name Tasks#RenameDistributorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The name model.\n     * @param {string} authorization - access token\n     */\n    RenameDistributorTask(parameters: {\n        distributorId: string,\n        taskId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/tasks/{taskId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RenameSponsorTaskURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/name';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that renames a task for a sponsor.\n     * @method\n     * @name Tasks#RenameSponsorTask\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} taskId - The task identifier.\n     * @param {} model - The name model.\n     * @param {string} authorization - access token\n     */\n    RenameSponsorTask(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        taskId: string,\n        model: Api.NameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/tasks/{taskId}/name';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{taskId}', `${parameters['taskId']}`);\n\n            if (parameters['taskId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/tasks.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class TaskScheduleItems\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class TaskScheduleItems extends ApiClass {\n\n    CreateDistributorTreatmentTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.TreatmentTaskScheduleItemBindingModel >\n            | Api.TreatmentTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates one or more TreatmentTaskScheduleItems within a TaskSchedule.\n     * @method\n     * @name TaskScheduleItems#CreateDistributorTreatmentTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The treatment task schedule items list.\n     * @param {string} authorization - access token\n     */\n    CreateDistributorTreatmentTaskScheduleItems(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.TreatmentTaskScheduleItemBindingModel >\n            | Api.TreatmentTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorTreatmentTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['taskScheduleItemIds'] !== undefined) {\n            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes TreatmentTaskScheduleItems from a distributor care plan.\n     * @method\n     * @name TaskScheduleItems#DeleteDistributorTreatmentTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {array} taskScheduleItemIds - The task schedule item ids.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorTreatmentTaskScheduleItems(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['taskScheduleItemIds'] !== undefined) {\n                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n            }\n\n            if (parameters['taskScheduleItemIds'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemIds'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    PatchDistributorTreatmentTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that makes common changes to all elements of a\n                    TaskSchedule which are TreatmentTaskScheduleItems\n    * @method\n    * @name TaskScheduleItems#PatchDistributorTreatmentTaskScheduleItems\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    PatchDistributorTreatmentTaskScheduleItems(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateTreatmentTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.TreatmentTaskScheduleItemBindingModel >\n            | Api.TreatmentTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates one or more TreatmentTaskScheduleItems within a TaskSchedule.\n     * @method\n     * @name TaskScheduleItems#CreateTreatmentTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The treatment task schedule items list.\n     * @param {string} authorization - access token\n     */\n    CreateTreatmentTaskScheduleItems(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.TreatmentTaskScheduleItemBindingModel >\n            | Api.TreatmentTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteTreatmentTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['taskScheduleItemIds'] !== undefined) {\n            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes TreatmentTaskScheduleItems\n     * @method\n     * @name TaskScheduleItems#DeleteTreatmentTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {array} taskScheduleItemIds - The task schedule item ids.\n     * @param {string} authorization - access token\n     */\n    DeleteTreatmentTaskScheduleItems(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['taskScheduleItemIds'] !== undefined) {\n                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n            }\n\n            if (parameters['taskScheduleItemIds'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemIds'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    PatchTreatmentTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that makes common changes to all elements of a\n                    TaskSchedule which are TreatmentTaskScheduleItems\n    * @method\n    * @name TaskScheduleItems#PatchTreatmentTaskScheduleItems\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    PatchTreatmentTaskScheduleItems(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorUntilCompleteTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates an until complete task schedule item.\n                    These items are intended to cause a given task to appear in a patient's\n                    schedule under a particular circumstance, generally related to time,\n                    and be scheduled continuously in a patient's schedule until the task is\n                    completed. The item can then appear again, according to a plan for repetition\n                    that can be specified in the UntilCompleteTaskScheduleItem\n    * @method\n    * @name TaskScheduleItems#CreateDistributorUntilCompleteTaskScheduleItem\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {} model - The until complete task schedule item model.\n         * @param {string} authorization - access token\n    */\n    CreateDistributorUntilCompleteTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateUntilCompleteTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates an until complete task schedule item.\n                    These items are intended to cause a given task to appear in a patient's\n                    schedule under a particular circumstance, generally related to time,\n                    and be scheduled continuously in a patient's schedule until the task is\n                    completed. The item can then appear again, according to a plan for repetition\n                    that can be specified in the UntilCompleteTaskScheduleItem\n    * @method\n    * @name TaskScheduleItems#CreateUntilCompleteTaskScheduleItem\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {} model - The until complete task schedule item model.\n         * @param {string} authorization - access token\n    */\n    CreateUntilCompleteTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorWeeklyTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.WeeklyTaskScheduleItemBindingModel >\n            | Api.WeeklyTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates one or more WeeklyTaskScheduleItems within a TaskSchedule\n     * @method\n     * @name TaskScheduleItems#CreateDistributorWeeklyTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The weekly task schedule item list.\n     * @param {string} authorization - access token\n     */\n    CreateDistributorWeeklyTaskScheduleItems(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.WeeklyTaskScheduleItemBindingModel >\n            | Api.WeeklyTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorWeeklyTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['taskScheduleItemIds'] !== undefined) {\n            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes one or more WeeklyTaskScheduleItems for a distributor care plan.\n     * @method\n     * @name TaskScheduleItems#DeleteDistributorWeeklyTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {array} taskScheduleItemIds - The task schedule item ids.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorWeeklyTaskScheduleItems(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['taskScheduleItemIds'] !== undefined) {\n                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n            }\n\n            if (parameters['taskScheduleItemIds'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemIds'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    PatchDistributorWeeklyTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that makes common changes to all elements of a TaskSchedule which are\n                    WeeklyTaskScheduleItems\n    * @method\n    * @name TaskScheduleItems#PatchDistributorWeeklyTaskScheduleItems\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    PatchDistributorWeeklyTaskScheduleItems(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateWeeklyTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.WeeklyTaskScheduleItemBindingModel >\n            | Api.WeeklyTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates one or more WeeklyTaskScheduleItems within a TaskSchedule\n     * @method\n     * @name TaskScheduleItems#CreateWeeklyTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The weekly task schedule item list.\n     * @param {string} authorization - access token\n     */\n    CreateWeeklyTaskScheduleItems(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Array < Api.WeeklyTaskScheduleItemBindingModel >\n            | Api.WeeklyTaskScheduleItemBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteWeeklyTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['taskScheduleItemIds'] !== undefined) {\n            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes one or more WeeklyTaskScheduleItems\n     * @method\n     * @name TaskScheduleItems#DeleteWeeklyTaskScheduleItems\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {array} taskScheduleItemIds - The task schedule item ids.\n     * @param {string} authorization - access token\n     */\n    DeleteWeeklyTaskScheduleItems(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemIds: Array < string >\n            | string\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['taskScheduleItemIds'] !== undefined) {\n                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];\n            }\n\n            if (parameters['taskScheduleItemIds'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemIds'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    PatchWeeklyTaskScheduleItemsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that makes common changes to all elements of a TaskSchedule which are\n                    WeeklyTaskScheduleItems\n    * @method\n    * @name TaskScheduleItems#PatchWeeklyTaskScheduleItems\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    PatchWeeklyTaskScheduleItems(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorTreatmentTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a TreatmentTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#GetDistributorTreatmentTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorTreatmentTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorTreatmentTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a TreatmentTaskScheduleItem's properties for which updates are allowed.\n    * @method\n    * @name TaskScheduleItems#UpdateDistributorTreatmentTaskScheduleItem\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} taskScheduleItemId - The task schedule item identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    UpdateDistributorTreatmentTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorTreatmentTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a TreatmentTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#DeleteDistributorTreatmentTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorTreatmentTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetTreatmentTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a TreatmentTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#GetTreatmentTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    GetTreatmentTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateTreatmentTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a TreatmentTaskScheduleItem's properties for which updates are allowed.\n    * @method\n    * @name TaskScheduleItems#UpdateTreatmentTaskScheduleItem\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} taskScheduleItemId - The task schedule item identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    UpdateTreatmentTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteTreatmentTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a TreatmentTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#DeleteTreatmentTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteTreatmentTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorUntilCompleteTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an UntilCompleteTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#DeleteDistributorUntilCompleteTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorUntilCompleteTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteUntilCompleteTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an UntilCompleteTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#DeleteUntilCompleteTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteUntilCompleteTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorWeeklyTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a WeeklyTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#GetDistributorWeeklyTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorWeeklyTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorWeeklyTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a WeeklyTaskScheduleItem's properties for which updates are allowed.\n    * @method\n    * @name TaskScheduleItems#UpdateDistributorWeeklyTaskScheduleItem\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} taskScheduleItemId - The task schedule item identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    UpdateDistributorWeeklyTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorWeeklyTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a WeeklyTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#DeleteDistributorWeeklyTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteDistributorWeeklyTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetWeeklyTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a WeeklyTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#GetWeeklyTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    GetWeeklyTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateWeeklyTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n        if (parameters['modelScheduledTime'] !== undefined) {\n            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n        }\n\n        if (parameters['modelScheduledTimePeriod'] !== undefined) {\n            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a WeeklyTaskScheduleItem's properties for which updates are allowed.\n    * @method\n    * @name TaskScheduleItems#UpdateWeeklyTaskScheduleItem\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} taskScheduleId - The task schedule identifier.\n         * @param {string} taskScheduleItemId - The task schedule item identifier.\n         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task\n         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary\n                time period like \"Morning\" or \"Before Breakfast\"\n         * @param {string} authorization - access token\n    */\n    UpdateWeeklyTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        modelScheduledTime ? : string,\n        modelScheduledTimePeriod ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['modelScheduledTime'] !== undefined) {\n                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];\n            }\n\n            if (parameters['modelScheduledTimePeriod'] !== undefined) {\n                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteWeeklyTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes a WeeklyTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#DeleteWeeklyTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {string} authorization - access token\n     */\n    DeleteWeeklyTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleItemId}', `${parameters['taskScheduleItemId']}`);\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorUntilCompleteTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['taskScheduleItemId'] !== undefined) {\n            queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates an UntilCompleteTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#UpdateDistributorUntilCompleteTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {} model - The until complete task schedule item model.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorUntilCompleteTaskScheduleItem(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['taskScheduleItemId'] !== undefined) {\n                queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];\n            }\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateUntilCompleteTaskScheduleItemURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n        if (parameters['taskScheduleItemId'] !== undefined) {\n            queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates an UntilCompleteTaskScheduleItem\n     * @method\n     * @name TaskScheduleItems#UpdateUntilCompleteTaskScheduleItem\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} taskScheduleItemId - The task schedule item identifier.\n     * @param {} model - The until complete task schedule item model.\n     * @param {string} authorization - access token\n     */\n    UpdateUntilCompleteTaskScheduleItem(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        taskScheduleItemId: string,\n        model: Api.UntilCompleteTaskScheduleItemBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['taskScheduleItemId'] !== undefined) {\n                queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];\n            }\n\n            if (parameters['taskScheduleItemId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleItemId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/task-schedule-items.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class TaskSchedules\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class TaskSchedules extends ApiClass {\n\n    CreateDistributorTaskScheduleURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        model: Array < Api.TaskScheduleBindingModel >\n            | Api.TaskScheduleBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates one or more task schedules within a Care Plan. \n                    This API also allows the creation of\n                    TaskScheduleItems at the same time that the TaskSchedule or schedules are\n                    created.\n    * @method\n    * @name TaskSchedules#CreateDistributorTaskSchedule\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} carePlanId - The care plan identifier.\n         * @param {} model - The information to be used in creating the TaskSchedule.\n         * @param {string} authorization - access token\n    */\n    CreateDistributorTaskSchedule(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        model: Array < Api.TaskScheduleBindingModel >\n            | Api.TaskScheduleBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateTaskScheduleURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Array < Api.TaskScheduleBindingModel >\n            | Api.TaskScheduleBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates one or more task schedules within a Care Plan. \n                    This API also allows the creation of\n                    TaskScheduleItems at the same time that the TaskSchedule or schedules are\n                    created.\n    * @method\n    * @name TaskSchedules#CreateTaskSchedule\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} carePlanId - The care plan identifier.\n         * @param {} model - The information to be used in creating the TaskSchedule.\n         * @param {string} authorization - access token\n    */\n    CreateTaskSchedule(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        model: Array < Api.TaskScheduleBindingModel >\n            | Api.TaskScheduleBindingModel\n\n            ,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ClearTaskSchedulesURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Clears the task schedules from a patient or personalized care plan.\n     * @method\n     * @name TaskSchedules#ClearTaskSchedules\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The careplan identifier.\n     * @param {string} authorization - access token\n     */\n    ClearTaskSchedules(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorTaskScheduleURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a TaskSchedule for a CarePlan.\n     * @method\n     * @name TaskSchedules#GetDistributorTaskSchedule\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} authorization - access token\n     */\n    GetDistributorTaskSchedule(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveDistributorTaskScheduleURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Remove task schedule froma  distributor.\n     * @method\n     * @name TaskSchedules#RemoveDistributorTaskSchedule\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} authorization - access token\n     */\n    RemoveDistributorTaskSchedule(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetTaskScheduleURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves a TaskSchedule for a CarePlan.\n     * @method\n     * @name TaskSchedules#GetTaskSchedule\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} authorization - access token\n     */\n    GetTaskSchedule(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveTaskScheduleURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that removes a TaskSchedule from a CarePlan\n     * @method\n     * @name TaskSchedules#RemoveTaskSchedule\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {string} authorization - access token\n     */\n    RemoveTaskSchedule(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateTaskScheduleNoteURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a note on a TaskSchedule\n     * @method\n     * @name TaskSchedules#UpdateTaskScheduleNote\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The for updating the note\n     * @param {string} authorization - access token\n     */\n    UpdateTaskScheduleNote(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorTaskScheduleNoteURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates a note on a distributor TaskSchedule\n     * @method\n     * @name TaskSchedules#UpdateDistributorTaskScheduleNote\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The for updating the note\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorTaskScheduleNote(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorTaskScheduleTargetURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleTargetUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the target on a Distributor TaskSchedule\n     * @method\n     * @name TaskSchedules#UpdateDistributorTaskScheduleTarget\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The for updating the note\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorTaskScheduleTarget(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleTargetUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateTaskScheduleTargetURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleTargetUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the target on a TaskSchedule\n     * @method\n     * @name TaskSchedules#UpdateTaskScheduleTarget\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The for updating the note\n     * @param {string} authorization - access token\n     */\n    UpdateTaskScheduleTarget(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleTargetUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorTaskScheduleRolesAllowedToRecordOutcomeURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a Distributor TaskSchedule\n     * @method\n     * @name TaskSchedules#UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The for updating the note\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateTaskScheduleRolesAllowedToRecordOutcomeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a TaskSchedule\n     * @method\n     * @name TaskSchedules#UpdateTaskScheduleRolesAllowedToRecordOutcome\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The for updating the note\n     * @param {string} authorization - access token\n     */\n    UpdateTaskScheduleRolesAllowedToRecordOutcome(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorTaskScheduleIsDeactivatedURL(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleIsDeactivatedBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.\n     * @method\n     * @name TaskSchedules#UpdateDistributorTaskScheduleIsDeactivated\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The binding model.\n     * @param {string} authorization - access token\n     */\n    UpdateDistributorTaskScheduleIsDeactivated(parameters: {\n        distributorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleIsDeactivatedBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateTaskScheduleIsDeactivatedURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleIsDeactivatedBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.\n     * @method\n     * @name TaskSchedules#UpdateTaskScheduleIsDeactivated\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} carePlanId - The care plan identifier.\n     * @param {string} taskScheduleId - The task schedule identifier.\n     * @param {} model - The binding model.\n     * @param {string} authorization - access token\n     */\n    UpdateTaskScheduleIsDeactivated(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        carePlanId: string,\n        taskScheduleId: string,\n        model: Api.TaskScheduleIsDeactivatedBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);\n\n            if (parameters['carePlanId'] === undefined) {\n                reject(new Error('Missing required  parameter: carePlanId'));\n                return;\n            }\n\n            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);\n\n            if (parameters['taskScheduleId'] === undefined) {\n                reject(new Error('Missing required  parameter: taskScheduleId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/task-schedules.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class Time\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class Time extends ApiClass {\n\n    GetTimeZonesURL(parameters: {\n        countryCode: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/timezones/{countryCode}';\n\n        path = path.replace('{countryCode}', `${parameters['countryCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets the time zones.\n     * @method\n     * @name Time#GetTimeZones\n     * @param {string} countryCode - The country code.\n     */\n    GetTimeZones(parameters: {\n        countryCode: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/timezones/{countryCode}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{countryCode}', `${parameters['countryCode']}`);\n\n            if (parameters['countryCode'] === undefined) {\n                reject(new Error('Missing required  parameter: countryCode'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/time.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class TimeCard\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class TimeCard extends ApiClass {\n\n    CreateTimeCardRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.TimeCardRecordCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates time card entries. Requires a checkin record,\n                    may optionally include a checkout record.\n    * @method\n    * @name TimeCard#CreateTimeCardRecord\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier.\n         * @param {} model - The time card record to create.\n         * @param {string} authorization - access token\n    */\n    CreateTimeCardRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.TimeCardRecordCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetCurrentTimeCardURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n        if (parameters['patientId'] !== undefined) {\n            queryParameters['patientId'] = parameters['patientId'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves the current time card for a user (if a time card exists)\n                    for a patient.\n    * @method\n    * @name TimeCard#GetCurrentTimeCard\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier.\n         * @param {string} patientId - Required - the  patient id must be specified\n         * @param {string} authorization - access token\n    */\n    GetCurrentTimeCard(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['patientId'] !== undefined) {\n                queryParameters['patientId'] = parameters['patientId'];\n            }\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateCurrentTimeCardURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.CurrentTimeCardActionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * If the user has an existing time\n     * @method\n     * @name TimeCard#UpdateCurrentTimeCard\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier.\n     * @param {} model - Requested update to the current time card.\n     * @param {string} authorization - access token\n     */\n    UpdateCurrentTimeCard(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.CurrentTimeCardActionBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/current';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetPatientTimeCardURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDate ? : string,\n        toDate ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['patientId'] !== undefined) {\n            queryParameters['patientId'] = parameters['patientId'];\n        }\n\n        if (parameters['fromDate'] !== undefined) {\n            queryParameters['fromDate'] = parameters['fromDate'];\n        }\n\n        if (parameters['toDate'] !== undefined) {\n            queryParameters['toDate'] = parameters['toDate'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves the time card for a patient, showing all of a given sponsor's\n                    user  interactions with that patient.\n    * @method\n    * @name TimeCard#GetPatientTimeCard\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} patientId - Filter to a single patient\n         * @param {string} fromDate - The beginning point, in UTC, from which to search for time cards, inclusive. May be omitted\n         * @param {string} toDate - The endpoints point, in UTC, to which to search for time cards, inclusive. May be omitted\n         * @param {string} authorization - access token\n    */\n    GetPatientTimeCard(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        patientId: string,\n        fromDate ? : string,\n        toDate ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/timecards';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['patientId'] !== undefined) {\n                queryParameters['patientId'] = parameters['patientId'];\n            }\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['fromDate'] !== undefined) {\n                queryParameters['fromDate'] = parameters['fromDate'];\n            }\n\n            if (parameters['toDate'] !== undefined) {\n                queryParameters['toDate'] = parameters['toDate'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetRecentTimeCardsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n        if (parameters['patientId'] !== undefined) {\n            queryParameters['patientId'] = parameters['patientId'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that retrieves recent time card records for a user/patient. Generally, that\n                    means records during the 24 hours prior to the most recent time card entry\n    * @method\n    * @name TimeCard#GetRecentTimeCards\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier.\n         * @param {string} patientId - Required - the  patient id must be specified\n         * @param {string} authorization - access token\n    */\n    GetRecentTimeCards(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/recent';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['patientId'] !== undefined) {\n                queryParameters['patientId'] = parameters['patientId'];\n            }\n\n            if (parameters['patientId'] === undefined) {\n                reject(new Error('Missing required  parameter: patientId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetTimeCardRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        timeCardRecordId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the time card record corresponding to a particular id.\n     * @method\n     * @name TimeCard#GetTimeCardRecord\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier.\n     * @param {string} timeCardRecordId - The time card record identifier.\n     * @param {string} authorization - access token\n     */\n    GetTimeCardRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        timeCardRecordId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);\n\n            if (parameters['timeCardRecordId'] === undefined) {\n                reject(new Error('Missing required  parameter: timeCardRecordId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateTimeCardRecordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        timeCardRecordId: string,\n        model: Api.TimeCardRecordUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates time card record actions given a time card id.\n                    All values for the action must be supplied, or existing data will be\n                    blanked.\n    * @method\n    * @name TimeCard#UpdateTimeCardRecord\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier.\n         * @param {string} timeCardRecordId - The time card record identifier.\n         * @param {} model - The time card record update.\n         * @param {string} authorization - access token\n    */\n    UpdateTimeCardRecord(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        timeCardRecordId: string,\n        model: Api.TimeCardRecordUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards/records/{timeCardRecordId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            path = path.replace('{timeCardRecordId}', `${parameters['timeCardRecordId']}`);\n\n            if (parameters['timeCardRecordId'] === undefined) {\n                reject(new Error('Missing required  parameter: timeCardRecordId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetUserPatientTimeCardURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n        if (parameters['patientId'] !== undefined) {\n            queryParameters['patientId'] = parameters['patientId'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that retrieves the time card for a user's interactions with a patient\n     * @method\n     * @name TimeCard#GetUserPatientTimeCard\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier.\n     * @param {string} patientId - Optional - if not specified retrieves all timecards for all patients\n     * @param {string} authorization - access token\n     */\n    GetUserPatientTimeCard(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        patientId ? : string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timecards';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['patientId'] !== undefined) {\n                queryParameters['patientId'] = parameters['patientId'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/time-card.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class User\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class User extends ApiClass {\n\n    AddRolesToSponsorUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that assigns roles to a user scoped to a specific sponsor.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#AddRolesToSponsorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - List of roles to assign.\n         * @param {string} authorization - access token\n    */\n    AddRolesToSponsorUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteRolesFromSponsorUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes the roles from a sponsor user.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#DeleteRolesFromSponsorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - List of roles to remove.\n         * @param {string} authorization - access token\n    */\n    DeleteRolesFromSponsorUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AffiliateUserToOrganizationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that affiliates a user to organizations.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#AffiliateUserToOrganizations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The list of organization ids to assign.\n         * @param {string} authorization - access token\n    */\n    AffiliateUserToOrganizations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    RemoveUserAffiliationToOrganizationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that removes a user's affiliation to organizations.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#RemoveUserAffiliationToOrganizations\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The organization(s) to disaffiliate  from a user.\n         * @param {string} authorization - access token\n    */\n    RemoveUserAffiliationToOrganizations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.IdListBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/organizations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ArchiveSponsorUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/archive';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that archives the specified sponsor user.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#ArchiveSponsorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    ArchiveSponsorUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/archive';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePasswordURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/password';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that changes the password for a user. This API relies\n                    on the call used being authorized in the system and knowing the existing password.\n                    Higher privilege users may reset the password using this API without knowing the\n                    existing password.\n    * @method\n    * @name User#ChangePassword\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The change password binding model which contains the current password and the new one.\n         * @param {string} authorization - access token\n    */\n    ChangePassword(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/password';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangeSponsorUserSettingsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.UserSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/settings';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that changes the settings of a sponsor user.\n                    This method requires the call to the user or sponsor admin level.\n    * @method\n    * @name User#ChangeSponsorUserSettings\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The user settings model.\n         * @param {string} authorization - access token\n    */\n    ChangeSponsorUserSettings(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.UserSettingsBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/settings';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorUserListURL(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a list of distributor users.\n                    This method requires distributor admin level rights or higher.\n    * @method\n    * @name User#GetDistributorUserList\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} authorization - access token\n    */\n    GetDistributorUserList(parameters: {\n        distributorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateDistributorUserURL(parameters: {\n        distributorId: string,\n        model: Api.UserCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates a new user record within a distributor.\n                    This method requires distributor admin level rights or higher.\n    * @method\n    * @name User#CreateDistributorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {} model - The user creatioin model.\n         * @param {string} authorization - access token\n    */\n    CreateDistributorUser(parameters: {\n        distributorId: string,\n        model: Api.UserCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorUserListURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId ? : Array < string >\n            | string\n\n            ,\n        archived ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['organizationId'] !== undefined) {\n            queryParameters['organizationId'] = parameters['organizationId'];\n        }\n\n        if (parameters['archived'] !== undefined) {\n            queryParameters['archived'] = parameters['archived'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * Gets the sponsor user list for each the current user.\n                    Depending on their role, they will see different users.\n    * @method\n    * @name User#GetSponsorUserList\n         * @param {string} distributorId - The distributor identifier\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {array} organizationId - The optional organization identifier array.\n         * @param {boolean} archived - The optional archive flag.\n         * @param {string} authorization - access token\n    */\n    GetSponsorUserList(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        organizationId ? : Array < string >\n            | string\n\n            ,\n        archived ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['organizationId'] !== undefined) {\n                queryParameters['organizationId'] = parameters['organizationId'];\n            }\n\n            if (parameters['archived'] !== undefined) {\n                queryParameters['archived'] = parameters['archived'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateSponsorUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.UserCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that creates a new user record within a sponsor.\n                    This method requires care plan manager level rights or higher.\n    * @method\n    * @name User#CreateSponsorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {} model - The user creation model.\n         * @param {string} authorization - access token\n    */\n    CreateSponsorUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.UserCreateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadSponsorUserPhotoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a photo for the user.\n                    This method requires nurse level rights or higher.\n    * @method\n    * @name User#UploadSponsorUserPhoto\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    UploadSponsorUserPhoto(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteSponsorUserPhotoURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes a photo for a user.\n                    This method requires the call to be the user or a sponsor admin.\n    * @method\n    * @name User#DeleteSponsorUserPhoto\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    DeleteSponsorUserPhoto(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorUserAsyncURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a sponsor user.\n                    This method requires nurse level rights or higher.\n    * @method\n    * @name User#GetSponsorUserAsync\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    GetSponsorUserAsync(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateSponsorUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.UserUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates information for a sponsor user.\n                    This method requires nurse level rights or higher.\n    * @method\n    * @name User#UpdateSponsorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {} model - The user update model.\n         * @param {string} authorization - access token\n    */\n    UpdateSponsorUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.UserUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorUserListWithoutDistributorURL(parameters: {\n        sponsorId: string,\n        organizationId: Array < string >\n            | string\n\n            ,\n        archived ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users';\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n        if (parameters['organizationId'] !== undefined) {\n            queryParameters['organizationId'] = parameters['organizationId'];\n        }\n\n        if (parameters['archived'] !== undefined) {\n            queryParameters['archived'] = parameters['archived'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets all sponsor users.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#GetSponsorUserListWithoutDistributor\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {array} organizationId - The organization identifier array.\n         * @param {boolean} archived - The optional archive flag.\n         * @param {string} authorization - access token\n    */\n    GetSponsorUserListWithoutDistributor(parameters: {\n        sponsorId: string,\n        organizationId: Array < string >\n            | string\n\n            ,\n        archived ? : boolean,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['organizationId'] !== undefined) {\n                queryParameters['organizationId'] = parameters['organizationId'];\n            }\n\n            if (parameters['organizationId'] === undefined) {\n                reject(new Error('Missing required  parameter: organizationId'));\n                return;\n            }\n\n            if (parameters['archived'] !== undefined) {\n                queryParameters['archived'] = parameters['archived'];\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UnarchiveSponsorUserURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/unarchive';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that reverts an archived sponsor user to their previous state.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name User#UnarchiveSponsorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n         * @param {string} authorization - access token\n    */\n    UnarchiveSponsorUser(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/unarchive';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateUserFullNameURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.FullNameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/fullname';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Update the user name information\n     * @method\n     * @name User#UpdateUserFullName\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The name update model.\n     * @param {string} authorization - access token\n     */\n    UpdateUserFullName(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.FullNameBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/fullname';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateUserAddressURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.AddressBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/address';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Update the user address information\n     * @method\n     * @name User#UpdateUserAddress\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The address model.\n     * @param {string} authorization - access token\n     */\n    UpdateUserAddress(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.AddressBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/address';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateUserTimeZoneURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.TimeZoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timezone';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * Update the user time zone\n     * @method\n     * @name User#UpdateUserTimeZone\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).\n     * @param {} model - The time zone model.\n     * @param {string} authorization - access token\n     */\n    UpdateUserTimeZone(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        userId: string,\n        model: Api.TimeZoneBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/timezone';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AcceptUserInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        model: Api.UserAcceptInvitationBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}/acceptance';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that accepts an invitation for a user in the invited status.\n     * @method\n     * @name User#AcceptUserInvitation\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} invitationCode - The invitation code.\n     * @param {} model - The binding model.\n     */\n    AcceptUserInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        model: Api.UserAcceptInvitationBindingModel,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}/acceptance';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetUserInvitationsURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that gets a list of invited patients.\n     * @method\n     * @name User#GetUserInvitations\n     * @param {string} distributorId - This distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} authorization - access token\n     */\n    GetUserInvitations(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    CreateUserInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.UserCreateInvitationBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that creates a new user in the invited state.\n     * @method\n     * @name User#CreateUserInvitation\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The binding model.\n     * @param {string} authorization - access token\n     */\n    CreateUserInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.UserCreateInvitationBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteUserInvitationURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method that deletes an unaccepted user invitation.\n     * @method\n     * @name User#DeleteUserInvitation\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} invitationCode - The invitation code.\n     * @param {string} authorization - access token\n     */\n    DeleteUserInvitation(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        invitationCode: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/invitations/{invitationCode}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);\n\n            if (parameters['invitationCode'] === undefined) {\n                reject(new Error('Missing required  parameter: invitationCode'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ResendInvitationsByCodeURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ResendUserInvitationsByInvitationCodeBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/coderesend';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method for resending invitation emails by invitation codes.\n     * @method\n     * @name User#ResendInvitationsByCode\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The binding model.\n     * @param {string} authorization - access token\n     */\n    ResendInvitationsByCode(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ResendUserInvitationsByInvitationCodeBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/coderesend';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ResendInvitationsByDateURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ResendUserInvitationsByDateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/dateresend';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method to resend invitation by a date range.\n     * @method\n     * @name User#ResendInvitationsByDate\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The binding model.\n     * @param {string} authorization - access token\n     */\n    ResendInvitationsByDate(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.ResendUserInvitationsByDateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/user/invitations/dateresend';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/user.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class UserInternal\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class UserInternal extends ApiClass {\n\n    AddRolesToDistributorUserURL(parameters: {\n        distributorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/roles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * The is a method that assigns roles to a distributor user.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name UserInternal#AddRolesToDistributorUser\n         * @param {string} distributorId - The distributor id that owns the user.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {} model - List of roles to assign.\n         * @param {string} authorization - access token\n    */\n    AddRolesToDistributorUser(parameters: {\n        distributorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteRolesFromDistributorUserURL(parameters: {\n        distributorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/roles';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that removes a distributor user from roles.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name UserInternal#DeleteRolesFromDistributorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {} model - List of roles to remove.\n         * @param {string} authorization - access token\n    */\n    DeleteRolesFromDistributorUser(parameters: {\n        distributorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AddRolesToSponsorUserURL(parameters: {\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that assigns roles to a user scoped to a specific sponsor.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name UserInternal#AddRolesToSponsorUser\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {} model - Lists of roles to assign.\n         * @param {string} authorization - access token\n    */\n    AddRolesToSponsorUser(parameters: {\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteRolesFromSponsorUserURL(parameters: {\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes the roles from sponsor user.\n                    This method requires sponsor admin level rights or higher.\n    * @method\n    * @name UserInternal#DeleteRolesFromSponsorUser\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {} model - List of roles to delete.\n         * @param {string} authorization - access token\n    */\n    DeleteRolesFromSponsorUser(parameters: {\n        sponsorId: string,\n        userId: string,\n        model: Api.RoleBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users/{userId}/roles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    ChangePasswordInternalURL(parameters: {\n        userId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/users/{userId}/password';\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that changes the password for a user. This API relies\n                    on the calling used being authorized in the system and knowing the existing password.\n                    Higher privilege users may reset the password using this API without knowing the\n                    existing password.\n    * @method\n    * @name UserInternal#ChangePasswordInternal\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {} model - The model containing the current password as well as the new password.\n         * @param {string} authorization - access token\n    */\n    ChangePasswordInternal(parameters: {\n        userId: string,\n        model: Api.ChangePasswordBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/users/{userId}/password';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UploadDistributorUserPhotoURL(parameters: {\n        distributorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates a photo for the given user.\n                    This method requires distributor admin level rights or higher.\n    * @method\n    * @name UserInternal#UploadDistributorUserPhoto\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {string} authorization - access token\n    */\n    UploadDistributorUserPhoto(parameters: {\n        distributorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    DeleteDistributorUserPhotoURL(parameters: {\n        distributorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/photo';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that deletes a photo for a distributor user.\n                    This method requires distributor admin level rights or higher.\n    * @method\n    * @name UserInternal#DeleteDistributorUserPhoto\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {string} authorization - access token\n    */\n    DeleteDistributorUserPhoto(parameters: {\n        distributorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}/photo';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetDistributorUserURL(parameters: {\n        distributorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a distributor user.\n                    This method requires distributor admin level rights or higher.\n    * @method\n    * @name UserInternal#GetDistributorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {string} authorization - access token\n    */\n    GetDistributorUser(parameters: {\n        distributorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    UpdateDistributorUserURL(parameters: {\n        distributorId: string,\n        userId: string,\n        model: Api.UserUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that updates information for a distributor user.\n                    This method requires distributor admin level rights or higher.\n    * @method\n    * @name UserInternal#UpdateDistributorUser\n         * @param {string} distributorId - The distributor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {} model - The user update model.\n         * @param {string} authorization - access token\n    */\n    UpdateDistributorUser(parameters: {\n        distributorId: string,\n        userId: string,\n        model: Api.UserUpdateBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetSponsorUserAsyncURL(parameters: {\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users/{userId}';\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{userId}', `${parameters['userId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n    * This is a method that gets a sponsor user.\n                    This method requires nurse level rights or higher.\n    * @method\n    * @name UserInternal#GetSponsorUserAsync\n         * @param {string} sponsorId - The sponsor identifier.\n         * @param {string} userId - The internal PatientIO user identifier.\n         * @param {string} authorization - access token\n    */\n    GetSponsorUserAsync(parameters: {\n        sponsorId: string,\n        userId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/sponsors/{sponsorId}/users/{userId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{userId}', `${parameters['userId']}`);\n\n            if (parameters['userId'] === undefined) {\n                reject(new Error('Missing required  parameter: userId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/user-internal.ts","import * as request from \"superagent\";\nimport * as Api from './api';\nimport ApiClass from './api';\n\n/**\n * \n * @class VideoCall\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class VideoCall extends ApiClass {\n\n    CreateVideoCallURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.VideoCallBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method for a caregiver to request a video call with a patient.\n     * @method\n     * @name VideoCall#CreateVideoCall\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {} model - The binding model.\n     * @param {string} authorization - access token\n     */\n    CreateVideoCall(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        model: Api.VideoCallBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    GetVideoCallURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        roomId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{roomId}', `${parameters['roomId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method to get information about an existing video call.\n     * @method\n     * @name VideoCall#GetVideoCall\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} roomId - The room identifier.\n     * @param {string} authorization - access token\n     */\n    GetVideoCall(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        roomId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{roomId}', `${parameters['roomId']}`);\n\n            if (parameters['roomId'] === undefined) {\n                reject(new Error('Missing required  parameter: roomId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    AcceptVideoCallURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        roomId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{roomId}', `${parameters['roomId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method for a patient to accept a video call.\n     * @method\n     * @name VideoCall#AcceptVideoCall\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} roomId - The room identifier.\n     * @param {string} authorization - access token\n     */\n    AcceptVideoCall(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        roomId: string,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = '';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{roomId}', `${parameters['roomId']}`);\n\n            if (parameters['roomId'] === undefined) {\n                reject(new Error('Missing required  parameter: roomId'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n    EndVideoCallURL(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        roomId: string,\n        model: Api.VideoCallEndBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end';\n\n        path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n        path = path.replace('{roomId}', `${parameters['roomId']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        queryParameters = {};\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * This is a method to end a video call.\n     * @method\n     * @name VideoCall#EndVideoCall\n     * @param {string} distributorId - The distributor identifier.\n     * @param {string} sponsorId - The sponsor identifier.\n     * @param {string} roomId - The room identifier.\n     * @param {} model - The model.\n     * @param {string} authorization - access token\n     */\n    EndVideoCall(parameters: {\n        distributorId: string,\n        sponsorId: string,\n        roomId: string,\n        model: Api.VideoCallEndBindingModel,\n        authorization: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.domain;\n        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        return new Promise((resolve, reject) => {\n            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';\n            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';\n\n            path = path.replace('{distributorId}', `${parameters['distributorId']}`);\n\n            if (parameters['distributorId'] === undefined) {\n                reject(new Error('Missing required  parameter: distributorId'));\n                return;\n            }\n\n            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);\n\n            if (parameters['sponsorId'] === undefined) {\n                reject(new Error('Missing required  parameter: sponsorId'));\n                return;\n            }\n\n            path = path.replace('{roomId}', `${parameters['roomId']}`);\n\n            if (parameters['roomId'] === undefined) {\n                reject(new Error('Missing required  parameter: roomId'));\n                return;\n            }\n\n            if (parameters['model'] !== undefined) {\n                body = parameters['model'];\n            }\n\n            if (parameters['model'] === undefined) {\n                reject(new Error('Missing required  parameter: model'));\n                return;\n            }\n\n            if (parameters['authorization'] !== undefined) {\n                headers['Authorization'] = parameters['authorization'];\n            }\n\n            if (parameters['authorization'] === undefined) {\n                reject(new Error('Missing required  parameter: authorization'));\n                return;\n            }\n\n            if (parameters.$queryParameters) {\n                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n                });\n            }\n\n            form = queryParameters;\n            queryParameters = {};\n\n            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);\n        });\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/lib/video-call.ts","export {\n    ApiClass,\n    PasswordResetViewModel,\n    ResetPasswordByCodeBindingModel,\n    AuditEntityViewModel,\n    RecordBeaconBindingModel,\n    RecordInvitationBeaconBindingModel,\n    BrandingViewModel,\n    ImageReadModel,\n    CampaignMonitorSmartEmailListing,\n    SubscriberListDetail,\n    CareCenterContentCreateBindingModel,\n    IdViewModel,\n    CareCenterContentViewModel,\n    CareCenterContentUpdateBindingModel,\n    CareTeamMemberViewModel,\n    CareCenterContentUploadBindingModel,\n    Stream,\n    SectionReadModel,\n    NodeReadModel,\n    IdListBindingModel,\n    ValueBindingModel,\n    CloneCarePlanBindingModel,\n    CarePlanViewModel,\n    TaskScheduleViewModel,\n    CategoryViewModel,\n    AssignedSurveyReadModel,\n    TaskViewModel,\n    TreatmentTaskScheduleItemViewModel,\n    UntilCompleteTaskScheduleItemViewModel,\n    WeeklyTaskScheduleItemViewModel,\n    MedicalCode,\n    IExpirationType,\n    IStartType,\n    Repetition,\n    CarePlanBindingModel,\n    SponsorCarePlanReadModel,\n    CategoryReadModel,\n    CreateCarePlanBindingModel,\n    DistributorCarePlanReadModel,\n    NameBindingModel,\n    SignatureBindingModel,\n    CategoryBindingModel,\n    IdNameModel,\n    ChatBotContextViewModel,\n    ChatBotContextItemViewModel,\n    ActorReadModel,\n    NameReadModel,\n    ChatBotCreateBindingModel,\n    ChatBotContextCreateBindingModel,\n    ChatBotContextItemBindingModel,\n    ChatBotResponseFeedbackBindingModel,\n    ExportCreatedViewModel,\n    CreatePatientTaskDataExtractBindingModel,\n    PatientTaskCompletionOutboundModel,\n    UserInformationOutboundModel,\n    ConversationListItemViewModel,\n    MessageReadModel,\n    MessageAttachment,\n    ConversationsMetaData,\n    ConversationListViewModel,\n    PartyListViewModel,\n    ConversationViewModel,\n    MessageCreateBindingModel,\n    UploadFile,\n    NewMessageReturnViewModel,\n    ConversationUpdateBindingModel,\n    DistributorSettingsBindingModel,\n    AuthorizationCodeBindingModel,\n    DistributorBindingModel,\n    SponsorBindingModel,\n    SponsorIdentityReadModel,\n    BrandingBindingModel,\n    DistributorViewModel,\n    DistributorSettings,\n    DistributorCarePlanViewModel,\n    ExportFileRecordBindingModel,\n    ImportFileRecordBindingModel,\n    SubsequentStepInformation,\n    IntegrationManagementModel,\n    SftpServerCredential,\n    ImportFileRecord,\n    ExportFileRecord,\n    IntegrationManagementCredentialBindingModel,\n    InvitationViewModel,\n    GenerateActivationCodeBindingModel,\n    ActivatePatientDobSponsorPatientIdBindingModel,\n    SponsorIdListBindingModel,\n    CloneCarePlanToPatientBindingModel,\n    IdBindingModel,\n    PatientBroadcastModel,\n    BroadcastToPatientsBuilderModel,\n    BroadcastToPatientsShortCodesModel,\n    SponsorEntityIdBulkPatientUpdateBindingModel,\n    ChangePasswordBindingModel,\n    PatientChangeRoleBindingModel,\n    PatientSettingsBindingModel,\n    PatientCreateBindingModel,\n    PatientCreatedViewModel,\n    SponsorPatientListViewModel,\n    PatientListItemViewModel,\n    PatientCarePlanAssocationViewModel,\n    ImageViewModel,\n    AddPersonalCarePlanBindingModel,\n    PatientViewModel,\n    SharedCareInvitationViewModel,\n    SponsorViewModel,\n    PatientSettings,\n    SharedCarePatientViewModel,\n    OutgoingSharedCareInvitationReadModel,\n    SponsorCarePlanViewModel,\n    OrganizationViewModel,\n    SponsorSettings,\n    TaskAlert,\n    WebHookViewModel,\n    Address,\n    UserViewModel,\n    DigitalContactInformation,\n    OrganizationSettings,\n    TelephoneNumber,\n    AlertNotificationRule,\n    AlertTrigger,\n    UserSettings,\n    OutcomeTriggerRule,\n    NumericComparisonRule,\n    StringComparisonRule,\n    BloodPressureRule,\n    MeasurementCalculationRule,\n    MeasurementComparisonRule,\n    ComparisonValue,\n    PatientUpdateBindingModel,\n    AlertedPatientViewModel,\n    ArchivedPatientViewModel,\n    TaskOutcomesOverTime,\n    TaskOutcomeDataset,\n    FullNameBindingModel,\n    AddressBindingModel,\n    TimeZoneBindingModel,\n    SignaledAlertViewModel,\n    PatientMostRecentTaskResultViewModel,\n    PatientCoreViewModel,\n    PatientCreatedDateViewModel,\n    PatientAppointmentDateViewModel,\n    RoleBindingModel,\n    InternalBulkPatientUpdateBindingModel,\n    AcceptInvitationBindingModel,\n    PatientInvitationCreateBindingModel,\n    InvitationCodeViewModel,\n    PatientInvitation,\n    KioskPatientInvitationCreateBindingModel,\n    ResendInvitationsBindingModel,\n    PatientProfileDefinitionCreateBindingModel,\n    ProfileDefinitionElementCreateBindingModel,\n    PatientProfileDefinitionEnhancedReadModel,\n    TagElementDefinition,\n    TextElementDefinition,\n    CodeCollectionDefinition,\n    PatientProfileDefinitionElementCategoryBindingModel,\n    CodeCollectionBindingModel,\n    CodesBindingModel,\n    SetProfileTagElementBindingModel,\n    FullPatientProfileViewModel,\n    PatientProfileCollectionEnhancedReadModel,\n    PatientProfileEnhancedReadModel,\n    TagElementReadModel,\n    TextElementReadModel,\n    CodeCollectionReadModel,\n    CodeReadModel,\n    UpdateSponsorPatientProfileBindingModel,\n    TagElementUpdateBindingModel,\n    TextElementUpdateBindingModel,\n    UpdateSponsorPatientProfileInstanceLinkText,\n    AppointmentCancelBindingModel,\n    AppointmentCreateBindingModel,\n    AppointmentUpdateBindingModel,\n    MeasurementBindingModel,\n    RecordedMeasurementData,\n    PatientScheduleViewModel,\n    DayOfCareViewModel,\n    ScheduledTaskViewModel,\n    ScheduledSurveyViewModel,\n    MeasurementViewModel,\n    SurveyNodeInformation,\n    BranchInfo,\n    BranchCondition,\n    Condition,\n    SponsorEngagementOrAdherenceWithCarePlanViewModel,\n    CarePlanWithAveragesViewModel,\n    OrganizationEngagementRatioViewModel,\n    CareTeamEngagementModel,\n    OrganizationSessionRatioViewModel,\n    CareTeamSession,\n    SponsorEngagementRatioViewModel,\n    SponsorSessionRatioViewModel,\n    PatientChannelPercentagesViewModel,\n    PatientDemographicsReport,\n    PatientSexCountsReport,\n    PatientAgeCountsReport,\n    PatientInvitationReport,\n    SponsorEngagementOrAdherenceViewModel,\n    AveragesViewModel,\n    PatientOnboardingCountsReport,\n    SharedCareListItemViewModel,\n    INameReadModel,\n    SharedCareRelationshipViewModel,\n    SharedCareInvitationAcceptBindingModel,\n    SharedCarePermissionsBindingModel,\n    SharedCareInvitation,\n    SharedCareInvitationCreateBindingModel,\n    SharedCareInvitationCodeViewModel,\n    OrganizationSettingsBindingModel,\n    SponsorOrganizationIdBindingModel,\n    SponsorSettingsBindingModel,\n    SponsorSecretsBindingModel,\n    SponsorSecretsViewModel,\n    SponsorSecrets,\n    OrganizationCreateBindingModel,\n    OrganizationReadModel,\n    BrandingReadModel,\n    SponsorCounterViewModel,\n    OrganizationDescriptionBindingModel,\n    DigitalContactInformationBindingModel,\n    OrganizationNameBindingModel,\n    TelephoneBindingModel,\n    PhoneBindingModel,\n    WebHookCreateBindingModel,\n    WebHookUpdateBindingModel,\n    WebHookAuthorizationUpdateBindingModel,\n    SurveyCreateBindingModel,\n    BranchingTaskCreateBindingModel,\n    ConditionTaskCollectionBindingModel,\n    SurveyReadModel,\n    BranchingTask,\n    ConditionTaskCollection,\n    SurveyBranchesBindingModel,\n    SurveyStateBindingModel,\n    SurveySponsorSurveyIdBindingModel,\n    TagListBindingModel,\n    TaskContentBindingModel,\n    TaskDeactivatedStateBindingModel,\n    TaskDescriptionBindingModel,\n    TaskMeasurementBindingModel,\n    TaskCodesBindingModel,\n    SponsorTaskIdBindingModel,\n    TaskCreateBindingModel,\n    CreateTaskAlertBindingModel,\n    TaskUpdateBindingModel,\n    UpdateTaskAlertBindingModel,\n    TreatmentTaskScheduleItemBindingModel,\n    UpdateTaskScheduleItemBindingModel,\n    UntilCompleteTaskScheduleItemBindingModel,\n    WeeklyTaskScheduleItemBindingModel,\n    TaskScheduleBindingModel,\n    TaskScheduleUpdateBindingModel,\n    TaskScheduleTargetUpdateBindingModel,\n    TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel,\n    TaskScheduleIsDeactivatedBindingModel,\n    TimeCardRecordCreateBindingModel,\n    TimeCardActionCreateBindingModel,\n    TimeCardUpdateResponse,\n    TimeCardRecordViewModel,\n    TimeCardActionViewModel,\n    CurrentTimeCardActionBindingModel,\n    TimeCardRecordUpdateBindingModel,\n    TimeCardActionUpdateBindingModel,\n    UserSettingsBindingModel,\n    UserCreateBindingModel,\n    UserCreatedViewModel,\n    DistributorUserListViewModel,\n    UserUpdateBindingModel,\n    SponsorUserListViewModel,\n    UserAcceptInvitationBindingModel,\n    UserCreateInvitationBindingModel,\n    UserInvitationCreateViewModel,\n    UserStatusViewModel,\n    NameViewModel,\n    ResendUserInvitationsByInvitationCodeBindingModel,\n    ResendUserInvitationsByDateBindingModel,\n    VideoCallBindingModel,\n    VideoCallCreateViewModel,\n    VideoCallViewModel,\n    VideoCallTokenViewModel,\n    VideoCallEndBindingModel,\n} from './lib/api';\n\nexport { default as Accounts } from './lib/accounts';\nexport { default as Audit } from './lib/audit';\nexport { default as Beacon } from './lib/beacon';\nexport { default as Branding } from './lib/branding';\nexport { default as CampaignMonitor } from './lib/campaign-monitor';\nexport { default as CareCenter } from './lib/care-center';\nexport { default as CareCenterInternal } from './lib/care-center-internal';\nexport { default as CarePlans } from './lib/care-plans';\nexport { default as Categories } from './lib/categories';\nexport { default as ChatBot } from './lib/chat-bot';\nexport { default as ClientDataExport } from './lib/client-data-export';\nexport { default as ConversationLists } from './lib/conversation-lists';\nexport { default as ConversationParties } from './lib/conversation-parties';\nexport { default as Conversations } from './lib/conversations';\nexport { default as Distributors } from './lib/distributors';\nexport { default as IntegrationManagement } from './lib/integration-management';\nexport { default as Invitations } from './lib/invitations';\nexport { default as Patient } from './lib/patient';\nexport { default as PatientIndex } from './lib/patient-index';\nexport { default as PatientInternal } from './lib/patient-internal';\nexport { default as PatientInvitations } from './lib/patient-invitations';\nexport { default as PatientProfileDefinitions } from './lib/patient-profile-definitions';\nexport { default as PatientProfiles } from './lib/patient-profiles';\nexport { default as PatientSchedules } from './lib/patient-schedules';\nexport { default as PatientSchedulesInternal } from './lib/patient-schedules-internal';\nexport { default as Reports } from './lib/reports';\nexport { default as SharedCare } from './lib/shared-care';\nexport { default as SharedCareInternal } from './lib/shared-care-internal';\nexport { default as Sponsors } from './lib/sponsors';\nexport { default as SponsorWebHook } from './lib/sponsor-web-hook';\nexport { default as Surveys } from './lib/surveys';\nexport { default as Tasks } from './lib/tasks';\nexport { default as TaskScheduleItems } from './lib/task-schedule-items';\nexport { default as TaskSchedules } from './lib/task-schedules';\nexport { default as Time } from './lib/time';\nexport { default as TimeCard } from './lib/time-card';\nexport { default as User } from './lib/user';\nexport { default as UserInternal } from './lib/user-internal';\nexport { default as VideoCall } from './lib/video-call';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = require('component-emitter');\nvar RequestBase = require('./request-base');\nvar isObject = require('./is-object');\nvar ResponseBase = require('./response-base');\nvar shouldRetry = require('./should-retry');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only version of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n      status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str){\n  var parse = request.parse[this.type];\n  if(this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n        new_err.original = err;\n        new_err.response = res;\n        new_err.status = res.status;\n      }\n    } catch(e) {\n      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options\n    options = pass;\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    }\n  }\n\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));\n    break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n    break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n    break;\n  }\n  return this;\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  // console.log(this._retries, this._maxRetries)\n  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  }\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn){\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn){\n  var req = request('DELETE', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/superagent/lib/client.js\n// module id = 3\n// module chunks = 0","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/component-emitter/index.js\n// module id = 4\n// module chunks = 0","/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  return this;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){\n      self.end(function(err, res){\n        if (err) innerReject(err); else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n}\n\nRequestBase.prototype.catch = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n}\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n\n  // name should be either a string or an object.\n  if (null === name ||  undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on){\n  // This is browser-only functionality. Node side is no-op.\n  if(on==undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function(){\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if ('function' === typeof this._sort) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = function() {console.trace(\"Unsupported\");}\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/superagent/lib/request-base.js\n// module id = 5\n// module chunks = 0","\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field){\n    return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/superagent/lib/response-base.js\n// module id = 6\n// module chunks = 0","\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, shouldStripCookie){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  if (shouldStripCookie) {\n    delete header['cookie'];\n  }\n  return header;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/superagent/lib/utils.js\n// module id = 7\n// module chunks = 0","var ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nmodule.exports = function shouldRetry(err, res) {\n  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n  if (res && res.status && res.status >= 500) return true;\n  // Superagent timeout\n  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;\n  if (err && 'crossDomain' in err) return true;\n  return false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/superagent/lib/should-retry.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}