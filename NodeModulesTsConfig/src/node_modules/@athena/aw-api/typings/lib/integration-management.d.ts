import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class IntegrationManagement
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class IntegrationManagement extends ApiClass {
    AddExportFileRecordURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ExportFileRecordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds an export file record for a sponsor.
                    This record specifies the exact internal PatientIO components to
                    be used to push an automated export of PatientIO data to a
                    client system.
    * @method
    * @name IntegrationManagement#AddExportFileRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    AddExportFileRecord(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ExportFileRecordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteExportFileRecordURL(parameters: {
        distributorId: string;
        sponsorId: string;
        fileName: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes an export file record.
     * @method
     * @name IntegrationManagement#DeleteExportFileRecord
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fileName - Name of the file.
     * @param {string} authorization - access token
     */
    DeleteExportFileRecord(parameters: {
        distributorId: string;
        sponsorId: string;
        fileName: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddImportFileRecordURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ImportFileRecordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds an import file record. The Import
                    File Record describes where on a customer's external system
                    data to be imported into PatientIO is located, and how that
                    data is to be processed within PatientIO.
    * @method
    * @name IntegrationManagement#AddImportFileRecord
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    AddImportFileRecord(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ImportFileRecordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteImportFileRecordURL(parameters: {
        distributorId: string;
        sponsorId: string;
        fileName: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes an import file record.
     * @method
     * @name IntegrationManagement#DeleteImportFileRecord
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fileName - Name of the file.
     * @param {string} authorization - access token
     */
    DeleteImportFileRecord(parameters: {
        distributorId: string;
        sponsorId: string;
        fileName: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetIntegrationManagementDataURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves all integration management data for a sponsor.
     * @method
     * @name IntegrationManagement#GetIntegrationManagementData
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetIntegrationManagementData(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteIntegrationManagementDataURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes all integration management data for a sponsor.
     * @method
     * @name IntegrationManagement#DeleteIntegrationManagementData
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    DeleteIntegrationManagementData(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateIntegrationManagementCredentialsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.IntegrationManagementCredentialBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates or creates integration management credentials for a sponsor.
                    These credentials are used to authenticate Patient IO automated processes with external
                    customer systems.
    * @method
    * @name IntegrationManagement#UpdateIntegrationManagementCredentials
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The integration management credential model.
         * @param {string} authorization - access token
    */
    UpdateIntegrationManagementCredentials(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.IntegrationManagementCredentialBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
