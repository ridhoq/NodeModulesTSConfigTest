import * as request from "superagent";
import ApiClass from './api';
/**
 *
 * @class Branding
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Branding extends ApiClass {
    GetBrandingURL(parameters: {
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Get the branding for the logged in user.
     * @method
     * @name Branding#GetBranding
     * @param {string} authorization - access token
     */
    GetBranding(parameters: {
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorBrandingURL(parameters: {
        distributorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Gets the branding for a given distributor.
     * @method
     * @name Branding#GetDistributorBranding
     * @param {string} distributorId - The distributor identifier.
     */
    GetDistributorBranding(parameters: {
        distributorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * Gets the combined branding for a given sponsor of a given distributor.
                    This effectively returns the combination of sponsor and distributor
                    branding, with a sponsor's branding taking precednece over the distributor
                    branding.
    * @method
    * @name Branding#GetSponsorBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
    */
    GetSponsorBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetOrganizationBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * Gets the combined branding for a given organization of a given sponsor.
                    This effectively returns the combination of sponsor and distributor
                    branding, with a sponsor's branding taking precednece over the distributor
                    branding.
    * @method
    * @name Branding#GetOrganizationBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
    */
    GetOrganizationBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
