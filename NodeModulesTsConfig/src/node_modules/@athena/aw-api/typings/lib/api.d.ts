import * as request from "superagent";
export declare type CallbackHandler = (err: any, res?: request.Response) => void;
export declare type PasswordResetViewModel = {
    'Email': string;
};
export declare type ResetPasswordByCodeBindingModel = {
    'Email': string;
    'Password': string;
    'Code': string;
};
export declare type AuditEntityViewModel = {
    'AggregateId': string;
    'AggregateType': string;
    'Uri': string;
    'UserName': string;
    'HttpMethod': string;
    'RecordedTime': string;
};
export declare type RecordBeaconBindingModel = {
    'BeaconType': "Login" | "SessionStarted" | "InvitationOpened" | "SessionFinished";
};
export declare type RecordInvitationBeaconBindingModel = {
    'BeaconType': "Login" | "SessionStarted" | "InvitationOpened" | "SessionFinished";
    'InvitationCode': string;
};
export declare type BrandingViewModel = {
    'Logo': ImageReadModel;
    'EmailLogo': ImageReadModel;
    'PrimaryColor': string;
    'SecondaryColor': string;
    'TertiaryColor': string;
    'GooglePlayStoreUrl': string;
    'AppleAppStoreUrl': string;
    'DistributorName': string;
    'SponsorName': string;
};
export declare type ImageReadModel = {
    'Name': string;
    'Description': string;
    'WebImageUrl': string;
    'MobileImageUrl': string;
    'ThumbNailUrl': string;
    'Id': string;
};
export declare type CampaignMonitorSmartEmailListing = {
    'Id': string;
    'Name': string;
};
export declare type SubscriberListDetail = {
    'Id': string;
    'Name': string;
};
export declare type CareCenterContentCreateBindingModel = {
    'Title': string;
    'Content': string;
    'ContentType': "Html" | "Url" | "Converted";
    'CategoryIds': Array<string> | string;
    'CarePlanIds': Array<string> | string;
    'RequiresAuthentication': boolean;
    'SortOrder': number;
};
export declare type IdViewModel = {
    'Id': string;
};
export declare type CareCenterContentViewModel = {
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
    'OwningAggregateId': string;
    'SponsorId': string;
    'ContentId': string;
    'Title': string;
    'Content': string;
    'ContentStreamId': string;
    'ContentType': "Html" | "Url" | "Converted";
    'CategoryIds': Array<string> | string;
    'CarePlanIds': Array<string> | string;
    'ImageUrl': string;
    'RequiresAuthentication': boolean;
    'LastModified': string;
    'Uri': string;
    'SortOrder': number;
};
export declare type CareCenterContentUpdateBindingModel = {
    'Title': string;
    'Content': string;
    'CategoryIds': Array<string> | string;
    'CarePlanIds': Array<string> | string;
    'RequiresAuthentication': boolean;
    'SortOrder': number;
};
export declare type CareTeamMemberViewModel = {
    'Biography': string;
    'FirstName': string;
    'HomePhone': string;
    'Id': string;
    'LastName': string;
    'UserPhoto': ImageReadModel;
    'Uri': string;
};
export declare type CareCenterContentUploadBindingModel = {
    'Title': string;
    'CategoryIds': Array<string> | string;
    'CarePlanIds': Array<string> | string;
    'RequiresAuthentication': boolean;
    'SortOrder': number;
    'ContentStream': Stream;
};
export declare type Stream = {
    '__identity': {};
};
export declare type SectionReadModel = {
    'Id': string;
    'ImageName': string;
    'ImageUrl': string;
    'Nodes': Array<NodeReadModel> | NodeReadModel;
    'Sections': Array<SectionReadModel> | SectionReadModel;
    'Title': string;
};
export declare type NodeReadModel = {
    'Id': string;
    'Title': string;
    'ImageName': string;
    'ImageUri': string;
    'Uri': string;
    'Sections': Array<SectionReadModel> | SectionReadModel;
    'RequiresAuthorization': boolean;
};
export declare type IdListBindingModel = {
    'Ids': Array<string> | string;
};
export declare type ValueBindingModel = {
    'Value': string;
};
export declare type CloneCarePlanBindingModel = {
    'NewCarePlanName': string;
    'CategoryIds': Array<string> | string;
    'NewSponsorCarePlanId': string;
};
export declare type CarePlanViewModel = {
    'Schedules': Array<TaskScheduleViewModel> | TaskScheduleViewModel;
    'SponsorCarePlanId': string;
    'SupervisorApprovalSignatureUri': string;
    'SupervisorApprovalSignatureTs': string;
    'HasUnapprovedChanges': boolean;
    'Id': string;
    'Name': string;
    'Categories': Array<CategoryViewModel> | CategoryViewModel;
    'OwnerId': string;
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
};
export declare type TaskScheduleViewModel = {
    'AssignedSurvey': AssignedSurveyReadModel;
    'AssignedTask': TaskViewModel;
    'AssignedTaskClass': "Standard" | "Survey";
    'HasHadTreatmentTaskScheduleItems': boolean;
    'HasHadWeeklyTaskScheduleItems': boolean;
    'HashHadUntilCompleteTaskScheduleItems': boolean;
    'Id': string;
    'Note': string;
    'TaskId': string;
    'Target': number;
    'RolesAllowedToRecordOutcome': Array<string> | string;
    'IsDeactivated': boolean;
    'ActivationChangeTime': string;
    'TreatmentScheduleItems': Array<TreatmentTaskScheduleItemViewModel> | TreatmentTaskScheduleItemViewModel;
    'UntilCompleteTaskScheduleItems': Array<UntilCompleteTaskScheduleItemViewModel> | UntilCompleteTaskScheduleItemViewModel;
    'WeeklyScheduleItems': Array<WeeklyTaskScheduleItemViewModel> | WeeklyTaskScheduleItemViewModel;
};
export declare type CategoryViewModel = {
    'Name': string;
    'Id': string;
};
export declare type AssignedSurveyReadModel = {
    'SurveyId': string;
    'SurveyName': string;
};
export declare type TaskViewModel = {
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
    'OwningAggregateId': string;
    'Cost': number;
    'Deactivated': boolean;
    'Duration': number;
    'GoalNumber': number;
    'PatientAssignable': boolean;
    'Id': string;
    'MeasurementDomain': Array<string> | string;
    'MeasurementType': "Boolean" | "String" | "Date" | "DateTime" | "MultipleChoiceSingle" | "MultipleChoiceMultiple" | "Numeric" | "NumericWithGoal" | "Appointment" | "Checklist" | "Signature" | "Interval" | "Photo";
    'MeasurementUnits': string;
    'Name': string;
    'SponsorTaskId': string;
    'Tags': Array<string> | string;
    'TaskContentUri': string;
    'TaskContentUriRequiresAuthentication': boolean;
    'TaskDescription': string;
    'Codes': Array<MedicalCode> | MedicalCode;
};
export declare type TreatmentTaskScheduleItemViewModel = {
    'Id': string;
    'DaysRelativeToNextTreatment': number;
    'ScheduledTime': string;
    'ScheduledTimePeriod': string;
};
export declare type UntilCompleteTaskScheduleItemViewModel = {
    'Id': string;
    'Expires': IExpirationType;
    'ExpirationType': string;
    'Starts': IStartType;
    'StartType': string;
    'Repeats': Repetition;
    'ScheduledTime': string;
    'ScheduledTimePeriod': string;
};
export declare type WeeklyTaskScheduleItemViewModel = {
    'Id': string;
    'DayOfWeek': "None" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
    'StartType': "OnScheduleStart" | "OnInitialTreatment";
    'StopType': "NoStop" | "OnInitialTreatment";
    'ScheduledTime': string;
    'ScheduledTimePeriod': string;
};
export declare type MedicalCode = {
    'System': "Loinc" | "Snomed";
    'Code': string;
};
export declare type IExpirationType = {};
export declare type IStartType = {};
export declare type Repetition = {
    'Period': "Once" | "Year" | "Month" | "Week" | "Day";
    'Interval': number;
};
export declare type CarePlanBindingModel = {
    'Name': string;
    'CategoryIds': Array<string> | string;
    'SponsorCarePlanId': string;
};
export declare type SponsorCarePlanReadModel = {
    'AssignedPatientCount': number;
    'SponsorCarePlanId': string;
    'Id': string;
    'Name': string;
    'Categories': Array<CategoryReadModel> | CategoryReadModel;
};
export declare type CategoryReadModel = {
    'Name': string;
    'Id': string;
};
export declare type CreateCarePlanBindingModel = {
    'Name': string;
    'CategoryIds': Array<string> | string;
};
export declare type DistributorCarePlanReadModel = {
    'Id': string;
    'Name': string;
    'Categories': Array<CategoryReadModel> | CategoryReadModel;
};
export declare type NameBindingModel = {
    'Name': string;
};
export declare type SignatureBindingModel = {
    'SignatureImageDataUri': string;
};
export declare type CategoryBindingModel = {
    'Name': string;
};
export declare type IdNameModel = {
    'Id': string;
    'Name': string;
};
export declare type ChatBotContextViewModel = {
    'OwningAggregateId': string;
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
    'Id': string;
    'ContextItems': Array<ChatBotContextItemViewModel> | ChatBotContextItemViewModel;
};
export declare type ChatBotContextItemViewModel = {
    'Id': string;
    'Keywords': Array<string> | string;
    'Response': string;
    'LastModifiedBy': ActorReadModel;
    'LastModifiedAt': string;
};
export declare type ActorReadModel = {
    'OrganizationName': string;
    'FirstName': string;
    'LastName': string;
    'ActorType': "Patient" | "User" | "Organization";
    'Photo': ImageReadModel;
    'SponsorIds': Array<string> | string;
    'SponsorEntityIds': {};
    'Roles': Array<string> | string;
    'Id': string;
    'Name': NameReadModel;
};
export declare type NameReadModel = {
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
};
export declare type ChatBotCreateBindingModel = {
    'FirstName': string;
    'LastName': string;
    'TimeZoneId': string;
};
export declare type ChatBotContextCreateBindingModel = {
    'ContextItems': Array<ChatBotContextItemBindingModel> | ChatBotContextItemBindingModel;
};
export declare type ChatBotContextItemBindingModel = {
    'Keywords': Array<string> | string;
    'Response': string;
};
export declare type ChatBotResponseFeedbackBindingModel = {
    'Feedback': "Positive" | "Negative";
    'MessageId': string;
    'ConversationId': string;
};
export declare type ExportCreatedViewModel = {
    'RunId': string;
    'FileName': string;
};
export declare type CreatePatientTaskDataExtractBindingModel = {
    'FromDate': string;
    'ToDate': string;
};
export declare type PatientTaskCompletionOutboundModel = {
    'AssignedDate': string;
    'PatientLastName': string;
    'PatientFirstName': string;
    'PatientSponsorId': string;
    'PatientIsDeactivated': boolean;
    'CompletionStatus': string;
    'CompletionDate': string;
    'CompletionResult': string;
    'CompletedByFirstName': string;
    'CompletedByLastName': string;
    'MeasurementUnits': string;
    'MeasurementType': string;
};
export declare type UserInformationOutboundModel = {
    'SponsorUserId': string;
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
    'EmailAddress': string;
    'Organization': string;
    'Role': string;
    'UserId': string;
};
export declare type ConversationListItemViewModel = {
    'CountOfMessages': number;
    'LastMessage': MessageReadModel;
    'LastMessageSentDateTime': string;
    'OtherPartyId': string;
    'Tags': Array<string> | string;
    'Unread': boolean;
};
export declare type MessageReadModel = {
    'MessageId': string;
    'Message': string;
    'SentDateTime': string;
    'SenderId': string;
    'SenderAgentId': string;
    'Attachments': Array<MessageAttachment> | MessageAttachment;
    'MessageMetaDataType': "None" | "VideoCallEnd" | "ChatBotResponse";
    'MetaData': {};
};
export declare type MessageAttachment = {
    'Uri': string;
    'MimeType': string;
};
export declare type ConversationsMetaData = {
    'UnreadConversationsCount': number;
    'OrganizationsWithUnreadConversationsCount': number;
    'OrganizationUnreadCounts': {};
};
export declare type ConversationListViewModel = {
    'Parties': Array<ActorReadModel> | ActorReadModel;
    'Conversations': Array<ConversationListItemViewModel> | ConversationListItemViewModel;
    'CountOfTotalConversations': number;
    'CountOfNextConversations': number;
    'CountOfPreviousConversations': number;
    'CountOfUnreadConversations': number;
};
export declare type PartyListViewModel = {
    'Parties': Array<ActorReadModel> | ActorReadModel;
};
export declare type ConversationViewModel = {
    'Id': string;
    'LastMessageSentDateTime': string;
    'MessageParticipantId': string;
    'OtherPartyId': string;
    'Parties': Array<ActorReadModel> | ActorReadModel;
    'Unread': boolean;
    'Messages': Array<MessageReadModel> | MessageReadModel;
    'Tags': Array<string> | string;
    'CountOfMessages': number;
    'CountOfPreviousMessages': number;
    'CountOfNextMessages': number;
    'RecipientLastReadDateTime': string;
    'RecipientHasRead': boolean;
};
export declare type MessageCreateBindingModel = {
    'Message': string;
    'Attachments': Array<UploadFile> | UploadFile;
};
export declare type UploadFile = {
    'Stream': Stream;
    'MimeType': string;
    'FileName': string;
};
export declare type NewMessageReturnViewModel = {
    'MessageId': string;
    'Message': string;
    'SentDateTime': string;
    'Attachments': Array<MessageAttachment> | MessageAttachment;
};
export declare type ConversationUpdateBindingModel = {
    'Tags': Array<string> | string;
    'Unread': boolean;
    'UpdateIfLastMessageId': string;
};
export declare type DistributorSettingsBindingModel = {
    'Settings': {};
};
export declare type AuthorizationCodeBindingModel = {
    'Code': string;
    'SponsorId': string;
};
export declare type DistributorBindingModel = {
    'Id': string;
    'Name': string;
};
export declare type SponsorBindingModel = {
    'Name': string;
};
export declare type SponsorIdentityReadModel = {
    'SponsorName': string;
    'SponsorId': string;
};
export declare type BrandingBindingModel = {
    'PrimaryColor': string;
    'SecondaryColor': string;
    'TertiaryColor': string;
};
export declare type DistributorViewModel = {
    'Id': string;
    'Name': string;
    'AuthorizationCodes': {};
    'Branding': BrandingViewModel;
    'BrandingEmailLogoUrl': string;
    'BrandingLogoUrl': string;
    'Categories': Array<CategoryViewModel> | CategoryViewModel;
    'DistributorTasks': Array<TaskViewModel> | TaskViewModel;
    'PatientProfileDefinitions': {};
    'Settings': DistributorSettings;
    'Sponsors': Array<SponsorIdentityReadModel> | SponsorIdentityReadModel;
    'TaskTags': Array<string> | string;
    'CarePlans': Array<DistributorCarePlanViewModel> | DistributorCarePlanViewModel;
    'ArchivedCarePlans': Array<DistributorCarePlanViewModel> | DistributorCarePlanViewModel;
    'ChatBotContextId': string;
    'ScheduledTaskTimePeriods': {};
    'ChatBotId': string;
};
export declare type DistributorSettings = {
    'AppleAppStoreUrl': string;
    'GooglePlayStoreUrl': string;
    'ActivationEmailTemplate': string;
    'WelcomeEmailTemplate': string;
    'ReminderEmailTemplate': string;
    'BroadcastedMessageEmailTemplate': string;
    'ResetPasswordEmailTemplate': string;
    'ShareCareEmailTemplate': string;
    'CareTeamWelcomeEmailTemplate': string;
    'CareTeamAlertsEmailTemplate': string;
    'CareTeamActivationEmailTemplate': string;
    'TwilioFromNumber': string;
    'UnreadMessagesEmailTemplate': string;
};
export declare type DistributorCarePlanViewModel = {
    'Schedules': Array<TaskScheduleViewModel> | TaskScheduleViewModel;
    'Id': string;
    'Name': string;
    'Categories': Array<CategoryViewModel> | CategoryViewModel;
    'OwnerId': string;
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
};
export declare type ExportFileRecordBindingModel = {
    'FileName': string;
    'ServerDirectory': string;
    'ExportType': "PatientCarePlan" | "PatientTaskData" | "PatientSurvey" | "UserInformation";
    'RelativeStartDay': number;
    'RelativeEndDay': number;
    'TimeZoneId': string;
};
export declare type ImportFileRecordBindingModel = {
    'FileName': string;
    'ServerDirectory': string;
    'MoveToDirectory': string;
    'AggregateType': "Organization" | "Patient" | "User" | "AddPatientAssignments" | "PatientProfileDefinition" | "AddCarePlanAssignments";
    'ClientLoadClassType': string;
    'ClientLoadMapClassType': string;
    'StepInformation': string;
    'NextSteps': Array<SubsequentStepInformation> | SubsequentStepInformation;
    'Delimiter': string;
};
export declare type SubsequentStepInformation = {
    'AggregateType': "Organization" | "Patient" | "User" | "AddPatientAssignments" | "PatientProfileDefinition" | "AddCarePlanAssignments";
    'StepInformation': string;
};
export declare type IntegrationManagementModel = {
    'ImportServerCredential': SftpServerCredential;
    'AggregateId': string;
    'SponsorId': string;
    'ImportSet': Array<ImportFileRecord> | ImportFileRecord;
    'ExportSet': Array<ExportFileRecord> | ExportFileRecord;
};
export declare type SftpServerCredential = {
    'ServerIp': string;
    'ServerPort': number;
    'ServerUserName': string;
    'ServerPassword': string;
};
export declare type ImportFileRecord = {
    'FileName': string;
    'ServerDirectory': string;
    'MoveToDirectory': string;
    'ClientLoadClassType': string;
    'ClientLoadMapClassType': string;
    'StepInformation': string;
    'AggregateType': "Organization" | "Patient" | "User" | "AddPatientAssignments" | "PatientProfileDefinition" | "AddCarePlanAssignments";
    'NextSteps': Array<SubsequentStepInformation> | SubsequentStepInformation;
    'Delimiter': string;
};
export declare type ExportFileRecord = {
    'FileName': string;
    'ServerDirectory': string;
    'ExportType': "PatientCarePlan" | "PatientTaskData" | "PatientSurvey" | "UserInformation";
    'RelativeStartDay': number;
    'RelativeEndDay': number;
    'TimeZoneId': string;
};
export declare type IntegrationManagementCredentialBindingModel = {
    'ImportServerIp': string;
    'ImportServerPassword': string;
    'ImportServerPort': number;
    'ImportServerUserName': string;
};
export declare type InvitationViewModel = {
    'DistributorId': string;
    'SponsorId': string;
    'OrganizationIds': Array<string> | string;
    'SponsorEntityId': string;
    'InvitationCode': string;
    'RequiresTwoFactorActivation': boolean;
    'LastFourHomePhone': string;
    'LastFourMobilePhone': string;
    'RoleType': "Distributor" | "Sponsor" | "Patient" | "Unknown";
    'BirthDate': string;
    'Sex': string;
};
export declare type GenerateActivationCodeBindingModel = {
    'ChannelType': "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
    'ReceiverType': "MobilePhone" | "HomePhone";
};
export declare type ActivatePatientDobSponsorPatientIdBindingModel = {
    'SponsorPatientId': string;
    'DateOfBirth': string;
    'EmailAddress': string;
    'Password': string;
};
export declare type SponsorIdListBindingModel = {
    'Ids': Array<string> | string;
};
export declare type CloneCarePlanToPatientBindingModel = {
    'SponsorId': string;
    'CloneCarePlanId': string;
    'RemoveCarePlanIds': Array<string> | string;
};
export declare type IdBindingModel = {
    'Id': string;
};
export declare type PatientBroadcastModel = {
    'PatientIds': Array<string> | string;
    'Mobile': boolean;
    'Email': boolean;
    'ChatBot': boolean;
    'Message': string;
};
export declare type BroadcastToPatientsBuilderModel = {
    'ShortCodes': Array<BroadcastToPatientsShortCodesModel> | BroadcastToPatientsShortCodesModel;
};
export declare type BroadcastToPatientsShortCodesModel = {
    'Code': string;
    'Description': string;
};
export declare type SponsorEntityIdBulkPatientUpdateBindingModel = {
    'PatientIds': Array<string> | string;
    'CarePlanIdsToAdd': Array<string> | string;
    'CarePlanIdsToRemove': Array<string> | string;
    'CategoryIdsToAdd': Array<string> | string;
    'CategoryIdsToRemove': Array<string> | string;
    'OrganizationId': string;
};
export declare type ChangePasswordBindingModel = {
    'CurrentPassword': string;
    'NewPassword': string;
};
export declare type PatientChangeRoleBindingModel = {
    'RoleToAdd': string;
    'RoleToRemove': string;
};
export declare type PatientSettingsBindingModel = {
    'SendEmailReminders': boolean;
    'ShowHealthDataInNotifications': boolean;
    'NewMessageNotification': Array<"Email" | "Push"> | "Email" | "Push";
};
export declare type PatientCreateBindingModel = {
    'Address1': string;
    'Address2': string;
    'AppointmentDateTime': string;
    'AuthCode': string;
    'BirthDate': string;
    'CarePlanId': string;
    'CategoryId': string;
    'City': string;
    'Country': string;
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
    'HomePhone': string;
    'MobilePhone': string;
    'OrganizationId': string;
    'Password': string;
    'PostalCode': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'State': string;
    'TimeZoneId': string;
    'UserName': string;
};
export declare type PatientCreatedViewModel = {
    'Id': string;
    'UserName': string;
};
export declare type SponsorPatientListViewModel = {
    'SponsorId': string;
    'Patients': {};
};
export declare type PatientListItemViewModel = {
    'MobilePhone': string;
    'HomePhone': string;
    'Roles': Array<string> | string;
    'CategoryAssociations': Array<CategoryViewModel> | CategoryViewModel;
    'Categories': Array<string> | string;
    'SponsorName': string;
    'ActivatedStatusTime': string;
    'LastScheduleUpdateTime': string;
    'LastMeasurementDateTime': string;
    'AlertCount': number;
    'LastAlertClearedDateTime': string;
    'NextAppointmentDateTime': string;
    'Appointments': Array<string> | string;
    'LastLoginDateTime': string;
    'LoginPlatforms': {
        'Ios': string;
        'Android': string;
        'Dashboard': string;
        'Unknown': string;
        'Other': string;
        'DashboardMobile': string;
    };
    'PushChannelConfirmationDates': {
        'Ios': string;
        'Android': string;
        'Dashboard': string;
        'Unknown': string;
        'Other': string;
        'DashboardMobile': string;
    };
    'Address1': string;
    'Address2': string;
    'City': string;
    'State': string;
    'PostalCode': string;
    'Country': string;
    'CarePlanId': string;
    'CarePlanIsPersonal': boolean;
    'CarePlanIsPatientPlan': boolean;
    'CarePlanName': string;
    'CategoryId': string;
    'CategoryName': string;
    'IsActivated': boolean;
    'CarePlans': Array<string> | string;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type PatientCarePlanAssocationViewModel = {
    'DistributorId': string;
    'SponsorId': string;
    'ManagementType': "Population" | "Personal" | "Patient";
    'CarePlanId': string;
    'CarePlanName': string;
};
export declare type ImageViewModel = {
    'Name': string;
    'Description': string;
    'WebImageUrl': string;
    'MobileImageUrl': string;
    'ThumbNailUrl': string;
    'Id': string;
};
export declare type AddPersonalCarePlanBindingModel = {
    'CategoryIds': Array<string> | string;
    'Name': string;
};
export declare type PatientViewModel = {
    'ActivatedStatusTime': string;
    'Address1': string;
    'Address2': string;
    'AlertCount': number;
    'AppointmentDateTime': string;
    'Appointments': Array<string> | string;
    'BirthDate': string;
    'CarePlans': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'Categories': Array<string> | string;
    'CarePlanId': string;
    'CarePlanName': string;
    'CarePlanInceptionDates': {};
    'CarePlanIsPersonal': boolean;
    'CategoryId': string;
    'CategoryName': string;
    'City': string;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'HomePhone': string;
    'Id': string;
    'IsActivated': boolean;
    'IncomingSharedCareInvitations': Array<SharedCareInvitationViewModel> | SharedCareInvitationViewModel;
    'LastAlertClearedDateTime': string;
    'LastLoginDateTime': string;
    'LastName': string;
    'LastScheduleUpdateTime': string;
    'LoginPlatforms': {
        'Ios': string;
        'Android': string;
        'Dashboard': string;
        'Unknown': string;
        'Other': string;
        'DashboardMobile': string;
    };
    'MobilePhone': string;
    'Name': NameReadModel;
    'NextAppointmentDateTime': string;
    'OrganizationId': string;
    'OrganizationName': string;
    'PatientPhoto': ImageReadModel;
    'PostalCode': string;
    'PushChannelConfirmationDates': {
        'Ios': string;
        'Android': string;
        'Dashboard': string;
        'Unknown': string;
        'Other': string;
        'DashboardMobile': string;
    };
    'Roles': Array<string> | string;
    'Sex': string;
    'Sponsor': SponsorViewModel;
    'SponsorId': string;
    'SponsorName': string;
    'SponsorPatientId': string;
    'State': string;
    'TimeZoneId': string;
    'UserName': string;
    'Settings': PatientSettings;
    'OutgoingSharedCare': Array<SharedCarePatientViewModel> | SharedCarePatientViewModel;
    'IncomingSharedCare': Array<SharedCarePatientViewModel> | SharedCarePatientViewModel;
    'OutgoingSharedCareInvitations': Array<OutgoingSharedCareInvitationReadModel> | OutgoingSharedCareInvitationReadModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type SharedCareInvitationViewModel = {
    'Accepted': boolean;
    'AcceptedTime': string;
    'FirstName': string;
    'LastName': string;
    'InvitingPatient': SharedCarePatientViewModel;
    'InvitationCode': string;
    'IsExistingPatient': boolean;
    'Permission': "None" | "ReadOnly" | "ReadWrite";
    'ReceivingPatientId': string;
    'Relationship': string;
    'SentTime': string;
    'Branding': BrandingViewModel;
};
export declare type SponsorViewModel = {
    'Branding': BrandingViewModel;
    'DistributorCarePlans': Array<SponsorCarePlanViewModel> | SponsorCarePlanViewModel;
    'CarePlans': Array<SponsorCarePlanViewModel> | SponsorCarePlanViewModel;
    'DistributorCategories': Array<CategoryViewModel> | CategoryViewModel;
    'Categories': Array<CategoryViewModel> | CategoryViewModel;
    'DistributorId': string;
    'DistributorTasks': Array<TaskViewModel> | TaskViewModel;
    'Id': string;
    'Name': string;
    'Organizations': Array<OrganizationViewModel> | OrganizationViewModel;
    'PatientCount': number;
    'PatientProfileDefinitionIds': Array<string> | string;
    'ScheduledTaskTimePeriods': Array<string> | string;
    'Settings': SponsorSettings;
    'SponsorTasks': Array<TaskViewModel> | TaskViewModel;
    'TaskAlerts': Array<TaskAlert> | TaskAlert;
    'TaskTags': Array<string> | string;
    'DistributorTaskTags': Array<string> | string;
    'SponsorTaskTags': Array<string> | string;
    'UserCount': number;
    'WebHooks': Array<WebHookViewModel> | WebHookViewModel;
    'ChatBotContextId': string;
};
export declare type PatientSettings = {
    'SendEmailReminders': boolean;
    'ShowHealthDataInNotifications': boolean;
    'NewDirectMessageNotification': Array<"Email" | "Push"> | "Email" | "Push";
};
export declare type SharedCarePatientViewModel = {
    'Id': string;
    'EmailAddress': string;
    'FirstName': string;
    'LastName': string;
    'PatientPhoto': ImageReadModel;
    'Permission': "None" | "ReadOnly" | "ReadWrite";
    'Relationship': string;
};
export declare type OutgoingSharedCareInvitationReadModel = {
    'AcceptedInstant': string;
    'Accepted': boolean;
    'EmailAddress': string;
    'InvitationCode': string;
    'EmailAddressAcceptedWith': string;
    'FirstName': string;
    'LastName': string;
    'Permission': "None" | "ReadOnly" | "ReadWrite";
    'ReceivingPatientId': string;
    'Relationship': "Spouse" | "SignificantOther" | "Grandparent" | "Grandchild" | "Mother" | "Father" | "Child" | "Employee" | "Coworker" | "Other";
};
export declare type SponsorCarePlanViewModel = {
    'Id': string;
    'Name': string;
    'SponsorCarePlanId': string;
    'AssignedPatientCount': number;
    'Categories': Array<CategoryViewModel> | CategoryViewModel;
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
    'OwnerId': string;
};
export declare type OrganizationViewModel = {
    'BusinessAddress': Address;
    'CareTeam': Array<UserViewModel> | UserViewModel;
    'Contact': DigitalContactInformation;
    'Description': string;
    'Id': string;
    'Name': string;
    'SponsorOrganizationId': string;
    'OrganizationPhoto': ImageReadModel;
    'Settings': OrganizationSettings;
    'PatientCount': number;
    'TelephoneNumbers': {
        'Business': TelephoneNumber;
        'Mobile': TelephoneNumber;
        'Personal': TelephoneNumber;
    };
    'UserCount': number;
    'Branding': BrandingViewModel;
    'Uri': string;
};
export declare type SponsorSettings = {
    'AppleAppStoreUrl': string;
    'DisableAppointmentsUI': boolean;
    'EmailFromLabel': "Default" | "SponsorName" | "OrganizationName";
    'GooglePlayStoreUrl': string;
    'HideCareTeam': boolean;
    'MaskSponsorPatientId': boolean;
    'MessagingEnabled': boolean;
    'SendTaskCountEmailReminders': boolean;
    'SendTaskCountPushReminders': boolean;
    'UserTimeCardEnabled': boolean;
    'UserTimeCardRequiresPatientSignature': boolean;
    'ActivationEmailTemplate': string;
    'WelcomeEmailTemplate': string;
    'ReminderEmailTemplate': string;
    'BroadcastedMessageEmailTemplate': string;
    'ResetPasswordEmailTemplate': string;
    'ShareCareEmailTemplate': string;
    'CareTeamWelcomeEmailTemplate': string;
    'CareTeamAlertsEmailTemplate': string;
    'CareTeamActivationEmailTemplate': string;
    'InvitationDripList': string;
    'CareTeamInvitationDripList': string;
    'ReengagementDripList': string;
    'AdminTrainingDripList': string;
    'PersonalCarePlansEnabled': boolean;
    'PatientCarePlansUIEnabled': boolean;
    'CareGiverReadReceiptsEnabled': boolean;
    'PatientCanViewReadReceiptsEnabled': boolean;
    'TwilioFromNumber': string;
    'PatientTwoFactorActivationRequired': boolean;
    'UserTwoFactorActivationRequired': boolean;
    'DistributorContentEnabled': boolean;
    'VideoCallingEnabled': boolean;
    'ChatBotEnabled': boolean;
    'UnreadMessagesEmailTemplate': string;
    'SecondsToSendUnreadMessageEmailReminders': number;
};
export declare type TaskAlert = {
    'Id': string;
    'TaskId': string;
    'Notifications': Array<AlertNotificationRule> | AlertNotificationRule;
    'Triggers': Array<AlertTrigger> | AlertTrigger;
};
export declare type WebHookViewModel = {
    'Id': string;
    'ExternalUri': string;
    'Verb': string;
    'EventName': "SponsorPatientIdAppliedToPatient" | "PatientAddedToRepository" | "AlertSignaledForScheduledTask" | "MeasurementRecorded" | "MessageSent" | "MessageReceived" | "ConversationStatusSet" | "PatientCompletedSurvey";
    'PayloadType': "PatientIo" | "Fhir";
};
export declare type Address = {
    'CompanyName': string;
    'Address1': string;
    'Address2': string;
    'City': string;
    'State': string;
    'PostalCode': string;
    'Country': string;
};
export declare type UserViewModel = {
    'Biography': string;
    'BirthDate': string;
    'Distributors': Array<string> | string;
    'EmailAddress': string;
    'FirstName': string;
    'HomePhone': string;
    'Id': string;
    'LastName': string;
    'LastLoginDateTime': string;
    'LoginPlatforms': {
        'Ios': string;
        'Android': string;
        'Dashboard': string;
        'Unknown': string;
        'Other': string;
        'DashboardMobile': string;
    };
    'MobilePhone': string;
    'Name': NameReadModel;
    'Organizations': Array<string> | string;
    'Roles': Array<string> | string;
    'Sex': string;
    'Sponsors': Array<string> | string;
    'SponsorUserId': string;
    'TimeZoneId': string;
    'UserAddress': Address;
    'UserPhoto': ImageReadModel;
    'Settings': UserSettings;
    'Archived': boolean;
    'Status': "Invited" | "Activated";
    'InvitedByUserId': string;
    'InvitedByUserName': NameReadModel;
    'InvitedBySponsorUserId': string;
};
export declare type DigitalContactInformation = {
    'EmailAddress': string;
    'WebsiteUrl': string;
    'Twitter': string;
};
export declare type OrganizationSettings = {
    'MessagingEnabled': boolean;
};
export declare type TelephoneNumber = {
    'CountryCode': string;
    'Number': string;
    'FormattedNumber': string;
};
export declare type AlertNotificationRule = {
    'Channel': "DashboardOnly" | "Email" | "Sms";
    'NotificationScope': "CareTeam" | "Organization" | "SharedCare";
    'Timing': "Immediate" | "Batched";
};
export declare type AlertTrigger = {
    'RequiresScheduleHistory': boolean;
    'TriggerType': "CompletedTask" | "SkippedTask" | "IgnoredTask" | "LeftNote";
    'TriggerOccurrencesThreshold': number;
    'OccurrenceRelatedness': "Anytime" | "Consecutively" | "SinceLastAlert";
    'OutcomeRule': OutcomeTriggerRule;
};
export declare type UserSettings = {
    'NotifyOfAlerts': boolean;
    'AllowableDirectMessaging': "ByNone" | "ByInOrganization";
    'NewDirectMessageNotification': Array<"Email" | "Push"> | "Email" | "Push";
    'NewOrganizationMessageNotification': Array<"Email" | "Push"> | "Email" | "Push";
};
export declare type OutcomeTriggerRule = {
    'ComparisonRuleType': "None" | "StringComparison" | "NumericComparison" | "BloodPressure";
    'NumericRule': NumericComparisonRule;
    'StringRule': StringComparisonRule;
    'BloodPressureRule': BloodPressureRule;
};
export declare type NumericComparisonRule = {
    'MeasurementCalculation': MeasurementCalculationRule;
    'OutcomeCalculation': "CompareMeasurementOnly" | "PercentageDifference" | "NominalDifference";
    'MeasurementComparison': MeasurementComparisonRule;
    'RequiresScheduleHistory': boolean;
};
export declare type StringComparisonRule = {
    'ComparisonStrings': Array<string> | string;
    'MatchRequirement': "Any" | "All";
};
export declare type BloodPressureRule = {
    'SystolicComparisonRule': NumericComparisonRule;
    'DiastolicComparisonRule': NumericComparisonRule;
};
export declare type MeasurementCalculationRule = {
    'CalculationScope': "ThisOutcome" | "ComparedWithPrevious" | "MovingAverage";
    'MeasurementSpan': number;
    'SpanType': "This" | "Outcomes" | "Days" | "Weeks" | "Months";
};
export declare type MeasurementComparisonRule = {
    'Operator': "Equals" | "GreaterThan" | "GreaterThanOrEqualTo" | "LessThan" | "LessThanOrEqualTo" | "PlusOrMinus" | "OutOfRange";
    'ComparisonValues': Array<ComparisonValue> | ComparisonValue;
};
export declare type ComparisonValue = {
    'ValueType': "Low" | "High" | "Single";
    'Value': number;
};
export declare type PatientUpdateBindingModel = {
    'Address1': string;
    'Address2': string;
    'BirthDate': string;
    'CarePlanId': string;
    'CategoryId': string;
    'City': string;
    'CompanyName': string;
    'Country': string;
    'FirstName': string;
    'LastName': string;
    'MobilePhone': string;
    'HomePhone': string;
    'NewUserName': string;
    'PostalCode': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'State': string;
    'TimeZoneId': string;
    'UserName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
};
export declare type AlertedPatientViewModel = {
    'AlertCount': number;
    'AlertedTime': string;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type ArchivedPatientViewModel = {
    'TimeOfArchival': string;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type TaskOutcomesOverTime = {
    'DomainType': "Day" | "Month";
    'Domain': Array<string> | string;
    'Datasets': {};
};
export declare type TaskOutcomeDataset = {
    'SeriesName': string;
    'Min': Array<number> | number;
    'Max': Array<number> | number;
    'Mean': Array<number> | number;
    'Sum': Array<number> | number;
    'RecordCount': Array<number> | number;
};
export declare type FullNameBindingModel = {
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
};
export declare type AddressBindingModel = {
    'CompanyName': string;
    'Address1': string;
    'Address2': string;
    'City': string;
    'State': string;
    'PostalCode': string;
    'Country': string;
};
export declare type TimeZoneBindingModel = {
    'TimeZoneId': string;
};
export declare type SignaledAlertViewModel = {
    'PatientId': string;
    'ScheduledTaskId': string;
    'SignalId': string;
    'AlertedTime': string;
    'DayOfCare': string;
    'AlertTrigger': AlertTrigger;
    'IsActive': boolean;
    'TaskId': string;
};
export declare type PatientMostRecentTaskResultViewModel = {
    'TaskId': string;
    'TaskName': string;
    'ScheduledTaskId': string;
    'TaskState': string;
    'MeasurementData': string;
    'MeasurementUnits': string;
    'MeasurementDateTime': string;
    'ScheduledTaskRemoved': boolean;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type PatientCoreViewModel = {
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type PatientCreatedDateViewModel = {
    'CreatedDate': string;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type PatientAppointmentDateViewModel = {
    'AppointmentDate': string;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CarePlanAssociations': Array<PatientCarePlanAssocationViewModel> | PatientCarePlanAssocationViewModel;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'IsDeactivated': boolean;
    'Id': string;
    'LastName': string;
    'Name': NameReadModel;
    'OrganizationId': string;
    'OrganizationName': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'TimeZoneId': string;
    'PatientPhoto': ImageViewModel;
    'Status': "Invited" | "Activated" | "Deactivated";
};
export declare type RoleBindingModel = {
    'Roles': Array<string> | string;
};
export declare type InternalBulkPatientUpdateBindingModel = {
    'DistributorId': string;
    'SponsorId': string;
    'PatientIds': Array<string> | string;
    'CarePlanIdsToAdd': Array<string> | string;
    'CarePlanIdsToRemove': Array<string> | string;
    'CategoryIdsToAdd': Array<string> | string;
    'CategoryIdsToRemove': Array<string> | string;
    'OrganizationId': string;
};
export declare type AcceptInvitationBindingModel = {
    'Password': string;
    'EmailAddress': string;
    'Sex': string;
    'BirthDate': string;
    'ActivationCode': string;
};
export declare type PatientInvitationCreateBindingModel = {
    'Address1': string;
    'Address2': string;
    'BirthDate': string;
    'CarePlanId': string;
    'CarePlanIds': Array<string> | string;
    'CategoryId': string;
    'CategoryIds': Array<string> | string;
    'City': string;
    'EmailAddress': string;
    'Prefix': string;
    'Suffix': string;
    'FirstName': string;
    'HomePhone': string;
    'MiddleName': string;
    'LastName': string;
    'MobilePhone': string;
    'OrganizationId': string;
    'PostalCode': string;
    'Sex': string;
    'SponsorPatientId': string;
    'State': string;
    'TimeZoneId': string;
    'ChannelTypes': Array<"Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot"> | "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
};
export declare type InvitationCodeViewModel = {
    'InvitationCode': string;
    'EmailAddress': string;
    'SponsorId': string;
};
export declare type PatientInvitation = {
    'Accepted': boolean;
    'AcceptedTime': string;
    'Address1': string;
    'Address2': string;
    'BirthDate': string;
    'CarePlanId': string;
    'CarePlanIds': Array<string> | string;
    'CategoryId': string;
    'CategoryIds': Array<string> | string;
    'City': string;
    'CreatedByUserId': string;
    'CreatedBySponsorUserId': string;
    'CreatedByUserName': string;
    'CreatedDateTime': string;
    'CreatedPatientId': string;
    'Country': string;
    'DistributorId': string;
    'EmailAddress': string;
    'FirstName': string;
    'HomePhone': string;
    'InvitationCode': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
    'MobilePhone': string;
    'OrganizationId': string;
    'OrganizationName': string;
    'PostalCode': string;
    'Sent': boolean;
    'SentTime': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorPatientId': string;
    'State': string;
    'TimeZoneId': string;
    'UserName': string;
    'ChannelTypes': Array<"Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot"> | "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
};
export declare type KioskPatientInvitationCreateBindingModel = {
    'Address1': string;
    'Address2': string;
    'BirthDate': string;
    'CarePlanIds': Array<string> | string;
    'CategoryIds': Array<string> | string;
    'City': string;
    'EmailAddress': string;
    'FirstName': string;
    'LastName': string;
    'MobilePhone': string;
    'OrganizationId': string;
    'PostalCode': string;
    'Sex': string;
    'SponsorPatientId': string;
    'State': string;
    'TimeZoneId': string;
};
export declare type ResendInvitationsBindingModel = {
    'LastSentStartDate': string;
    'LastSentEndDate': string;
    'TimeZoneId': string;
    'InvitationCodes': Array<string> | string;
    'ChannelTypes': Array<"Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot"> | "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
};
export declare type PatientProfileDefinitionCreateBindingModel = {
    'Name': string;
    'Id': string;
    'AllowMultipleInstancesPerPatient': boolean;
};
export declare type ProfileDefinitionElementCreateBindingModel = {
    'Name': string;
    'Code': string;
    'Category': string;
};
export declare type PatientProfileDefinitionEnhancedReadModel = {
    'Name': string;
    'Id': string;
    'AggregateId': string;
    'CreationDateTime': string;
    'DistributorId': string;
    'TagElements': Array<TagElementDefinition> | TagElementDefinition;
    'TextElements': Array<TextElementDefinition> | TextElementDefinition;
    'CodeCollections': Array<CodeCollectionDefinition> | CodeCollectionDefinition;
    'Category': string;
    'AllowMultipleInstancesPerPatient': boolean;
};
export declare type TagElementDefinition = {
    'DefinedTagsBySponsor': {};
    'Id': string;
    'Name': string;
    'Code': string;
    'Category': string;
};
export declare type TextElementDefinition = {
    'Id': string;
    'Name': string;
    'Code': string;
    'Category': string;
};
export declare type CodeCollectionDefinition = {
    'Id': string;
    'Name': string;
    'Code': string;
    'Category': string;
};
export declare type PatientProfileDefinitionElementCategoryBindingModel = {
    'Category': string;
};
export declare type CodeCollectionBindingModel = {
    'Codes': Array<CodesBindingModel> | CodesBindingModel;
};
export declare type CodesBindingModel = {
    'CodingScheme': string;
    'Code': string;
    'Description': string;
};
export declare type SetProfileTagElementBindingModel = {
    'Tags': Array<string> | string;
};
export declare type FullPatientProfileViewModel = {
    'ProfileDefinitionInstances': {};
};
export declare type PatientProfileCollectionEnhancedReadModel = {
    'Instances': {};
    'PatientId': string;
    'DistributorId': string;
    'SponsorId': string;
    'PatientProfileDefinitionId': string;
    'Category': string;
    'AllowMultipleInstances': boolean;
};
export declare type PatientProfileEnhancedReadModel = {
    'Key': string;
    'Title': string;
    'Subtitle': string;
    'TagElements': Array<TagElementReadModel> | TagElementReadModel;
    'TextElements': Array<TextElementReadModel> | TextElementReadModel;
    'CodeCollections': Array<CodeCollectionReadModel> | CodeCollectionReadModel;
    'PatientId': string;
    'DistributorId': string;
    'SponsorId': string;
    'PatientProfileDefinitionId': string;
    'Category': string;
    'AllowMultipleInstances': boolean;
};
export declare type TagElementReadModel = {
    'SponsorTags': Array<string> | string;
    'Tags': Array<string> | string;
    'Category': string;
    'Code': string;
    'Id': string;
    'LastUpdated': string;
    'Name': string;
};
export declare type TextElementReadModel = {
    'Text': string;
    'Category': string;
    'Code': string;
    'Id': string;
    'LastUpdated': string;
    'Name': string;
};
export declare type CodeCollectionReadModel = {
    'Codes': Array<CodeReadModel> | CodeReadModel;
    'Category': string;
    'Code': string;
    'Id': string;
    'LastUpdated': string;
    'Name': string;
};
export declare type CodeReadModel = {
    'CodingScheme': string;
    'Code': string;
    'Description': string;
};
export declare type UpdateSponsorPatientProfileBindingModel = {
    'TagElements': Array<TagElementUpdateBindingModel> | TagElementUpdateBindingModel;
    'TextElements': Array<TextElementUpdateBindingModel> | TextElementUpdateBindingModel;
};
export declare type TagElementUpdateBindingModel = {
    'Id': string;
    'Tags': Array<string> | string;
};
export declare type TextElementUpdateBindingModel = {
    'Id': string;
    'Text': string;
};
export declare type UpdateSponsorPatientProfileInstanceLinkText = {
    'Title': string;
    'Subtitle': string;
};
export declare type AppointmentCancelBindingModel = {
    'AppointmentDateTime': string;
    'CancellationDateTime': string;
    'SponsorId': string;
};
export declare type AppointmentCreateBindingModel = {
    'AppointmentDateTime': string;
    'SponsorId': string;
};
export declare type AppointmentUpdateBindingModel = {
    'OldAppointmentDateTime': string;
    'NewAppointmentDateTime': string;
    'SponsorId': string;
};
export declare type MeasurementBindingModel = {
    'MeasurementDateTime': string;
    'MeasurementData': string;
    'Source': string;
    'State': "NoResult" | "CompletedSuccessfully" | "CompletedUnsuccessfully" | "InProgress" | "Deferred";
    'Notes': string;
};
export declare type RecordedMeasurementData = {
    'ScheduledTaskId': string;
    'MeasurementId': string;
    'MeasurementData': string;
};
export declare type PatientScheduleViewModel = {
    'Days': Array<DayOfCareViewModel> | DayOfCareViewModel;
};
export declare type DayOfCareViewModel = {
    'Date': string;
    'ScheduledTasks': Array<ScheduledTaskViewModel> | ScheduledTaskViewModel;
    'Surveys': {};
    'SignaledAlerts': Array<SignaledAlertViewModel> | SignaledAlertViewModel;
};
export declare type ScheduledTaskViewModel = {
    'CarePlanId': string;
    'CarePlanIds': Array<string> | string;
    'CausedAlert': boolean;
    'Codes': Array<MedicalCode> | MedicalCode;
    'GoalNumber': string;
    'Id': string;
    'MeasurementDomain': Array<string> | string;
    'MeasurementUnits': string;
    'Note': string;
    'Outcome': MeasurementViewModel;
    'RolesAllowedToRecordOutcome': Array<string> | string;
    'ScheduledTime': string;
    'ScheduledTimePeriod': string;
    'SponsorId': string;
    'SponsorTaskId': string;
    'SurveyInformation': SurveyNodeInformation;
    'TaskContentUri': string;
    'TaskContentUriRequiresAuthentication': boolean;
    'TaskCost': number;
    'TaskDuration': number;
    'TaskId': string;
    'TaskName': string;
    'TaskDescription': string;
    'TaskTags': Array<string> | string;
    'TypeOfMeasurement': string;
};
export declare type ScheduledSurveyViewModel = {
    'SurveyId': string;
    'SurveyName': string;
    'SurveyScheduledTasks': Array<ScheduledTaskViewModel> | ScheduledTaskViewModel;
    'TaskScheduleId': string;
    'RolesAllowedToRecordOutcome': Array<string> | string;
    'SponsorSurveyId': string;
};
export declare type MeasurementViewModel = {
    'Id': string;
    'TaskId': string;
    'MeasurementDateTime': string;
    'MeasurementData': string;
    'NonPatientRecordingUserId': string;
    'NonPatientRecordingUserActorKind': "Patient" | "User" | "Organization";
    'NonPatientRecordingUserSponsorId': string;
    'NonPatientRecordingUserFirstName': string;
    'NonPatientRecordingUserLastName': string;
    'Source': string;
    'State': "NoResult" | "CompletedSuccessfully" | "CompletedUnsuccessfully" | "InProgress" | "Deferred";
    'Notes': string;
};
export declare type SurveyNodeInformation = {
    'SurveyId': string;
    'BranchData': BranchInfo;
    'SponsorSurveyId': string;
};
export declare type BranchInfo = {
    'BranchingTaskId': string;
    'TaskId': string;
    'NextBranchConditions': Array<BranchCondition> | BranchCondition;
    'IsHead': boolean;
};
export declare type BranchCondition = {
    'Condition': Condition;
    'BranchingTaskId': string;
};
export declare type Condition = {
    'Operator': "Default" | "Equals" | "Contains";
    'Values': Array<string> | string;
};
export declare type SponsorEngagementOrAdherenceWithCarePlanViewModel = {
    'CarePlans': Array<CarePlanWithAveragesViewModel> | CarePlanWithAveragesViewModel;
};
export declare type CarePlanWithAveragesViewModel = {
    'CarePlanName': string;
    'Average': Array<number> | number;
    'YYYYMM': Array<number> | number;
};
export declare type OrganizationEngagementRatioViewModel = {
    'Data': Array<CareTeamEngagementModel> | CareTeamEngagementModel;
    'OrganizationName': string;
};
export declare type CareTeamEngagementModel = {
    'ActiveUserCount': number;
    'EngagedUserCount': number;
    'Ratio': number;
    'YearMonthDate': string;
};
export declare type OrganizationSessionRatioViewModel = {
    'Data': CareTeamSession;
    'OrganizationName': string;
};
export declare type CareTeamSession = {
    'SessionRatio': number;
    'TotalPossibleLogins': number;
    'TotalUserLogins': number;
};
export declare type SponsorEngagementRatioViewModel = {
    'Data': Array<CareTeamEngagementModel> | CareTeamEngagementModel;
    'SponsorName': string;
};
export declare type SponsorSessionRatioViewModel = {
    'Data': CareTeamSession;
    'SponsorName': string;
};
export declare type PatientChannelPercentagesViewModel = {
    'Android': number;
    'AndroidPush': number;
    'Apple': number;
    'ApplePush': number;
    'Desktop': number;
    'Email': number;
};
export declare type PatientDemographicsReport = {
    'Gender': PatientSexCountsReport;
    'Age': PatientAgeCountsReport;
};
export declare type PatientSexCountsReport = {
    'MaleCount': number;
    'FemaleCount': number;
    'UnknownCount': number;
};
export declare type PatientAgeCountsReport = {
    'Range0': number;
    'Range1': number;
    'Range2': number;
    'Range3': number;
    'Range4': number;
    'Range5': number;
    'Range6': number;
};
export declare type PatientInvitationReport = {
    'Count': number;
};
export declare type SponsorEngagementOrAdherenceViewModel = {
    'Engagement': AveragesViewModel;
    'Adherence': AveragesViewModel;
    'WithoutTasks': AveragesViewModel;
};
export declare type AveragesViewModel = {
    'Average': Array<number> | number;
    'YYYYMM': Array<number> | number;
};
export declare type PatientOnboardingCountsReport = {
    'Categories': Array<string> | string;
    'InvitesSent': Array<number> | number;
    'Activated': Array<number> | number;
    'Pending': Array<number> | number;
};
export declare type SharedCareListItemViewModel = {
    'Id': string;
    'SponsorPatientId': string;
    'Name': INameReadModel;
    'OrganizationName': string;
    'Photo': string;
    'Relationships': Array<SharedCareRelationshipViewModel> | SharedCareRelationshipViewModel;
};
export declare type INameReadModel = {
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
};
export declare type SharedCareRelationshipViewModel = {
    'Id': string;
    'SponsorPatientId': string;
    'Name': INameReadModel;
    'OrganizationName': string;
    'Photo': string;
    'Relationship': "Spouse" | "SignificantOther" | "Grandparent" | "Grandchild" | "Mother" | "Father" | "Child" | "Employee" | "Coworker" | "Other";
    'Permissions': "None" | "ReadOnly" | "ReadWrite";
};
export declare type SharedCareInvitationAcceptBindingModel = {
    'Password': string;
    'EmailAddressAcceptedWith': string;
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
    'HomePhone': string;
    'MobilePhone': string;
    'Sex': string;
    'TimeZoneId': string;
    'BirthDate': string;
    'Relationship': "Spouse" | "SignificantOther" | "Grandparent" | "Grandchild" | "Mother" | "Father" | "Child" | "Employee" | "Coworker" | "Other";
};
export declare type SharedCarePermissionsBindingModel = {
    'Permission': "None" | "ReadOnly" | "ReadWrite";
};
export declare type SharedCareInvitation = {
    'Accepted': boolean;
    'AcceptedTime': string;
    'EmailAddress': string;
    'EmailAddressAcceptedWith': string;
    'FirstName': string;
    'LastName': string;
    'InvitingPatientId': string;
    'InvitationCode': string;
    'IsExistingPatient': boolean;
    'Permission': "None" | "ReadOnly" | "ReadWrite";
    'ReceivingPatientId': string;
    'Relationship': "Spouse" | "SignificantOther" | "Grandparent" | "Grandchild" | "Mother" | "Father" | "Child" | "Employee" | "Coworker" | "Other";
    'SentTime': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
    'Address1': string;
    'Address2': string;
    'City': string;
    'State': string;
    'PostalCode': string;
    'Country': string;
};
export declare type SharedCareInvitationCreateBindingModel = {
    'EmailAddress': string;
    'FirstName': string;
    'LastName': string;
    'Relationship': "Spouse" | "SignificantOther" | "Grandparent" | "Grandchild" | "Mother" | "Father" | "Child" | "Employee" | "Coworker" | "Other";
    'Permission': "None" | "ReadOnly" | "ReadWrite";
};
export declare type SharedCareInvitationCodeViewModel = {
    'InvitationCode': string;
    'EmailAddress': string;
    'PatientId': string;
};
export declare type OrganizationSettingsBindingModel = {
    'Settings': {};
};
export declare type SponsorOrganizationIdBindingModel = {
    'SponsorOrganizationId': string;
};
export declare type SponsorSettingsBindingModel = {
    'Settings': {};
};
export declare type SponsorSecretsBindingModel = {
    'SecretName': string;
    'SecretValue': string;
};
export declare type SponsorSecretsViewModel = {
    'Secrets': SponsorSecrets;
};
export declare type SponsorSecrets = {
    'CampaignMonitorApiKey': string;
    'MandrillApiKey': string;
    'CampaignMonitorClientId': string;
    'AzureNotificationHubName': string;
    'AzureNotificationHubConnectionString': string;
    'TwilioAccountSid': string;
    'TwilioAuthToken': string;
    'TwilioProgrammableVideoSid': string;
    'TwilioProgrammableVideoSecret': string;
};
export declare type OrganizationCreateBindingModel = {
    'Name': string;
    'Description': string;
    'SponsorOrganizationId': string;
};
export declare type OrganizationReadModel = {
    'BusinessAddress': Address;
    'Contact': DigitalContactInformation;
    'Description': string;
    'Id': string;
    'Name': string;
    'OrganizationPhoto': ImageReadModel;
    'PatientCount': number;
    'SponsorOrganizationId': string;
    'TelephoneNumbers': {
        'Business': TelephoneNumber;
        'Mobile': TelephoneNumber;
        'Personal': TelephoneNumber;
    };
    'UserCount': number;
    'Branding': BrandingReadModel;
    'BrandingLogoUrl': string;
    'BrandingEmailLogoUrl': string;
    'Settings': OrganizationSettings;
};
export declare type BrandingReadModel = {
    'Logo': ImageReadModel;
    'EmailLogo': ImageReadModel;
    'PrimaryColor': string;
    'SecondaryColor': string;
    'TertiaryColor': string;
};
export declare type SponsorCounterViewModel = {
    'DistributorId': string;
    'SponsorId': string;
    'UserCount': number;
    'PatientCount': number;
    'ActivationCount': number;
    'DeactivationCount': number;
    'PatientsLoggedInCount': number;
    'CarePlanUtilization': {};
};
export declare type OrganizationDescriptionBindingModel = {
    'Description': string;
};
export declare type DigitalContactInformationBindingModel = {
    'EmailAddress': string;
    'WebsiteUrl': string;
    'Twitter': string;
};
export declare type OrganizationNameBindingModel = {
    'Name': string;
};
export declare type TelephoneBindingModel = {
    'CountryCode': string;
    'Number': string;
};
export declare type PhoneBindingModel = {
    'PhoneNumber': string;
};
export declare type WebHookCreateBindingModel = {
    'EventName': "SponsorPatientIdAppliedToPatient" | "PatientAddedToRepository" | "AlertSignaledForScheduledTask" | "MeasurementRecorded" | "MessageSent" | "MessageReceived" | "ConversationStatusSet" | "PatientCompletedSurvey";
    'Verb': "Get" | "Post" | "Put" | "Delete" | "Head" | "Patch" | "Options";
    'ExternalUri': string;
    'PayloadType': "PatientIo" | "Fhir";
    'AuthorizationUri': string;
    'GrantType': "ClientCredentials" | "Password";
    'UserName': string;
    'Password': string;
};
export declare type WebHookUpdateBindingModel = {
    'EventName': "SponsorPatientIdAppliedToPatient" | "PatientAddedToRepository" | "AlertSignaledForScheduledTask" | "MeasurementRecorded" | "MessageSent" | "MessageReceived" | "ConversationStatusSet" | "PatientCompletedSurvey";
    'Verb': "Get" | "Post" | "Put" | "Delete" | "Head" | "Patch" | "Options";
    'ExternalUri': string;
    'PayloadType': "PatientIo" | "Fhir";
};
export declare type WebHookAuthorizationUpdateBindingModel = {
    'Ids': Array<string> | string;
    'AuthorizationUri': string;
    'GrantType': "ClientCredentials" | "Password";
    'UserName': string;
    'Password': string;
};
export declare type SurveyCreateBindingModel = {
    'Name': string;
    'BranchingTasks': Array<BranchingTaskCreateBindingModel> | BranchingTaskCreateBindingModel;
    'State': "Activated" | "Deactivated";
    'SponsorSurveyId': string;
};
export declare type BranchingTaskCreateBindingModel = {
    'TaskId': string;
    'BranchConditions': Array<ConditionTaskCollectionBindingModel> | ConditionTaskCollectionBindingModel;
};
export declare type ConditionTaskCollectionBindingModel = {
    'Condition': Condition;
    'BranchingTasks': Array<BranchingTaskCreateBindingModel> | BranchingTaskCreateBindingModel;
};
export declare type SurveyReadModel = {
    'AggregateId': string;
    'Id': string;
    'Version': number;
    'DistributorId': string;
    'SponsorId': string;
    'Name': string;
    'State': "Activated" | "Deactivated";
    'SponsorSurveyId': string;
    'BranchingTasks': Array<BranchingTask> | BranchingTask;
    'OwnerAggregateId': string;
    'OwningAggregateType': "Distributor" | "Sponsor" | "Patient";
};
export declare type BranchingTask = {
    'Id': string;
    'TaskId': string;
    'BranchConditions': Array<ConditionTaskCollection> | ConditionTaskCollection;
};
export declare type ConditionTaskCollection = {
    'Condition': Condition;
    'BranchingTasks': Array<BranchingTask> | BranchingTask;
};
export declare type SurveyBranchesBindingModel = {
    'BranchingTasks': Array<BranchingTask> | BranchingTask;
    'Version': number;
};
export declare type SurveyStateBindingModel = {
    'State': "Activated" | "Deactivated";
};
export declare type SurveySponsorSurveyIdBindingModel = {
    'SponsorSurveyId': string;
};
export declare type TagListBindingModel = {
    'Tags': Array<string> | string;
};
export declare type TaskContentBindingModel = {
    'ContentUri': string;
    'ContentUriRequiresAuthentication': boolean;
};
export declare type TaskDeactivatedStateBindingModel = {
    'ShouldBeDeactivated': boolean;
};
export declare type TaskDescriptionBindingModel = {
    'Description': string;
};
export declare type TaskMeasurementBindingModel = {
    'GoalNumber': number;
    'MeasurementDomain': Array<string> | string;
    'MeasurementUnits': string;
    'OwningAggregateId': string;
    'TypeOfMeasurement': "Boolean" | "String" | "Date" | "DateTime" | "MultipleChoiceSingle" | "MultipleChoiceMultiple" | "Numeric" | "NumericWithGoal" | "Appointment" | "Checklist" | "Signature" | "Interval" | "Photo";
};
export declare type TaskCodesBindingModel = {
    'Codes': Array<MedicalCode> | MedicalCode;
};
export declare type SponsorTaskIdBindingModel = {
    'SponsorTaskId': string;
};
export declare type TaskCreateBindingModel = {
    'Cost': number;
    'Duration': number;
    'GoalNumber': number;
    'MeasurementDomain': Array<string> | string;
    'MeasurementUnits': string;
    'Name': string;
    'SponsorTaskId': string;
    'TaskContentUri': string;
    'TaskContentUriRequiresAuthentication': boolean;
    'TaskDescription': string;
    'TaskTags': Array<string> | string;
    'TypeOfMeasurement': "Boolean" | "String" | "Date" | "DateTime" | "MultipleChoiceSingle" | "MultipleChoiceMultiple" | "Numeric" | "NumericWithGoal" | "Appointment" | "Checklist" | "Signature" | "Interval" | "Photo";
    'Codes': Array<MedicalCode> | MedicalCode;
    'PatientAssignable': boolean;
};
export declare type CreateTaskAlertBindingModel = {
    'TaskAlert': TaskAlert;
};
export declare type TaskUpdateBindingModel = {
    'Duration': number;
    'GoalNumber': number;
    'MeasurementDomain': Array<string> | string;
    'MeasurementUnits': string;
    'Name': string;
    'SponsorTaskId': string;
    'Cost': number;
    'TaskContentUri': string;
    'TaskContentUriRequiresAuthentication': boolean;
    'TaskTags': Array<string> | string;
    'TaskDescription': string;
    'TypeOfMeasurement': "Boolean" | "String" | "Date" | "DateTime" | "MultipleChoiceSingle" | "MultipleChoiceMultiple" | "Numeric" | "NumericWithGoal" | "Appointment" | "Checklist" | "Signature" | "Interval" | "Photo";
    'Codes': Array<MedicalCode> | MedicalCode;
    'PatientAssignable': boolean;
};
export declare type UpdateTaskAlertBindingModel = {
    'TaskAlert': TaskAlert;
};
export declare type TreatmentTaskScheduleItemBindingModel = {
    'DaysRelativeToNextTreatment': number;
    'ScheduledTime': string;
    'ScheduledTimePeriod': string;
};
export declare type UpdateTaskScheduleItemBindingModel = {
    'ScheduledTime': string;
    'ScheduledTimePeriod': string;
};
export declare type UntilCompleteTaskScheduleItemBindingModel = {
    'ExpirationPeriodUnits': "None" | "Years" | "Months" | "Weeks" | "Days" | "AllDateUnits" | "YearMonthDay" | "Hours" | "Minutes" | "Seconds" | "Milliseconds" | "Ticks" | "Nanoseconds" | "HourMinuteSecond" | "AllTimeUnits" | "DateAndTime" | "AllUnits";
    'RepetitionPeriod': "Once" | "Year" | "Month" | "Week" | "Day";
    'StartPeriodUnits': "None" | "Years" | "Months" | "Weeks" | "Days" | "AllDateUnits" | "YearMonthDay" | "Hours" | "Minutes" | "Seconds" | "Milliseconds" | "Ticks" | "Nanoseconds" | "HourMinuteSecond" | "AllTimeUnits" | "DateAndTime" | "AllUnits";
    'ExpirationDate': string;
    'ExpirationNumberOfPeriods': number;
    'RepetitionInterval': number;
    'StartDate': string;
    'StartNumberOfPeriods': number;
};
export declare type WeeklyTaskScheduleItemBindingModel = {
    'DayOfWeek': "None" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
    'ScheduledTime': string;
    'StartType': "OnScheduleStart" | "OnInitialTreatment";
    'StopType': "NoStop" | "OnInitialTreatment";
    'ScheduledTimePeriod': string;
};
export declare type TaskScheduleBindingModel = {
    'Note': string;
    'TaskClass': "Standard" | "Survey";
    'TaskId': string;
    'TreatmentTaskScheduleItems': Array<TreatmentTaskScheduleItemBindingModel> | TreatmentTaskScheduleItemBindingModel;
    'WeeklyTaskScheduleItems': Array<WeeklyTaskScheduleItemBindingModel> | WeeklyTaskScheduleItemBindingModel;
    'UntilCompleteTaskScheduleItems': Array<UntilCompleteTaskScheduleItemBindingModel> | UntilCompleteTaskScheduleItemBindingModel;
    'Target': number;
    'RolesAllowedToRecordOutcome': Array<string> | string;
};
export declare type TaskScheduleUpdateBindingModel = {
    'Note': string;
};
export declare type TaskScheduleTargetUpdateBindingModel = {
    'Target': number;
};
export declare type TaskScheduleRolesAllowedToRecordOutcomeUpdateBindingModel = {
    'RolesAllowedToRecordOutcome': Array<string> | string;
};
export declare type TaskScheduleIsDeactivatedBindingModel = {
    'IsDeactivated': boolean;
};
export declare type TimeCardRecordCreateBindingModel = {
    'PatientId': string;
    'TimeCardActions': Array<TimeCardActionCreateBindingModel> | TimeCardActionCreateBindingModel;
};
export declare type TimeCardActionCreateBindingModel = {
    'ActionType': "Checkin" | "Checkout";
    'Latitude': number;
    'LocationAccuracyMeters': number;
    'Longitude': number;
    'ActionTime': string;
    'SignatureImageDataUri': string;
    'Note': string;
};
export declare type TimeCardUpdateResponse = {
    'ActionType': "Checkin" | "Checkout" | "UpdateState";
    'Id': string;
};
export declare type TimeCardRecordViewModel = {
    'Id': string;
    'TimeIn': TimeCardActionViewModel;
    'TimeOut': TimeCardActionViewModel;
    'User': ActorReadModel;
    'Patient': ActorReadModel;
};
export declare type TimeCardActionViewModel = {
    'Latitude': number;
    'LocationAccuracyMeters': number;
    'Longitude': number;
    'ActionTime': string;
    'Note': string;
    'SignatureUri': string;
};
export declare type CurrentTimeCardActionBindingModel = {
    'PatientId': string;
    'ActionType': "Checkin" | "Checkout" | "UpdateState";
    'Latitude': number;
    'LocationAccuracyMeters': number;
    'Longitude': number;
    'SignatureImageDataUri': string;
    'Note': string;
};
export declare type TimeCardRecordUpdateBindingModel = {
    'PatientId': string;
    'TimeCardAction': TimeCardActionUpdateBindingModel;
};
export declare type TimeCardActionUpdateBindingModel = {
    'ActionType': "Checkin" | "Checkout";
    'Latitude': number;
    'LocationAccuracyMeters': number;
    'Longitude': number;
    'UpdatedActionTime': string;
    'Note': string;
};
export declare type UserSettingsBindingModel = {
    'NotifyOfAlerts': boolean;
    'AllowableDirectMessaging': "ByNone" | "ByInOrganization";
    'NewDirectMessageNotification': Array<"Email" | "Push"> | "Email" | "Push";
    'NewOrganizationMessageNotification': Array<"Email" | "Push"> | "Email" | "Push";
};
export declare type UserCreateBindingModel = {
    'Address1': string;
    'Address2': string;
    'Biography': string;
    'BirthDate': string;
    'City': string;
    'CompanyName': string;
    'Country': string;
    'FirstName': string;
    'HomePhone': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
    'MobilePhone': string;
    'OrganizationIds': Array<string> | string;
    'Password': string;
    'PostalCode': string;
    'Roles': Array<string> | string;
    'Sex': string;
    'SponsorUserId': string;
    'State': string;
    'TimeZoneId': string;
    'UserName': string;
};
export declare type UserCreatedViewModel = {
    'UserName': string;
    'Id': string;
    'Roles': Array<string> | string;
};
export declare type DistributorUserListViewModel = {
    'DistributorId': string;
    'Users': {};
};
export declare type UserUpdateBindingModel = {
    'Address1': string;
    'Address2': string;
    'Biography': string;
    'BirthDate': string;
    'City': string;
    'CompanyName': string;
    'Country': string;
    'Prefix': string;
    'FirstName': string;
    'MiddleName': string;
    'HomePhone': string;
    'LastName': string;
    'Suffix': string;
    'MobilePhone': string;
    'NewUserName': string;
    'OrganizationId': string;
    'PostalCode': string;
    'Sex': string;
    'SponsorId': string;
    'SponsorUserId': string;
    'State': string;
    'TimeZoneId': string;
    'UserName': string;
};
export declare type SponsorUserListViewModel = {
    'SponsorId': string;
    'Users': {};
};
export declare type UserAcceptInvitationBindingModel = {
    'EmailAddress': string;
    'Sex': string;
    'BirthDate': string;
    'Password': string;
    'ActivationCode': string;
};
export declare type UserCreateInvitationBindingModel = {
    'Name': FullNameBindingModel;
    'Address': AddressBindingModel;
    'MobilePhone': string;
    'HomePhone': string;
    'EmailAddress': string;
    'Sex': string;
    'BirthDate': string;
    'TimeZoneId': string;
    'Biography': string;
    'SponsorUserId': string;
    'OrganizationIds': Array<string> | string;
    'Roles': Array<string> | string;
    'ChannelTypes': Array<"Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot"> | "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
};
export declare type UserInvitationCreateViewModel = {
    'UserName': string;
    'Id': string;
    'Roles': Array<string> | string;
    'InvitationCode': string;
};
export declare type UserStatusViewModel = {
    'InvitedByUserId': string;
    'InvitedBySponsorUserId': string;
    'InvitedByUserName': NameViewModel;
    'InvitationSentDate': string;
    'InvitationAcceptedDate': string;
    'InvitationCode': string;
    'DistributorId': string;
    'SponsorId': string;
    'Id': string;
    'BirthDate': string;
    'EmailAddress': string;
    'HomePhone': string;
    'MobilePhone': string;
    'Name': NameViewModel;
    'Organizations': Array<string> | string;
    'Roles': Array<string> | string;
    'Sex': string;
    'SponsorUserId': string;
    'TimeZoneId': string;
    'UserPhoto': ImageViewModel;
    'Archived': boolean;
    'Status': "Invited" | "Activated";
};
export declare type NameViewModel = {
    'FirstName': string;
    'LastName': string;
    'MiddleName': string;
    'Prefix': string;
    'Suffix': string;
};
export declare type ResendUserInvitationsByInvitationCodeBindingModel = {
    'InvitationCodes': Array<string> | string;
    'ChannelTypes': Array<"Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot"> | "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
};
export declare type ResendUserInvitationsByDateBindingModel = {
    'LastSentStartDate': string;
    'LastSentEndDate': string;
    'ChannelTypes': Array<"Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot"> | "Unknown" | "Push" | "App" | "Email" | "Sms" | "Api" | "Ivr" | "None" | "ChatBot";
};
export declare type VideoCallBindingModel = {
    'RecipientId': string;
};
export declare type VideoCallCreateViewModel = {
    'Token': string;
    'RoomId': string;
};
export declare type VideoCallViewModel = {
    'Parties': Array<ActorReadModel> | ActorReadModel;
    'RoomId': string;
    'VideoCallEndReason': "FinishedSuccessfully" | "NoResponseFromRecipient" | "CanceledByCaller" | "RejectedByRecipient";
    'TimeSent': string;
    'TimeEnd': string;
};
export declare type VideoCallTokenViewModel = {
    'Token': string;
};
export declare type VideoCallEndBindingModel = {
    'VideoCallEndReason': "FinishedSuccessfully" | "NoResponseFromRecipient" | "CanceledByCaller" | "RejectedByRecipient";
};
export declare type Logger = {
    log: (line: string) => any;
};
/**
 *
 * @class ApiClass
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export declare class ApiClass {
    private logger;
    domain: string;
    errorHandlers: CallbackHandler[];
    constructor(domain?: string, logger?: Logger | undefined);
    getDomain(): string;
    addErrorHandler(handler: CallbackHandler): void;
    request(method: string, url: string, body: any, headers: any, queryParameters: any, form: any, reject: CallbackHandler, resolve: CallbackHandler): void;
}
export default ApiClass;
