import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class Conversations
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Conversations extends ApiClass {
    GetOrganizationConversationWithPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        organizationId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets an organization's conversation with a patient (from the organization's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetOrganizationConversationWithPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetOrganizationConversationWithPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        organizationId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationConversationStatusURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        organizationId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the state of an organization's conversation with a patient.
     * @method
     * @name Conversations#UpdateOrganizationConversationStatus
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationConversationStatus(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        organizationId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    SendMessageFromOrganizationToPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        patientId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that sends a message from an organization to a patient.
     * @method
     * @name Conversations#SendMessageFromOrganizationToPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} patientId - The patient identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromOrganizationToPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        patientId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetUserConversationWithPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        userId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a user's conversation with a patient (from the user's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetUserConversationWithPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} userId - The user identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetUserConversationWithPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        userId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateUserConversationStateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        userId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the state of an user's conversation with a patient.
     * @method
     * @name Conversations#UpdateUserConversationState
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} userId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdateUserConversationState(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        userId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    SendMessageFromUserToPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        patientId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that sends a message from a user to a patient.
     * @method
     * @name Conversations#SendMessageFromUserToPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The organization identifier.
     * @param {string} patientId - The patient identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromUserToPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        patientId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientConversationWithOrganizationURL(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves a patient's conversation with an organization (from the patient's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetPatientConversationWithOrganization
         * @param {string} patientId - The patient identifier.
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetPatientConversationWithOrganization(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientConversationWithOrganizationStatusURL(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the state of a patient's conversation with an organization.
     * @method
     * @name Conversations#UpdatePatientConversationWithOrganizationStatus
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdatePatientConversationWithOrganizationStatus(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    SendMessageFromPatientToOrganizationURL(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that sends a message from a patient to an organization.
     * @method
     * @name Conversations#SendMessageFromPatientToOrganization
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsors identifier.
     * @param {string} organizationId - The org identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromPatientToOrganization(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientConversationWithUserURL(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        userId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves a patient's conversation with a user (from the patient's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetPatientConversationWithUser
         * @param {string} patientId - The patient identifier.
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetPatientConversationWithUser(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        userId: string;
        fromDateTime?: string;
        toDateTime?: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientConversationWithUserStatusURL(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the state of a patient's conversation with an user.
     * @method
     * @name Conversations#UpdatePatientConversationWithUserStatus
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdatePatientConversationWithUserStatus(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.ConversationUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    SendMessageFromPatientToUserURL(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        userId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that sends a message from a patient to an user.
     * @method
     * @name Conversations#SendMessageFromPatientToUser
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsors identifier.
     * @param {string} userId - The org identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromPatientToUser(parameters: {
        patientId: string;
        distributorId: string;
        sponsorId: string;
        userId: string;
        messageModel: Api.MessageCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
