import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class Sponsors
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Sponsors extends ApiClass {
    ChangeOrganizationSettingsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.OrganizationSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that modifies organization settings.
     * @method
     * @name Sponsors#ChangeOrganizationSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The organization settings model.
     * @param {string} authorization - access token
     */
    ChangeOrganizationSettings(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.OrganizationSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangeSponsorOrganizationIdURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.SponsorOrganizationIdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that changes the SponsorOrganizationId of an organization.
                    The SponsorOrganizationId is an identifier, meaningful to a client, which
                    describes an Organization (e.g. an id number.)
    * @method
    * @name Sponsors#ChangeSponsorOrganizationId
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {} model - The sponsor organization identifier model.
         * @param {string} authorization - access token
    */
    ChangeSponsorOrganizationId(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.SponsorOrganizationIdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangeSponsorSettingsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.SponsorSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that changes sponsor settings.
     * @method
     * @name Sponsors#ChangeSponsorSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The sponsor settings model.
     * @param {string} authorization - access token
     */
    ChangeSponsorSettings(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.SponsorSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorSecretsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets sponsor secrets.
     * @method
     * @name Sponsors#GetSponsorSecrets
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSponsorSecrets(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangeSponsorSecretsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.SponsorSecretsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that changes sponsor secrets.
     * @method
     * @name Sponsors#ChangeSponsorSecrets
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The sponsor secrets model.
     * @param {string} authorization - access token
     */
    ChangeSponsorSecrets(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.SponsorSecretsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetOrganizationsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves information about every organization within a sponsor.
     * @method
     * @name Sponsors#GetOrganizations
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetOrganizations(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.OrganizationCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates an Organization within a sponsor.
                    An Organization is meant to be any organizational unit,
                    like a physical location or region.
    * @method
    * @name Sponsors#CreateOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The organization creation model.
         * @param {string} authorization - access token
    */
    CreateOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.OrganizationCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves information about a single organization within a Sponsor.
     * @method
     * @name Sponsors#GetOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     */
    GetOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes an Organization within a sponsor.
     * @method
     * @name Sponsors#DeleteOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    DeleteOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetOrganizationBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves the branding information for an organization.
     * @method
     * @name Sponsors#GetOrganizationBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     */
    GetOrganizationBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.BrandingBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding for the organization.
     * @method
     * @name Sponsors#UpdateOrganizationBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The branding model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.BrandingBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteOrganizationBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes Organization level branding.
                    Branding describes how dynamic white labeling
                    functionality works at the organization level.
    * @method
    * @name Sponsors#DeleteOrganizationBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    DeleteOrganizationBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadOrganizationPhotoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates a photo for the organization.
     * @method
     * @name Sponsors#UploadOrganizationPhoto
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    UploadOrganizationPhoto(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteOrganizationPhotoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes the photo for an organization,
                    which is used an Organization identification pages.
    * @method
    * @name Sponsors#DeleteOrganizationPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    DeleteOrganizationPhoto(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves information about a sponsor.
                    Different role types may receive a more limited view of Sponsor information.
    * @method
    * @name Sponsors#GetSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes a Sponsor within a distributor - also all
                    care plans, patients, users, content and related data.
                    Cannot be reversed or recovered.
    * @method
    * @name Sponsors#DeleteSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor to be delete.
         * @param {string} authorization - access token
    */
    DeleteSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets the branding for the sponsor.
     * @method
     * @name Sponsors#GetSponsorBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     */
    GetSponsorBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateSponsorBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.BrandingBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding for the sponsor.
     * @method
     * @name Sponsors#UpdateSponsorBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The branding model.
     * @param {string} authorization - access token
     */
    UpdateSponsorBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.BrandingBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteSponsorBrandingURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes the branding for a Sponsor,
                    which causes the Sponsor and any Organizations that do not have
                    their own branding, to revert to default Patient IO branding.
    * @method
    * @name Sponsors#DeleteSponsorBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    DeleteSponsorBranding(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteSponsorSecretURL(parameters: {
        distributorId: string;
        sponsorId: string;
        secretKey: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Deletes a sponsor secret from the sponsor secrets object.
     * @method
     * @name Sponsors#DeleteSponsorSecret
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - the sponsor identifier.
     * @param {string} secretKey - The name of the secret to delete.
     * @param {string} authorization - access token
     */
    DeleteSponsorSecret(parameters: {
        distributorId: string;
        sponsorId: string;
        secretKey: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorAuthorizationCodesURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves all assigned authorization codes for a sponsor.
     * @method
     * @name Sponsors#GetSponsorAuthorizationCodes
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetSponsorAuthorizationCodes(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorCountsForDateRangeURL(parameters: {
        distributorId: string;
        sponsorId: string;
        fromDate: string;
        toDate: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets the counts for the sponsor for the specified date range.
     * @method
     * @name Sponsors#GetSponsorCountsForDateRange
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fromDate - From date.
     * @param {string} toDate - To date.
     * @param {string} authorization - access token
     */
    GetSponsorCountsForDateRange(parameters: {
        distributorId: string;
        sponsorId: string;
        fromDate: string;
        toDate: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorDataByNameURL(parameters: {
        distributorId: string;
        sponsorName: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves a limited subset of information about a sponsor,
                    given a sponsor name. Primarily omits sponsor tasks, care plans, organization
                    population count information.
    * @method
    * @name Sponsors#GetSponsorDataByName
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorName - Name of the sponsor.
    */
    GetSponsorDataByName(parameters: {
        distributorId: string;
        sponsorName: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorDataByRegistrationCodeURL(parameters: {
        distributorId: string;
        id: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets data for a sponsor, within a distributor, with a given registration
     * @method
     * @name Sponsors#GetSponsorDataByRegistrationCode
     * @param {string} distributorId - The distributor identifier.
     * @param {string} id - The identifier.
     */
    GetSponsorDataByRegistrationCode(parameters: {
        distributorId: string;
        id: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationAddressURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.AddressBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the organization address.
     * @method
     * @name Sponsors#UpdateOrganizationAddress
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The address model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationAddress(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.AddressBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationDescriptionURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.OrganizationDescriptionBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the name of the organization.
     * @method
     * @name Sponsors#UpdateOrganizationDescription
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The for updating the description.
     * @param {string} authorization - access token
     */
    UpdateOrganizationDescription(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.OrganizationDescriptionBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationDigitalContractURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.DigitalContactInformationBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the organization digital contact information for an organization.
     * @method
     * @name Sponsors#UpdateOrganizationDigitalContract
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The digital contact information model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationDigitalContract(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.DigitalContactInformationBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationNameURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.OrganizationNameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the name of an organization.
     * @method
     * @name Sponsors#UpdateOrganizationName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The organization name model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationName(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.OrganizationNameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateOrganizationPhoneNumberURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.TelephoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates an organization phone number.
     * @method
     * @name Sponsors#UpdateOrganizationPhoneNumber
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The telephone model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationPhoneNumber(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        model: Api.TelephoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadOrganizationBrandingLogoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding logo for the organization.
     * @method
     * @name Sponsors#UploadOrganizationBrandingLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    UploadOrganizationBrandingLogo(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadOrganizationBrandingEmailLogoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding email logo for the organization.
     * @method
     * @name Sponsors#UploadOrganizationBrandingEmailLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} authorization - access token
     */
    UploadOrganizationBrandingEmailLogo(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadSponsorBrandingLogoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding logo for a sponsor.
     * @method
     * @name Sponsors#UploadSponsorBrandingLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    UploadSponsorBrandingLogo(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadSponsorBrandingEmailLogoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * THis is a method that update the branding email logo for a sponsor.
     * @method
     * @name Sponsors#UploadSponsorBrandingEmailLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    UploadSponsorBrandingEmailLogo(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSignaledAlertsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        fromDate: string;
        toDate: string;
        activeOnly?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves signaled alerts for the provided sponsor across a date range.
     * @method
     * @name Sponsors#GetSignaledAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.
     * @param {string} authorization - access token
     */
    GetSignaledAlerts(parameters: {
        distributorId: string;
        sponsorId: string;
        fromDate: string;
        toDate: string;
        activeOnly?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    TestSmsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.PhoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This method sends a test SMS message to a specified number.  This exists
                    for the purpose of verifying that a sponsor has SMS configured properly.
    * @method
    * @name Sponsors#TestSms
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The PhoneBindingModel.
         * @param {string} authorization - access token
    */
    TestSms(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.PhoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
