import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class UserInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class UserInternal extends ApiClass {
    AddRolesToDistributorUserURL(parameters: {
        distributorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * The is a method that assigns roles to a distributor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#AddRolesToDistributorUser
         * @param {string} distributorId - The distributor id that owns the user.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - List of roles to assign.
         * @param {string} authorization - access token
    */
    AddRolesToDistributorUser(parameters: {
        distributorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteRolesFromDistributorUserURL(parameters: {
        distributorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that removes a distributor user from roles.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#DeleteRolesFromDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - List of roles to remove.
         * @param {string} authorization - access token
    */
    DeleteRolesFromDistributorUser(parameters: {
        distributorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddRolesToSponsorUserURL(parameters: {
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that assigns roles to a user scoped to a specific sponsor.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#AddRolesToSponsorUser
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - Lists of roles to assign.
         * @param {string} authorization - access token
    */
    AddRolesToSponsorUser(parameters: {
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteRolesFromSponsorUserURL(parameters: {
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes the roles from sponsor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name UserInternal#DeleteRolesFromSponsorUser
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - List of roles to delete.
         * @param {string} authorization - access token
    */
    DeleteRolesFromSponsorUser(parameters: {
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePasswordInternalURL(parameters: {
        userId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that changes the password for a user. This API relies
                    on the calling used being authorized in the system and knowing the existing password.
                    Higher privilege users may reset the password using this API without knowing the
                    existing password.
    * @method
    * @name UserInternal#ChangePasswordInternal
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - The model containing the current password as well as the new password.
         * @param {string} authorization - access token
    */
    ChangePasswordInternal(parameters: {
        userId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadDistributorUserPhotoURL(parameters: {
        distributorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates a photo for the given user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#UploadDistributorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    UploadDistributorUserPhoto(parameters: {
        distributorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteDistributorUserPhotoURL(parameters: {
        distributorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes a photo for a distributor user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#DeleteDistributorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    DeleteDistributorUserPhoto(parameters: {
        distributorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorUserURL(parameters: {
        distributorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a distributor user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#GetDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    GetDistributorUser(parameters: {
        distributorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateDistributorUserURL(parameters: {
        distributorId: string;
        userId: string;
        model: Api.UserUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates information for a distributor user.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name UserInternal#UpdateDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {} model - The user update model.
         * @param {string} authorization - access token
    */
    UpdateDistributorUser(parameters: {
        distributorId: string;
        userId: string;
        model: Api.UserUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorUserAsyncURL(parameters: {
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a sponsor user.
                    This method requires nurse level rights or higher.
    * @method
    * @name UserInternal#GetSponsorUserAsync
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The internal PatientIO user identifier.
         * @param {string} authorization - access token
    */
    GetSponsorUserAsync(parameters: {
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
