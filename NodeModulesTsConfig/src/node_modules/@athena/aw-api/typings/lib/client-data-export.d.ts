import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class ClientDataExport
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class ClientDataExport extends ApiClass {
    GetPatientsCarePlansURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves data describing the precise definition
                    of the care plan assigned to each patient within a sponsor.
    * @method
    * @name ClientDataExport#GetPatientsCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetPatientsCarePlans(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreatePatientTaskDataExtractURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.CreatePatientTaskDataExtractBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves all the ScheduledTasks assigned to
                    patients within a sponsor, along with the outcomes of those ScheduledTasks
                    covering a specific date range. If no dates are provided, the results will
                    cover the last 30 days.
    * @method
    * @name ClientDataExport#CreatePatientTaskDataExtract
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    CreatePatientTaskDataExtract(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.CreatePatientTaskDataExtractBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientsTaskCompletionURL(parameters: {
        distributorId: string;
        sponsorId: string;
        taskName: string;
        fromDate: string;
        toDate: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves the completion state of a specific task over a time range.
     * @method
     * @name ClientDataExport#GetPatientsTaskCompletion
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskName - The name of the task.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {string} authorization - access token
     */
    GetPatientsTaskCompletion(parameters: {
        distributorId: string;
        sponsorId: string;
        taskName: string;
        fromDate: string;
        toDate: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetActiveUsersInformationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves the list of users for a given distributor/sponsor.
     * @method
     * @name ClientDataExport#GetActiveUsersInformation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetActiveUsersInformation(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
