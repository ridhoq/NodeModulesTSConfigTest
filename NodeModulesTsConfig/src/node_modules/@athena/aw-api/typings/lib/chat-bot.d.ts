import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class ChatBot
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class ChatBot extends ApiClass {
    GetDistributorChatBotContextModelURL(parameters: {
        distributorId: string;
        chatBotContextId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves a Distributor's chat bot context.
     * @method
     * @name ChatBot#GetDistributorChatBotContextModel
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} authorization - access token
     */
    GetDistributorChatBotContextModel(parameters: {
        distributorId: string;
        chatBotContextId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorChatBotContextModelURL(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves a Sponsor's chat bot context.
     * @method
     * @name ChatBot#GetSponsorChatBotContextModel
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} authorization - access token
     */
    GetSponsorChatBotContextModel(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetAllSponsorChatBotContextModelsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Get all of the Chat Bot Contexts associated with a sponsor and distributor.
     * @method
     * @name ChatBot#GetAllSponsorChatBotContextModels
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetAllSponsorChatBotContextModels(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateDistributorBotAsyncURL(parameters: {
        distributorId: string;
        model: Api.ChatBotCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Create a distributor level bot.
     * @method
     * @name ChatBot#CreateDistributorBotAsync
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The create binding model for the bot.
     * @param {string} authorization - access token
     */
    CreateDistributorBotAsync(parameters: {
        distributorId: string;
        model: Api.ChatBotCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateChatBotDistributorContextURL(parameters: {
        distributorId: string;
        model: Api.ChatBotContextCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Creates a new Distributor Chat Bot context.
     * @method
     * @name ChatBot#CreateChatBotDistributorContext
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The chat bot context create binding model.
     * @param {string} authorization - access token
     */
    CreateChatBotDistributorContext(parameters: {
        distributorId: string;
        model: Api.ChatBotContextCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateChatBotSponsorContextURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ChatBotContextCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Creates a new Sponsor Chat Bot context.
     * @method
     * @name ChatBot#CreateChatBotSponsorContext
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The chat bot context create binding model.
     * @param {string} authorization - access token
     */
    CreateChatBotSponsorContext(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ChatBotContextCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddDistributorChatBotContextItemURL(parameters: {
        distributorId: string;
        chatBotContextId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Create a Distributor's chat bot context item.
     * @method
     * @name ChatBot#AddDistributorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    AddDistributorChatBotContextItem(parameters: {
        distributorId: string;
        chatBotContextId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddSponsorChatBotContextItemURL(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Create a Sponsor's chat bot context item.
     * @method
     * @name ChatBot#AddSponsorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    AddSponsorChatBotContextItem(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    SendChatBotResponseFeedbackURL(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        model: Api.ChatBotResponseFeedbackBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Provide feedback on a chat bot response
     * @method
     * @name ChatBot#SendChatBotResponseFeedback
     * @param {string} distributorId - The distributor identifier
     * @param {string} sponsorId - The sponsor identifier
     * @param {string} chatBotContextId - The chat bot context identifier
     * @param {string} chatBotContextItemId - The chat bot context item identifier
     * @param {} model - The chat bot response feedback model
     * @param {string} authorization - access token
     */
    SendChatBotResponseFeedback(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        model: Api.ChatBotResponseFeedbackBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateDistributorChatBotContextItemURL(parameters: {
        distributorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Edit a Distributor's chat bot context item.
     * @method
     * @name ChatBot#UpdateDistributorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UpdateDistributorChatBotContextItem(parameters: {
        distributorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteDistributorChatBotContextItemURL(parameters: {
        distributorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Delete a Distributor's chat bot context item.
     * @method
     * @name ChatBot#DeleteDistributorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {string} authorization - access token
     */
    DeleteDistributorChatBotContextItem(parameters: {
        distributorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateSponsorChatBotContextItemURL(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Edit a Sponsor's chat bot context item.
     * @method
     * @name ChatBot#UpdateSponsorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    UpdateSponsorChatBotContextItem(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        model: Api.ChatBotContextItemBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteSponsorChatBotContextItemURL(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Delete a Sponsor's chat bot context item.
     * @method
     * @name ChatBot#DeleteSponsorChatBotContextItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} chatBotContextId - The chatbot context identifier.
     * @param {string} chatBotContextItemId - The chatbot context item identifier.
     * @param {string} authorization - access token
     */
    DeleteSponsorChatBotContextItem(parameters: {
        distributorId: string;
        sponsorId: string;
        chatBotContextId: string;
        chatBotContextItemId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
