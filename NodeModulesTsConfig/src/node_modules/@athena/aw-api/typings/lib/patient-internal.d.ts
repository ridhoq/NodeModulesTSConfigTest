import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class PatientInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class PatientInternal extends ApiClass {
    ActivateWithSponsorNameURL(parameters: {
        sponsorName: string;
        model: Api.ActivatePatientDobSponsorPatientIdBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that activates a patient which is currently in inactive state.
     * @method
     * @name PatientInternal#ActivateWithSponsorName
     * @param {string} sponsorName - The sponsor identifier.
     * @param {} model - The model.
     */
    ActivateWithSponsorName(parameters: {
        sponsorName: string;
        model: Api.ActivatePatientDobSponsorPatientIdBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    IsPatientDeactivatedURL(parameters: {
        sponsorPatientId: string;
        dateOfBirth: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that determines whether the patient is deactivated.
     * @method
     * @name PatientInternal#IsPatientDeactivated
     * @param {string} sponsorPatientId - The sponsor patient identifier.
     * @param {string} dateOfBirth - The date of birth.
     */
    IsPatientDeactivated(parameters: {
        sponsorPatientId: string;
        dateOfBirth: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ActivateURL(parameters: {
        model: Api.ActivatePatientDobSponsorPatientIdBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that activates a patient which is currently in inactivate state.
     * @method
     * @name PatientInternal#Activate
     * @param {} model - The activate patient with date of birth and sponsor patient id model.
     */
    Activate(parameters: {
        model: Api.ActivatePatientDobSponsorPatientIdBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddCarePlansToPatientURL(parameters: {
        patientId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that associates a care plan to a patient. A patient can be associated
                    to multiple care plans. A care plan is not owned by a patient unless it is a "personal
                    care plan." A patient can have only one personal care plan at a time, and may not mix
                    a personal care plan with other population level care plans.
    * @method
    * @name PatientInternal#AddCarePlansToPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The list of care plans to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCarePlansToPatient(parameters: {
        patientId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddCategoriesToPatientURL(parameters: {
        patientId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds categories to the patient.
                    Categories are known as groups within the dashboard UI.
    * @method
    * @name PatientInternal#AddCategoriesToPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The categories to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCategoriesToPatient(parameters: {
        patientId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AffiliatePatientFromOrganizationURL(parameters: {
        patientId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that affiliates a patient to an organization or organizations.
     * @method
     * @name PatientInternal#AffiliatePatientFromOrganization
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {} model - The list of organization ids.
     * @param {string} authorization - access token
     */
    AffiliatePatientFromOrganization(parameters: {
        patientId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePasswordURL(parameters: {
        patientId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that allows a patient to change his password. This API relies
                    on the calling used being authorized in the system and knowing the existing password.
                    Higher privilege users may reset the password using this API without knowing the
                    existing password.
    * @method
    * @name PatientInternal#ChangePassword
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The old and new passwords.
         * @param {string} authorization - access token
    */
    ChangePassword(parameters: {
        patientId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePatientRoleInternalURL(parameters: {
        patientId: string;
        model: Api.PatientChangeRoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that changes patient's role.
     * @method
     * @name PatientInternal#ChangePatientRoleInternal
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {} model - The patient role change model.
     * @param {string} authorization - access token
     */
    ChangePatientRoleInternal(parameters: {
        patientId: string;
        model: Api.PatientChangeRoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddRolesURL(parameters: {
        patientId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Adds roles to a patient.
     * @method
     * @name PatientInternal#AddRoles
     * @param {string} patientId - The patient identifier.
     * @param {} model - The roles to add.
     * @param {string} authorization - access token
     */
    AddRoles(parameters: {
        patientId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePatientSettingsInternalURL(parameters: {
        patientId: string;
        model: Api.PatientSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that changes patient settings.
     * @method
     * @name PatientInternal#ChangePatientSettingsInternal
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    ChangePatientSettingsInternal(parameters: {
        patientId: string;
        model: Api.PatientSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ClearPatientAlertsURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that clears all active alerts on the patient.
     * @method
     * @name PatientInternal#ClearPatientAlerts
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    ClearPatientAlerts(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadPhotoURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds or updates a photo for the patient.
                    This endpoint requires use of mime multipart content, not json.
    * @method
    * @name PatientInternal#UploadPhoto
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} authorization - access token
    */
    UploadPhoto(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeletePhotoURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes a patient's profile photo.
     * @method
     * @name PatientInternal#DeletePhoto
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    DeletePhoto(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetCompletedTaskReadModelsURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves tasks a patient has completed.
     * @method
     * @name PatientInternal#GetCompletedTaskReadModels
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    GetCompletedTaskReadModels(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetTaskOutcomesOverTimeURL(parameters: {
        patientId: string;
        taskId: string;
        startDate: string;
        endDate: string;
        intervalType: "Day" | "Month";
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves the patients task outcomes over time.
     * @method
     * @name PatientInternal#GetTaskOutcomesOverTime
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} taskId - The task identifier.
     * @param {string} startDate - yyyy-MM-dd
     * @param {string} endDate - yyyy-MM-dd
     * @param {string} intervalType - The period of time the results should be grouped by.
     * @param {string} authorization - access token
     */
    GetTaskOutcomesOverTime(parameters: {
        patientId: string;
        taskId: string;
        startDate: string;
        endDate: string;
        intervalType: "Day" | "Month";
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    PushScheduleUpdateURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that pushes a schedule update to the patient immediately.
                    This call is used if a patient's care plan(s) has changed, and we want to
                    update today's tasks right away rather than leaving them stable according
                    to the previous care plan assignments.
    * @method
    * @name PatientInternal#PushScheduleUpdate
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} authorization - access token
    */
    PushScheduleUpdate(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ReplacePatientCarePlanURL(parameters: {
        patientId: string;
        carePlanId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates a patient's care plan to another care plan.
                    That is, swap one care plan for another. This method works on Personal and Population
                    Care Plans, but not on Patient care plans, which cannot be removed.
    * @method
    * @name PatientInternal#ReplacePatientCarePlan
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The list of care plan ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCarePlan(parameters: {
        patientId: string;
        carePlanId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveCarePlanFromPatientURL(parameters: {
        patientId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that removes a population or personal care plan from a patient.
                    This method does not operate on Patient care plans.
    * @method
    * @name PatientInternal#RemoveCarePlanFromPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {string} authorization - access token
    */
    RemoveCarePlanFromPatient(parameters: {
        patientId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ReplacePatientCategoryURL(parameters: {
        patientId: string;
        categoryId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates a patient's category to another category.
                    That is, swap one category for another.
    * @method
    * @name PatientInternal#ReplacePatientCategory
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} categoryId - The category identifier.
         * @param {} model - The list of category ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCategory(parameters: {
        patientId: string;
        categoryId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveCategoryFromPatientURL(parameters: {
        patientId: string;
        categoryId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that removes a category from a patient.
     * @method
     * @name PatientInternal#RemoveCategoryFromPatient
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} categoryId - The category identifier.
     * @param {string} authorization - access token
     */
    RemoveCategoryFromPatient(parameters: {
        patientId: string;
        categoryId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UnaffiliatePatientFromOrganizationURL(parameters: {
        patientId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that unaffiliates a patient from an organization.
     * @method
     * @name PatientInternal#UnaffiliatePatientFromOrganization
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} organizationId - The organization which should be removed from the patient.
     * @param {string} authorization - access token
     */
    UnaffiliatePatientFromOrganization(parameters: {
        patientId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSignaledAlertsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        fromDate: string;
        toDate: string;
        activeOnly?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves signaled alerts for the provided sponsor across a date range.
     * @method
     * @name PatientInternal#GetSignaledAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.
     * @param {string} authorization - access token
     */
    GetSignaledAlerts(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        fromDate: string;
        toDate: string;
        activeOnly?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves patient data.
                    The data is constrained by caller access permissions.
    * @method
    * @name PatientInternal#GetPatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {string} authorization - access token
    */
    GetPatient(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientURL(parameters: {
        patientId: string;
        model: Api.PatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates the patient's information.
                    If user name and email address are to be changed: set NewUserName,
                    leaving UserName as the original user name.
    * @method
    * @name PatientInternal#UpdatePatient
         * @param {string} patientId - The internal Patient IO patient identifier.
         * @param {} model - The patient update model.
         * @param {string} authorization - access token
    */
    UpdatePatient(parameters: {
        patientId: string;
        model: Api.PatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeletePatientURL(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that permanently and finally deletes a patient record.
     * @method
     * @name PatientInternal#DeletePatient
     * @param {string} patientId - The internal Patient IO patient identifier.
     * @param {string} authorization - access token
     */
    DeletePatient(parameters: {
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    BulkPatientUpdateURL(parameters: {
        model: Api.InternalBulkPatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * Allows a care team member to bulk manage patients.
                    The user can specify a collection of patients by ID to be managed.
                    Supported operations include adding/removing the care plans, adding/removing
                    the categories, and changing the organization of each patient in the collection.
    * @method
    * @name PatientInternal#BulkPatientUpdate
         * @param {} model - The bulk patient update model
         * @param {string} authorization - access token
    */
    BulkPatientUpdate(parameters: {
        model: Api.InternalBulkPatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
