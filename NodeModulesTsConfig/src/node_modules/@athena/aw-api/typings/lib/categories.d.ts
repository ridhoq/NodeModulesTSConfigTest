import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class Categories
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Categories extends ApiClass {
    GetCategoriesForDistributorURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets all of the categories within a distributor.
     * @method
     * @name Categories#GetCategoriesForDistributor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    GetCategoriesForDistributor(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateCategoryForDistributorURL(parameters: {
        distributorId: string;
        categoryModel: Api.CategoryBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates a Category for a distributor.
                    Categories can be created at the Distributor level and shared
                    to Sponsors within that Distributor.
    * @method
    * @name Categories#CreateCategoryForDistributor
         * @param {string} distributorId - The distributor identifier.
         * @param {} categoryModel - Category to be created.
         * @param {string} authorization - access token
    */
    CreateCategoryForDistributor(parameters: {
        distributorId: string;
        categoryModel: Api.CategoryBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RenameDistributorCategoryURL(parameters: {
        distributorId: string;
        categoryId: string;
        nameModel: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that renames a distributor category.
     * @method
     * @name Categories#RenameDistributorCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} categoryId - The category identifier.
     * @param {} nameModel - The name binding model.
     * @param {string} authorization - access token
     */
    RenameDistributorCategory(parameters: {
        distributorId: string;
        categoryId: string;
        nameModel: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetCategoriesForSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets all of the categories within a sponsor.
     * @method
     * @name Categories#GetCategoriesForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetCategoriesForSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateCategoryForSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        categoryModel: Api.CategoryBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that creates a category with a sponsor.
     * @method
     * @name Categories#CreateCategoryForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} categoryModel - Category to be created.
     * @param {string} authorization - access token
     */
    CreateCategoryForSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        categoryModel: Api.CategoryBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RenameCategoryURL(parameters: {
        distributorId: string;
        sponsorId: string;
        categoryId: string;
        categoryName: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that renames a category within a sponsor.
     * @method
     * @name Categories#RenameCategory
     * @param {string} distributorId - The distributor Id.
     * @param {string} sponsorId - The sponsor Id.
     * @param {string} categoryId - The category Id.
     * @param {} categoryName - The categoryName
     * @param {string} authorization - access token
     */
    RenameCategory(parameters: {
        distributorId: string;
        sponsorId: string;
        categoryId: string;
        categoryName: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
