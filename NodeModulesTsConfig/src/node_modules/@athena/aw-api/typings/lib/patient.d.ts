import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class Patient
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Patient extends ApiClass {
    IsPatientDeactivatedURL(parameters: {
        distributorId: string;
        sponsorId: string;
        sponsorPatientId: string;
        dateOfBirth: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that determines whether the patient is deactivated.
     * @method
     * @name Patient#IsPatientDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} sponsorPatientId - The sponsor patient identifier.
     * @param {string} dateOfBirth - The date of birth.
     */
    IsPatientDeactivated(parameters: {
        distributorId: string;
        sponsorId: string;
        sponsorPatientId: string;
        dateOfBirth: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ActivateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ActivatePatientDobSponsorPatientIdBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that activates a patient which is currently in inactive state.
     * @method
     * @name Patient#Activate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The activate patient with date of birth and sponsor patient id model.
     */
    Activate(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ActivatePatientDobSponsorPatientIdBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientCarePlansURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves all care plans to which a patient has access
     * @method
     * @name Patient#GetPatientCarePlans
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetPatientCarePlans(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddCarePlansToPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.SponsorIdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that associates a care plan to a patient. A patient can be
                    associated to multiple care plans. A care plan is not owned by a patient
                    unless it is a "personal care plan." A patient can have only one personal
                    care plan per sponsor.
    * @method
    * @name Patient#AddCarePlansToPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The list of care plans to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCarePlansToPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.SponsorIdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CloneCarePlanToPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.CloneCarePlanToPatientBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that clones a care plan to a patient, creating a personal care plan for that patient.
                    The personal care plan will be an exact copy of the cloned care plan.
    * @method
    * @name Patient#CloneCarePlanToPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - Identifies the care plan to be cloned to the patient and how the operation should occur.
         * @param {string} authorization - access token
    */
    CloneCarePlanToPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.CloneCarePlanToPatientBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddCategoriesToPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds categories to the patient.
                    Categories are known as groups within the dashboard UI.
    * @method
    * @name Patient#AddCategoriesToPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The categories to assign to the patient.
         * @param {string} authorization - access token
    */
    AddCategoriesToPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AffiliatePatientFromOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that affiliates a patient to an organization or
                    multiple organizations.
    * @method
    * @name Patient#AffiliatePatientFromOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The list of organization ids to assign.
         * @param {string} authorization - access token
    */
    AffiliatePatientFromOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ArchivePatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that archives a patient record, putting it into a state where it
                    cannot be authenticated modified or accessed. This takes place in the context of
                    a sponsor, so the patient may be active in other sponsors. Patient's cannot be
                    archived while they are associated with population level care plans for the sponsor.
    * @method
    * @name Patient#ArchivePatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    ArchivePatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetBroadcastToPatientsShortCodesURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets the list of broadcast to patients short codes.
     * @method
     * @name Patient#GetBroadcastToPatientsShortCodes
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetBroadcastToPatientsShortCodes(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    BroadcastToPatientsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.PatientBroadcastModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that broadcasts a message to a list of patients through
                    either push, email, or sms.
    * @method
    * @name Patient#BroadcastToPatients
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The patient broadcast model.
         * @param {string} authorization - access token
    */
    BroadcastToPatients(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.PatientBroadcastModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    BulkUpdateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.SponsorEntityIdBulkPatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that allows a care team member to bulk manage patients.
                    The user can specify a collection of patients by ID to be managed.
                    Supported operations include adding/removing the care plans, adding/removing
                    the categories, and changing the organization of each patient in the collection.
    * @method
    * @name Patient#BulkUpdate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The bulk patient update model.
         * @param {string} authorization - access token
    */
    BulkUpdate(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.SponsorEntityIdBulkPatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePasswordURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that allows a patient to change his password.
                    This API relies on the call used being authorized in the system
                    and knowing the existing password. Higher privilege users may
                    reset the password using this API without knowing the
                    existing password.
    * @method
    * @name Patient#ChangePassword
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
                    This must match authenticated user, except for those with higher
                    privilege levels than the patient.
         * @param {} model - The old and new passwords.
         * @param {string} authorization - access token
    */
    ChangePassword(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePatientRoleURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.PatientChangeRoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that changes a patient's role.
     * @method
     * @name Patient#ChangePatientRole
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient change model.
     * @param {string} authorization - access token
     */
    ChangePatientRole(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.PatientChangeRoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePatientSettingsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.PatientSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that changes a patient's settings.
     * @method
     * @name Patient#ChangePatientSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient settings model.
     * @param {string} authorization - access token
     */
    ChangePatientSettings(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.PatientSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ClearPatientAlertsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that clears all active alerts on the patient.
     * @method
     * @name Patient#ClearPatientAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    ClearPatientAlerts(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientsForSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        includeShareCare?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a list of all patients for a particular sponsor.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name Patient#GetPatientsForSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
         * @param {string} authorization - access token
    */
    GetPatientsForSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        includeShareCare?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreatePatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.PatientCreateBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that creates a new patient record using an authorization code.
     * @method
     * @name Patient#CreatePatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The model describing the patient record to be created.
     */
    CreatePatient(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.PatientCreateBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreatePatientCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * Create a Patient care plan for a patient. Only a patient can
                create a Patient care plan.
    * @method
    * @name Patient#CreatePatientCarePlan
         * @param {string} distributorId -
         * @param {string} sponsorId -
         * @param {string} patientId -
         * @param {string} authorization - access token
    */
    CreatePatientCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreatePatientInFilamentDistributorURL(parameters: {
        model: Api.PatientCreateBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates a new patient record within the filament distributor
                    using an authorization code.
    * @method
    * @name Patient#CreatePatientInFilamentDistributor
         * @param {} model - The model describing the patient record to be created.
    */
    CreatePatientInFilamentDistributor(parameters: {
        model: Api.PatientCreateBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreatePersonalCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.AddPersonalCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that creates a personal care plan, which will initially have no content.
     * @method
     * @name Patient#CreatePersonalCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The model describing the personal care plan.
     * @param {string} authorization - access token
     */
    CreatePersonalCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.AddPersonalCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeactivateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deactivates a patient. Deactivating a patient puts them into a state
                    where the patient cannot login unless the patient is activated by supplying
                    secret properties, by default the SponsorPatientId and patient's recorded date of birth.
    * @method
    * @name Patient#Deactivate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    Deactivate(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ReactivateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that reactivates a patient.
     * @method
     * @name Patient#Reactivate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    Reactivate(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves patient data.
                    The data is constrained by caller access permissions.
    * @method
    * @name Patient#GetPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    GetPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.PatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates the patient's information. If user name and email
                    address are to be changed, set NewUserName, leaving UserName as the original user name.
    * @method
    * @name Patient#UpdatePatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The patient update model.
         * @param {string} authorization - access token
    */
    UpdatePatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.PatientUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeletePatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that permanently and finally deletes a patient record.
     * @method
     * @name Patient#DeletePatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    DeletePatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadPhotoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds or updates a photo for the patient.
                    This endpoint requires use of mime multipart content, not json.
    * @method
    * @name Patient#UploadPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    UploadPhoto(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeletePhotoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes a patient's profile photo.
     * @method
     * @name Patient#DeletePhoto
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    DeletePhoto(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetAlertedPatientsForOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a list of all alerted patients for a particular organization.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name Patient#GetAlertedPatientsForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    GetAlertedPatientsForOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetAlertedPatientsForSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a list of all alerted patients for a particular sponsor.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name Patient#GetAlertedPatientsForSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetAlertedPatientsForSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetArchivedPatientsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a list of all archived patients for a particular sponsor.
                    Archived patients may still be active for other sponsors, but are inactive for this sponsor.
    * @method
    * @name Patient#GetArchivedPatients
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetArchivedPatients(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetCompletedTaskReadModelsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves tasks a patient has completed.
     * @method
     * @name Patient#GetCompletedTaskReadModels
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetCompletedTaskReadModels(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientSchedulableTasksURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method to retrives tasks that a patient may assign.
     * @method
     * @name Patient#GetPatientSchedulableTasks
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifer.
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    GetPatientSchedulableTasks(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetPatientsForOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a list of all patients for a particular sponsor that are
                    associated to a particular organization id.
    * @method
    * @name Patient#GetPatientsForOrganization
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} authorization - access token
    */
    GetPatientsForOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetTaskOutcomesOverTimeURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        taskId: string;
        startDate: string;
        endDate: string;
        intervalType: "Day" | "Month";
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves the patient's task outcomes over time.
     * @method
     * @name Patient#GetTaskOutcomesOverTime
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskId - The task identifier.
     * @param {string} startDate - The yyyy-MM-dd format for the start date.
     * @param {string} endDate - The yyyy-MM-dd format for the end date.
     * @param {string} intervalType - The period of time the results should be grouped by.
     * @param {string} authorization - access token
     */
    GetTaskOutcomesOverTime(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        taskId: string;
        startDate: string;
        endDate: string;
        intervalType: "Day" | "Month";
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    PushScheduleUpdateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that pushes a schedule update to the patient immediately.
                    This call is used if a patient's care plan(s) has changed, and we want to update
                    today's tasks right away rather than leaving them stable according to the
                    previous care plan assignments.
    * @method
    * @name Patient#PushScheduleUpdate
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    PushScheduleUpdate(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ReplacePatientCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        carePlanId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates a patient's care plan to another care plan.
                    That is, swap one care plan for another. This method does not operate on Patient care plans.
    * @method
    * @name Patient#ReplacePatientCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The list of care plan ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        carePlanId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveCarePlanFromPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that removes a population or personal care plan from a patient.
     * @method
     * @name Patient#RemoveCarePlanFromPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    RemoveCarePlanFromPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ReplacePatientCategoryURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        categoryId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates a patient's category to another category.
                    That is, swap one category for another.
    * @method
    * @name Patient#ReplacePatientCategory
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} categoryId - The category identifier.
         * @param {} model - The list of category ids to swap in.
         * @param {string} authorization - access token
    */
    ReplacePatientCategory(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        categoryId: string;
        model: Api.IdBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveCategoryFromPatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        categoryId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that removes a category from a patient.
     * @method
     * @name Patient#RemoveCategoryFromPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} categoryId - The category identifier.
     * @param {string} authorization - access token
     */
    RemoveCategoryFromPatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        categoryId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UnaffiliatePatientFromOrganizationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that unaffiliates a patient from an organization.
     * @method
     * @name Patient#UnaffiliatePatientFromOrganization
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} organizationId - The organization which should be removed from the patient.
     * @param {string} authorization - access token
     */
    UnaffiliatePatientFromOrganization(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        organizationId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UnarchivePatientURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that removes a patient from archived state and makes them available for normal operations.
     * @method
     * @name Patient#UnarchivePatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    UnarchivePatient(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientFullNameURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        fullName: Api.FullNameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Update the patient's name.
     * @method
     * @name Patient#UpdatePatientFullName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} fullName - The patient full name model.
     * @param {string} authorization - access token
     */
    UpdatePatientFullName(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        fullName: Api.FullNameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientAddressURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.AddressBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Update the patient's address.
     * @method
     * @name Patient#UpdatePatientAddress
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient address binding model.
     * @param {string} authorization - access token
     */
    UpdatePatientAddress(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.AddressBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdatePatientTimeZoneURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.TimeZoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Update the patient's time zone.
     * @method
     * @name Patient#UpdatePatientTimeZone
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The patient time zone binding model.
     * @param {string} authorization - access token
     */
    UpdatePatientTimeZone(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        model: Api.TimeZoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSignaledAlertsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        fromDate: string;
        toDate: string;
        activeOnly?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Retrieves signaled alerts for the provided sponsor across a date range.
     * @method
     * @name Patient#GetSignaledAlerts
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {boolean} activeOnly - True if only active alerts should be returned.  False if all alerts should be returned.
     * @param {string} authorization - access token
     */
    GetSignaledAlerts(parameters: {
        distributorId: string;
        sponsorId: string;
        patientId: string;
        fromDate: string;
        toDate: string;
        activeOnly?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
