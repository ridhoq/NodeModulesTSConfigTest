import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class CarePlans
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class CarePlans extends ApiClass {
    AddCategoriesToCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        categoryIdList: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds categories to a care plan.
                    Within the dashboard UI, categories are referred to as "Groups".
                    Categories are most frequently used to describe groups of patients.
    * @method
    * @name CarePlans#AddCategoriesToCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} categoryIdList - List of category ids to add.
         * @param {string} authorization - access token
    */
    AddCategoriesToCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        categoryIdList: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveCategoriesFromCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that removes categories from a care plan. Categories are referred to as groups within
                    the UI of Patient IO applications.
    * @method
    * @name CarePlans#RemoveCategoriesFromCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - List of category ids to remove
         * @param {string} authorization - access token
    */
    RemoveCategoriesFromCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AddCategoriesToDistributorCarePlanURL(parameters: {
        distributorId: string;
        carePlanId: string;
        categoryIdList: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that adds categories to a distributor care plan.
                    Within the dashboard UI, categories are referred to as "Groups".
                    Categories are most frequently used to describe groups of patients.
    * @method
    * @name CarePlans#AddCategoriesToDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} categoryIdList - List of category ids to add.
         * @param {string} authorization - access token
    */
    AddCategoriesToDistributorCarePlan(parameters: {
        distributorId: string;
        carePlanId: string;
        categoryIdList: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveCategoriesFromDistributorCarePlanURL(parameters: {
        distributorId: string;
        carePlanId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Remove categories fom a distributor care plan
     * @method
     * @name CarePlans#RemoveCategoriesFromDistributorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {} model - The list of category Ids.
     * @param {string} authorization - access token
     */
    RemoveCategoriesFromDistributorCarePlan(parameters: {
        distributorId: string;
        carePlanId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ApplyCarePlanSponsorCarePlanIdURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.ValueBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that applies a sponsor assigned id to a care plan.
                    This is an arbitrary string referred to as the SponsorCarePlanId.
    * @method
    * @name CarePlans#ApplyCarePlanSponsorCarePlanId
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The SponsorCarePlanId
         * @param {string} authorization - access token
    */
    ApplyCarePlanSponsorCarePlanId(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.ValueBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves data about a care plan.
     * @method
     * @name CarePlans#GetSponsorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetSponsorCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CloneCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        carePlanCloneModel: Api.CloneCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that clones a care plan within a sponsor.
                    This action creates a new and independent clone of the care plan.
                    The name, categories and plan types of the care plan can be changed.
    * @method
    * @name CarePlans#CloneCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} carePlanCloneModel - Model describing new care plan name, CategoryId, PlanTypeId.
         * @param {string} authorization - access token
    */
    CloneCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        carePlanCloneModel: Api.CloneCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ArchiveCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that archives a care plan.
                    Archiving a care plan makes it inaccessible for new assignments
                    to patients or changes to the care plan. A care plan to which
                    patients are currently assigned cannot be archived.
                    Archived care plans can be un-archived.
                    Personal care plans cannot be archived.
    * @method
    * @name CarePlans#ArchiveCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan definition.
         * @param {string} authorization - access token
    */
    ArchiveCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorCarePlanURL(parameters: {
        distributorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves data about a care plan.
     * @method
     * @name CarePlans#GetDistributorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} authorization - access token
     */
    GetDistributorCarePlan(parameters: {
        distributorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CloneDistributorCarePlanURL(parameters: {
        distributorId: string;
        carePlanId: string;
        carePlanCloneModel: Api.CloneCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that clones a care plan within a sponsor.
                    This action creates a new and independent clone of the care plan.
                    The name, categories and plan types of the care plan can be changed.
    * @method
    * @name CarePlans#CloneDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} carePlanCloneModel - Model describing new care plan name, CategoryId, PlanTypeId.
         * @param {string} authorization - access token
    */
    CloneDistributorCarePlan(parameters: {
        distributorId: string;
        carePlanId: string;
        carePlanCloneModel: Api.CloneCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ArchiveDistributorCarePlanURL(parameters: {
        distributorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that archives a care plan.
                    Archiving a care plan makes it inaccessible for new assignments
                    to patients or changes to the care plan. A care plan to which
                    patients are currently assigned cannot be archived.
    * @method
    * @name CarePlans#ArchiveDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan definition.
         * @param {string} authorization - access token
    */
    ArchiveDistributorCarePlan(parameters: {
        distributorId: string;
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetCarePlansURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves a sponsor's care plans. The return set is
                limited; it does not retrieve all the of the information about a care plan
                 because sponsors may have a large number of care plans.
    * @method
    * @name CarePlans#GetCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    GetCarePlans(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlan: Api.CarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates a new sponsor population care plan.
                    Care plans are always created and "owned" in the context of a sponsor.
    * @method
    * @name CarePlans#CreateCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} carePlan - The care plan definition.
         * @param {string} authorization - access token
    */
    CreateCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlan: Api.CarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorCarePlansURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that retrieves a distributor's care plans. The return set is
                limited; it does not retrieve all the of the information about a care plan
                 because distributors may have a large number of care plans.
    * @method
    * @name CarePlans#GetDistributorCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    GetDistributorCarePlans(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateDistributorCarePlanURL(parameters: {
        distributorId: string;
        model: Api.CreateCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates a new distributor population care plan.
                    Care plans are always created and "owned" in the context of a sponsor.
    * @method
    * @name CarePlans#CreateDistributorCarePlan
         * @param {string} distributorId - The distributor identifier.
         * @param {} model - The care plan definition.
         * @param {string} authorization - access token
    */
    CreateDistributorCarePlan(parameters: {
        distributorId: string;
        model: Api.CreateCarePlanBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RenameDistributorCarePlanURL(parameters: {
        distributorId: string;
        carePlanId: string;
        model: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This method renames a dstributor care plan.
     * @method
     * @name CarePlans#RenameDistributorCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameDistributorCarePlan(parameters: {
        distributorId: string;
        carePlanId: string;
        model: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetCarePlanURL(parameters: {
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves data about a care plan.
     * @method
     * @name CarePlans#GetCarePlan
     * @param {string} carePlanId - The internal care plan identifier.
     * @param {string} authorization - access token
     */
    GetCarePlan(parameters: {
        carePlanId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetCarePlanForDateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        dayOfCare: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves data about a Care Plan for a specific day.
     * @method
     * @name CarePlans#GetCarePlanForDate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} dayOfCare - The day of care in the format yyyy-MM-dd
     * @param {string} authorization - access token
     */
    GetCarePlanForDate(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        dayOfCare: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RecordSupervisorApprovalURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.SignatureBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that records the signature of a supervisor, indicating that revisions to a care plan have
                    been reviewed and approved.
    * @method
    * @name CarePlans#RecordSupervisorApproval
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The signature model.
         * @param {string} authorization - access token
    */
    RecordSupervisorApproval(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.SignatureBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RenameCarePlanURL(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that renames a care plan.
     * @method
     * @name CarePlans#RenameCarePlan
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The name model.
     * @param {string} authorization - access token
     */
    RenameCarePlan(parameters: {
        distributorId: string;
        sponsorId: string;
        carePlanId: string;
        model: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
