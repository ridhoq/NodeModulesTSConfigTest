import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class Distributors
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Distributors extends ApiClass {
    ChangeDistributorSettingsURL(parameters: {
        distributorId: string;
        model: Api.DistributorSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that sets the settings for a distributor.
     * @method
     * @name Distributors#ChangeDistributorSettings
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    ChangeDistributorSettings(parameters: {
        distributorId: string;
        model: Api.DistributorSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateAuthorizationCodeURL(parameters: {
        distributorId: string;
        authCodeModel: Api.AuthorizationCodeBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates an authorization code. An authorization code can be used to allow a Patient
                    to self-register with Patient IO in connection with a sponsor.
    * @method
    * @name Distributors#CreateAuthorizationCode
         * @param {string} distributorId - The distributor identifier.
         * @param {} authCodeModel - Describes the sponsor and the authorization code.
         * @param {string} authorization - access token
    */
    CreateAuthorizationCode(parameters: {
        distributorId: string;
        authCodeModel: Api.AuthorizationCodeBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteAuthorizationCodeURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorizationCode: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that removes an authorization code.
     * @method
     * @name Distributors#DeleteAuthorizationCode
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorizationCode - The authorization code to remove.
     * @param {string} authorization - access token
     */
    DeleteAuthorizationCode(parameters: {
        distributorId: string;
        sponsorId: string;
        authorizationCode: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateDistributorURL(parameters: {
        distributorModel: Api.DistributorBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that creates the distributor.
     * @method
     * @name Distributors#CreateDistributor
     * @param {} distributorModel - Distributor to be created
     * @param {string} authorization - access token
     */
    CreateDistributor(parameters: {
        distributorModel: Api.DistributorBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorsForDistributorURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that retrieves a list of sponsors within a distributor.
     * @method
     * @name Distributors#GetSponsorsForDistributor
     * @param {string} distributorId - The distributor id.
     * @param {string} authorization - access token
     */
    GetSponsorsForDistributor(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateSponsorURL(parameters: {
        distributorId: string;
        sponsorModel: Api.SponsorBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that creates a Sponsor within a distributor.
     * @method
     * @name Distributors#CreateSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {} sponsorModel - The sponsor to be created.
     * @param {string} authorization - access token
     */
    CreateSponsor(parameters: {
        distributorId: string;
        sponsorModel: Api.SponsorBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorBrandingURL(parameters: {
        distributorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets the branding for the sponsor.
     * @method
     * @name Distributors#GetDistributorBranding
     * @param {string} distributorId - The distributor identifier.
     */
    GetDistributorBranding(parameters: {
        distributorId: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateDistributorBrandingURL(parameters: {
        distributorId: string;
        model: Api.BrandingBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates branding within a distributor.
     * @method
     * @name Distributors#UpdateDistributorBranding
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The sponsor to be created.
     * @param {string} authorization - access token
     */
    UpdateDistributorBranding(parameters: {
        distributorId: string;
        model: Api.BrandingBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteDistributorBrandingURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes Distributor level branding.
                    Branding describes how dynamic white labeling
                    functionality works at the distributor level.
    * @method
    * @name Distributors#DeleteDistributorBranding
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    DeleteDistributorBranding(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets information about a Distributor -
                    all the sponsors, categories and other items.
    * @method
    * @name Distributors#GetDistributor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    GetDistributor(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RenameSponsorURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gives a new name to a sponsor within a distributor.
     * @method
     * @name Distributors#RenameSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    RenameSponsor(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.NameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadDistributorBrandingEmailLogoURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding email logo for the distributor.
     * @method
     * @name Distributors#UploadDistributorBrandingEmailLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    UploadDistributorBrandingEmailLogo(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadDistributorBrandingLogoURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that updates the branding logo for the distributor.
     * @method
     * @name Distributors#UploadDistributorBrandingLogo
     * @param {string} distributorId - The distributor identifier.
     * @param {string} authorization - access token
     */
    UploadDistributorBrandingLogo(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
