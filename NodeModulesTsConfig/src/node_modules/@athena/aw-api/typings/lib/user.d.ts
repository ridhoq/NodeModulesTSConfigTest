import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class User
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class User extends ApiClass {
    AddRolesToSponsorUserURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that assigns roles to a user scoped to a specific sponsor.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#AddRolesToSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - List of roles to assign.
         * @param {string} authorization - access token
    */
    AddRolesToSponsorUser(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteRolesFromSponsorUserURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes the roles from a sponsor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#DeleteRolesFromSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - List of roles to remove.
         * @param {string} authorization - access token
    */
    DeleteRolesFromSponsorUser(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.RoleBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AffiliateUserToOrganizationsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that affiliates a user to organizations.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#AffiliateUserToOrganizations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The list of organization ids to assign.
         * @param {string} authorization - access token
    */
    AffiliateUserToOrganizations(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    RemoveUserAffiliationToOrganizationsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that removes a user's affiliation to organizations.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#RemoveUserAffiliationToOrganizations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The organization(s) to disaffiliate  from a user.
         * @param {string} authorization - access token
    */
    RemoveUserAffiliationToOrganizations(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.IdListBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ArchiveSponsorUserURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that archives the specified sponsor user.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#ArchiveSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    ArchiveSponsorUser(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangePasswordURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that changes the password for a user. This API relies
                    on the call used being authorized in the system and knowing the existing password.
                    Higher privilege users may reset the password using this API without knowing the
                    existing password.
    * @method
    * @name User#ChangePassword
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The change password binding model which contains the current password and the new one.
         * @param {string} authorization - access token
    */
    ChangePassword(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.ChangePasswordBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ChangeSponsorUserSettingsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.UserSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that changes the settings of a sponsor user.
                    This method requires the call to the user or sponsor admin level.
    * @method
    * @name User#ChangeSponsorUserSettings
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The user settings model.
         * @param {string} authorization - access token
    */
    ChangeSponsorUserSettings(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.UserSettingsBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetDistributorUserListURL(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a list of distributor users.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name User#GetDistributorUserList
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorization - access token
    */
    GetDistributorUserList(parameters: {
        distributorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateDistributorUserURL(parameters: {
        distributorId: string;
        model: Api.UserCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates a new user record within a distributor.
                    This method requires distributor admin level rights or higher.
    * @method
    * @name User#CreateDistributorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {} model - The user creatioin model.
         * @param {string} authorization - access token
    */
    CreateDistributorUser(parameters: {
        distributorId: string;
        model: Api.UserCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorUserListURL(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId?: Array<string> | string;
        archived?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * Gets the sponsor user list for each the current user.
                    Depending on their role, they will see different users.
    * @method
    * @name User#GetSponsorUserList
         * @param {string} distributorId - The distributor identifier
         * @param {string} sponsorId - The sponsor identifier.
         * @param {array} organizationId - The optional organization identifier array.
         * @param {boolean} archived - The optional archive flag.
         * @param {string} authorization - access token
    */
    GetSponsorUserList(parameters: {
        distributorId: string;
        sponsorId: string;
        organizationId?: Array<string> | string;
        archived?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateSponsorUserURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.UserCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that creates a new user record within a sponsor.
                    This method requires care plan manager level rights or higher.
    * @method
    * @name User#CreateSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The user creation model.
         * @param {string} authorization - access token
    */
    CreateSponsorUser(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.UserCreateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UploadSponsorUserPhotoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates a photo for the user.
                    This method requires nurse level rights or higher.
    * @method
    * @name User#UploadSponsorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    UploadSponsorUserPhoto(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteSponsorUserPhotoURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that deletes a photo for a user.
                    This method requires the call to be the user or a sponsor admin.
    * @method
    * @name User#DeleteSponsorUserPhoto
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    DeleteSponsorUserPhoto(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorUserAsyncURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets a sponsor user.
                    This method requires nurse level rights or higher.
    * @method
    * @name User#GetSponsorUserAsync
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    GetSponsorUserAsync(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateSponsorUserURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.UserUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that updates information for a sponsor user.
                    This method requires nurse level rights or higher.
    * @method
    * @name User#UpdateSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {} model - The user update model.
         * @param {string} authorization - access token
    */
    UpdateSponsorUser(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.UserUpdateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetSponsorUserListWithoutDistributorURL(parameters: {
        sponsorId: string;
        organizationId: Array<string> | string;
        archived?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that gets all sponsor users.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#GetSponsorUserListWithoutDistributor
         * @param {string} sponsorId - The sponsor identifier.
         * @param {array} organizationId - The organization identifier array.
         * @param {boolean} archived - The optional archive flag.
         * @param {string} authorization - access token
    */
    GetSponsorUserListWithoutDistributor(parameters: {
        sponsorId: string;
        organizationId: Array<string> | string;
        archived?: boolean;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UnarchiveSponsorUserURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that reverts an archived sponsor user to their previous state.
                    This method requires sponsor admin level rights or higher.
    * @method
    * @name User#UnarchiveSponsorUser
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} authorization - access token
    */
    UnarchiveSponsorUser(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateUserFullNameURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.FullNameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Update the user name information
     * @method
     * @name User#UpdateUserFullName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The name update model.
     * @param {string} authorization - access token
     */
    UpdateUserFullName(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.FullNameBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateUserAddressURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.AddressBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Update the user address information
     * @method
     * @name User#UpdateUserAddress
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The address model.
     * @param {string} authorization - access token
     */
    UpdateUserAddress(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.AddressBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    UpdateUserTimeZoneURL(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.TimeZoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * Update the user time zone
     * @method
     * @name User#UpdateUserTimeZone
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The user identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {} model - The time zone model.
     * @param {string} authorization - access token
     */
    UpdateUserTimeZone(parameters: {
        distributorId: string;
        sponsorId: string;
        userId: string;
        model: Api.TimeZoneBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    AcceptUserInvitationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        invitationCode: string;
        model: Api.UserAcceptInvitationBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that accepts an invitation for a user in the invited status.
     * @method
     * @name User#AcceptUserInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {} model - The binding model.
     */
    AcceptUserInvitation(parameters: {
        distributorId: string;
        sponsorId: string;
        invitationCode: string;
        model: Api.UserAcceptInvitationBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    GetUserInvitationsURL(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that gets a list of invited patients.
     * @method
     * @name User#GetUserInvitations
     * @param {string} distributorId - This distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    GetUserInvitations(parameters: {
        distributorId: string;
        sponsorId: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    CreateUserInvitationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.UserCreateInvitationBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that creates a new user in the invited state.
     * @method
     * @name User#CreateUserInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    CreateUserInvitation(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.UserCreateInvitationBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    DeleteUserInvitationURL(parameters: {
        distributorId: string;
        sponsorId: string;
        invitationCode: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that deletes an unaccepted user invitation.
     * @method
     * @name User#DeleteUserInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeleteUserInvitation(parameters: {
        distributorId: string;
        sponsorId: string;
        invitationCode: string;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ResendInvitationsByCodeURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ResendUserInvitationsByInvitationCodeBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method for resending invitation emails by invitation codes.
     * @method
     * @name User#ResendInvitationsByCode
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    ResendInvitationsByCode(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ResendUserInvitationsByInvitationCodeBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ResendInvitationsByDateURL(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ResendUserInvitationsByDateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method to resend invitation by a date range.
     * @method
     * @name User#ResendInvitationsByDate
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    ResendInvitationsByDate(parameters: {
        distributorId: string;
        sponsorId: string;
        model: Api.ResendUserInvitationsByDateBindingModel;
        authorization: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
