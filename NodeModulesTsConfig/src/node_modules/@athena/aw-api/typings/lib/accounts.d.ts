import * as request from "superagent";
import * as Api from './api';
import ApiClass from './api';
/**
 *
 * @class Accounts
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Accounts extends ApiClass {
    LookupAccountByUserNameURL(parameters: {
        userName: string;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that looks up information about a specific account for a user.
     * @method
     * @name Accounts#LookupAccountByUserName
     * @param {string} userName - Name of the user.
     */
    LookupAccountByUserName(parameters: {
        userName: string;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    SendPasswordResetEmailURL(parameters: {
        model: Api.PasswordResetViewModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
    * This is a method that initiates a password reset for an account holder with a given email address, by
                    sending a password reset email to that address.
    * @method
    * @name Accounts#SendPasswordResetEmail
         * @param {} model - Model view with only an email address.
    */
    SendPasswordResetEmail(parameters: {
        model: Api.PasswordResetViewModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
    ResetPasswordWithTokenURL(parameters: {
        model: Api.ResetPasswordByCodeBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): string;
    /**
     * This is a method that resets a user's password, given that they have a reset token.
     * @method
     * @name Accounts#ResetPasswordWithToken
     * @param {} model -
     */
    ResetPasswordWithToken(parameters: {
        model: Api.ResetPasswordByCodeBindingModel;
        $queryParameters?: any;
        $domain?: string;
    }): Promise<request.Response>;
}
