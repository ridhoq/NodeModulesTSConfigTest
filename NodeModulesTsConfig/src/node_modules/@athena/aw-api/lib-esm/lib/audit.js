"use strict";
import ApiClass from './api';
/**
 *
 * @class Audit
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Audit extends ApiClass {
    GetURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/audit/aggregates/{id}';
        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves audit information for a system aggregate -
                    Patient, User, Sponsor, CarePlan, Organization, Distributor, etc.
    * @method
    * @name Audit#Get
         * @param {string} id - The unique ID of the aggregate
         * @param {string} fromDate - If supplied, retrieves entries that occurred on or after the specified date
         * @param {string} toDate - If supplied, retrieves entries that occurred on or before the specified date
         * @param {string} authorization - access token
    */
    Get(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/audit/aggregates/{id}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{id}', `${parameters['id']}`);
            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=audit.js.map