"use strict";
import ApiClass from './api';
/**
 *
 * @class Time
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Time extends ApiClass {
    GetTimeZonesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/timezones/{countryCode}';
        path = path.replace('{countryCode}', `${parameters['countryCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that gets the time zones.
     * @method
     * @name Time#GetTimeZones
     * @param {string} countryCode - The country code.
     */
    GetTimeZones(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/timezones/{countryCode}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{countryCode}', `${parameters['countryCode']}`);
            if (parameters['countryCode'] === undefined) {
                reject(new Error('Missing required  parameter: countryCode'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=time.js.map