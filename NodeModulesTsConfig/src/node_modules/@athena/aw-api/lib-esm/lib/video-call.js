"use strict";
import ApiClass from './api';
/**
 *
 * @class VideoCall
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class VideoCall extends ApiClass {
    CreateVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method for a caregiver to request a video call with a patient.
     * @method
     * @name VideoCall#CreateVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    CreateVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{roomId}', `${parameters['roomId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to get information about an existing video call.
     * @method
     * @name VideoCall#GetVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} roomId - The room identifier.
     * @param {string} authorization - access token
     */
    GetVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{roomId}', `${parameters['roomId']}`);
            if (parameters['roomId'] === undefined) {
                reject(new Error('Missing required  parameter: roomId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    AcceptVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{roomId}', `${parameters['roomId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method for a patient to accept a video call.
     * @method
     * @name VideoCall#AcceptVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} roomId - The room identifier.
     * @param {string} authorization - access token
     */
    AcceptVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/accept';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{roomId}', `${parameters['roomId']}`);
            if (parameters['roomId'] === undefined) {
                reject(new Error('Missing required  parameter: roomId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    EndVideoCallURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{roomId}', `${parameters['roomId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method to end a video call.
     * @method
     * @name VideoCall#EndVideoCall
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} roomId - The room identifier.
     * @param {} model - The model.
     * @param {string} authorization - access token
     */
    EndVideoCall(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/videocall/{roomId}/end';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{roomId}', `${parameters['roomId']}`);
            if (parameters['roomId'] === undefined) {
                reject(new Error('Missing required  parameter: roomId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=video-call.js.map