"use strict";
import ApiClass from './api';
/**
 *
 * @class TaskSchedules
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class TaskSchedules extends ApiClass {
    CreateDistributorTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates one or more task schedules within a Care Plan.
                    This API also allows the creation of
                    TaskScheduleItems at the same time that the TaskSchedule or schedules are
                    created.
    * @method
    * @name TaskSchedules#CreateDistributorTaskSchedule
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The information to be used in creating the TaskSchedule.
         * @param {string} authorization - access token
    */
    CreateDistributorTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    CreateTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that creates one or more task schedules within a Care Plan.
                    This API also allows the creation of
                    TaskScheduleItems at the same time that the TaskSchedule or schedules are
                    created.
    * @method
    * @name TaskSchedules#CreateTaskSchedule
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The information to be used in creating the TaskSchedule.
         * @param {string} authorization - access token
    */
    CreateTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ClearTaskSchedulesURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Clears the task schedules from a patient or personalized care plan.
     * @method
     * @name TaskSchedules#ClearTaskSchedules
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The careplan identifier.
     * @param {string} authorization - access token
     */
    ClearTaskSchedules(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetDistributorTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a TaskSchedule for a CarePlan.
     * @method
     * @name TaskSchedules#GetDistributorTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    GetDistributorTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveDistributorTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * Remove task schedule froma  distributor.
     * @method
     * @name TaskSchedules#RemoveDistributorTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    RemoveDistributorTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a TaskSchedule for a CarePlan.
     * @method
     * @name TaskSchedules#GetTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    GetTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveTaskScheduleURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a TaskSchedule from a CarePlan
     * @method
     * @name TaskSchedules#RemoveTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    RemoveTaskSchedule(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleNoteURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a note on a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleNote
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleNote(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleNoteURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates a note on a distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleNote
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleNote(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleTargetURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the target on a Distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleTarget
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleTarget(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleTargetURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the target on a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleTarget
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleTarget(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleRolesAllowedToRecordOutcomeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a Distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleRolesAllowedToRecordOutcomeURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleRolesAllowedToRecordOutcome
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleRolesAllowedToRecordOutcome(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateDistributorTaskScheduleIsDeactivatedURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleIsDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    UpdateDistributorTaskScheduleIsDeactivated(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateTaskScheduleIsDeactivatedURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
        path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.
     * @method
     * @name TaskSchedules#UpdateTaskScheduleIsDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    UpdateTaskScheduleIsDeactivated(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', `${parameters['carePlanId']}`);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', `${parameters['taskScheduleId']}`);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=task-schedules.js.map