"use strict";
import ApiClass from './api';
/**
 *
 * @class SharedCareInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class SharedCareInternal extends ApiClass {
    AcceptSharedCareInvitationForExistingPatientInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that allows existing Patient IO Patients
                    to accept a shared care invitation they've received.
    * @method
    * @name SharedCareInternal#AcceptSharedCareInvitationForExistingPatientInternal
         * @param {string} patientId - The invited's patient identifier.
         * @param {string} invitationCode - The invitation code.
         * @param {string} authorization - access token
    */
    AcceptSharedCareInvitationForExistingPatientInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    ChangeOutgoingSharedCareMemberPermissionsInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that changes the shared care patient permissions.
     * @method
     * @name SharedCareInternal#ChangeOutgoingSharedCareMemberPermissionsInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The shared care patient identifier.
     * @param {} model - The shared care permissions model.
     * @param {string} authorization - access token
     */
    ChangeOutgoingSharedCareMemberPermissionsInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemoveOutgoingSharedCareMemberInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes shared care rights from a patient, for a relation.
     * @method
     * @name SharedCareInternal#RemoveOutgoingSharedCareMemberInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The shared care patient identifier.
     * @param {string} authorization - access token
     */
    RemoveOutgoingSharedCareMemberInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    DeclineSharedCareInvitationInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that declines a shared care invitation.
     * @method
     * @name SharedCareInternal#DeclineSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    DeclineSharedCareInvitationInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPendingReceivedSharedCareInvitationsInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that retrieves a patient's received shared care invitations.
     * @method
     * @name SharedCareInternal#GetPendingReceivedSharedCareInvitationsInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    GetPendingReceivedSharedCareInvitationsInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RemovePatientFromIncomingSharedCareInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that removes a patient from the incoming shared care of the specified patient.
     * @method
     * @name SharedCareInternal#RemovePatientFromIncomingSharedCareInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The incoming shared care patient identifier.
     * @param {string} authorization - access token
     */
    RemovePatientFromIncomingSharedCareInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', `${parameters['sharedCarePatientId']}`);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RevokeSharedCareInvitationInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that revokes a shared care invitation.
     * @method
     * @name SharedCareInternal#RevokeSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    RevokeSharedCareInvitationInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendSharedCareInvitationInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that creates a patient invitation, and sends a notice to the invited patient.
     * @method
     * @name SharedCareInternal#SendSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {} model - The shared care invitation creation model.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitationInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendSharedCareInvitationEmailInternalURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends the shared care invitation email.
     * @method
     * @name SharedCareInternal#SendSharedCareInvitationEmailInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SendSharedCareInvitationEmailInternal(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', `${parameters['invitationCode']}`);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=shared-care-internal.js.map