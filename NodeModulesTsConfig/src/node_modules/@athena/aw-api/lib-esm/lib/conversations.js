"use strict";
import ApiClass from './api';
/**
 *
 * @class Conversations
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Conversations extends ApiClass {
    GetOrganizationConversationWithPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets an organization's conversation with a patient (from the organization's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetOrganizationConversationWithPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetOrganizationConversationWithPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateOrganizationConversationStatusURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of an organization's conversation with a patient.
     * @method
     * @name Conversations#UpdateOrganizationConversationStatus
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdateOrganizationConversationStatus(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromOrganizationToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from an organization to a patient.
     * @method
     * @name Conversations#SendMessageFromOrganizationToPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {string} patientId - The patient identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromOrganizationToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetUserConversationWithPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that gets a user's conversation with a patient (from the user's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetUserConversationWithPatient
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} patientId - The patient identifier.
         * @param {string} userId - The user identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetUserConversationWithPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdateUserConversationStateURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of an user's conversation with a patient.
     * @method
     * @name Conversations#UpdateUserConversationState
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} patientId - The patient identifier.
     * @param {string} userId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdateUserConversationState(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromUserToPatientURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from a user to a patient.
     * @method
     * @name Conversations#SendMessageFromUserToPatient
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The organization identifier.
     * @param {string} patientId - The patient identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromUserToPatient(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}/conversations/patients/{patientId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientConversationWithOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a patient's conversation with an organization (from the patient's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetPatientConversationWithOrganization
         * @param {string} patientId - The patient identifier.
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} organizationId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetPatientConversationWithOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientConversationWithOrganizationStatusURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of a patient's conversation with an organization.
     * @method
     * @name Conversations#UpdatePatientConversationWithOrganizationStatus
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} organizationId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdatePatientConversationWithOrganizationStatus(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromPatientToOrganizationURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{organizationId}', `${parameters['organizationId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from a patient to an organization.
     * @method
     * @name Conversations#SendMessageFromPatientToOrganization
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsors identifier.
     * @param {string} organizationId - The org identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromPatientToOrganization(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/organizations/{organizationId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{organizationId}', `${parameters['organizationId']}`);
            if (parameters['organizationId'] === undefined) {
                reject(new Error('Missing required  parameter: organizationId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    GetPatientConversationWithUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters['fromDateTime'] !== undefined) {
            queryParameters['fromDateTime'] = parameters['fromDateTime'];
        }
        if (parameters['toDateTime'] !== undefined) {
            queryParameters['toDateTime'] = parameters['toDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is a method that retrieves a patient's conversation with a user (from the patient's perspective). Optionally,
                    it can retrieve only those messages within a specified date range.
    * @method
    * @name Conversations#GetPatientConversationWithUser
         * @param {string} patientId - The patient identifier.
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} userId - The organization identifier.
         * @param {string} fromDateTime - The beginning point, in UTC, from which to search for conversations, inclusive. May be
                    omitted.
         * @param {string} toDateTime - The endpoints point, in UTC, to which to search for conversations, inclusive. May be omitted.
         * @param {string} authorization - access token
    */
    GetPatientConversationWithUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['fromDateTime'] !== undefined) {
                queryParameters['fromDateTime'] = parameters['fromDateTime'];
            }
            if (parameters['toDateTime'] !== undefined) {
                queryParameters['toDateTime'] = parameters['toDateTime'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    UpdatePatientConversationWithUserStatusURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that updates the state of a patient's conversation with an user.
     * @method
     * @name Conversations#UpdatePatientConversationWithUserStatus
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} userId - The organization identifier.
     * @param {} model - The conversation model.
     * @param {string} authorization - access token
     */
    UpdatePatientConversationWithUserStatus(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    SendMessageFromPatientToUserURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        path = path.replace('{patientId}', `${parameters['patientId']}`);
        path = path.replace('{distributorId}', `${parameters['distributorId']}`);
        path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
        path = path.replace('{userId}', `${parameters['userId']}`);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
     * This is a method that sends a message from a patient to an user.
     * @method
     * @name Conversations#SendMessageFromPatientToUser
     * @param {string} patientId - The patient identifier.
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsors identifier.
     * @param {string} userId - The org identifier.
     * @param {} messageModel - The message.
     * @param {string} authorization - access token
     */
    SendMessageFromPatientToUser(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/patients/{patientId}/conversations/distributors/{distributorId}/sponsors/{sponsorId}/users/{userId}';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded,multipart/form-data';
            path = path.replace('{patientId}', `${parameters['patientId']}`);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{distributorId}', `${parameters['distributorId']}`);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', `${parameters['sponsorId']}`);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{userId}', `${parameters['userId']}`);
            if (parameters['userId'] === undefined) {
                reject(new Error('Missing required  parameter: userId'));
                return;
            }
            if (parameters['messageModel'] !== undefined) {
                body = parameters['messageModel'];
            }
            if (parameters['messageModel'] === undefined) {
                reject(new Error('Missing required  parameter: messageModel'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=conversations.js.map