"use strict";
import ApiClass from './api';
/**
 *
 * @class Beacon
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Beacon extends ApiClass {
    RecordBeaconURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is an endpoint for capturing beacons in an authenticated context. The endpoint uses the current user and
                    the following http headers to create a beacon:
                    X-FILAMENT-OS-TYPE - The platform operating system
                    X-FILAMENT-OS-VERSION - The platform operating system's version
                    X-FILAMENT-APP-VERSION - The version of the Patient IO App
    * @method
    * @name Beacon#RecordBeacon
         * @param {} model - The model containg the type of beacon.
         * @param {string} authorization - access token
    */
    RecordBeacon(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
    RecordInvitationBeaconURL(parameters) {
        let queryParameters = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons/invitations';
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }
    /**
    * This is an endpoint for capturing beacons in an unauthenticated context for invitations. The endpoint
                    uses the following http headers to create a beacon:
                    X-FILAMENT-OS-TYPE - The platform operating system
                    X-FILAMENT-OS-VERSION - The platform operating system's version
                    X-FILAMENT-APP-VERSION - The version of the Patient IO App
    * @method
    * @name Beacon#RecordInvitationBeacon
         * @param {} model - The model containing the type of beacon and the invitation code.
    */
    RecordInvitationBeacon(parameters) {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/api/beacons/invitations';
        let body;
        let queryParameters = {};
        let headers = {};
        let form = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }
}
//# sourceMappingURL=beacon.js.map