"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class SharedCareInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var SharedCareInternal = /** @class */ (function (_super) {
    __extends(SharedCareInternal, _super);
    function SharedCareInternal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SharedCareInternal.prototype.AcceptSharedCareInvitationForExistingPatientInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that allows existing Patient IO Patients
                    to accept a shared care invitation they've received.
    * @method
    * @name SharedCareInternal#AcceptSharedCareInvitationForExistingPatientInternal
         * @param {string} patientId - The invited's patient identifier.
         * @param {string} invitationCode - The invitation code.
         * @param {string} authorization - access token
    */
    SharedCareInternal.prototype.AcceptSharedCareInvitationForExistingPatientInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/acceptance';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.ChangeOutgoingSharedCareMemberPermissionsInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{sharedCarePatientId}', "" + parameters['sharedCarePatientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that changes the shared care patient permissions.
     * @method
     * @name SharedCareInternal#ChangeOutgoingSharedCareMemberPermissionsInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The shared care patient identifier.
     * @param {} model - The shared care permissions model.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.ChangeOutgoingSharedCareMemberPermissionsInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', "" + parameters['sharedCarePatientId']);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.RemoveOutgoingSharedCareMemberInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{sharedCarePatientId}', "" + parameters['sharedCarePatientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that removes shared care rights from a patient, for a relation.
     * @method
     * @name SharedCareInternal#RemoveOutgoingSharedCareMemberInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The shared care patient identifier.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.RemoveOutgoingSharedCareMemberInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/{sharedCarePatientId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', "" + parameters['sharedCarePatientId']);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.DeclineSharedCareInvitationInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that declines a shared care invitation.
     * @method
     * @name SharedCareInternal#DeclineSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.DeclineSharedCareInvitationInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/invitations/{invitationCode}/decline';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.GetPendingReceivedSharedCareInvitationsInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/invitations';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that retrieves a patient's received shared care invitations.
     * @method
     * @name SharedCareInternal#GetPendingReceivedSharedCareInvitationsInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.GetPendingReceivedSharedCareInvitationsInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/invitations';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.RemovePatientFromIncomingSharedCareInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{sharedCarePatientId}', "" + parameters['sharedCarePatientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that removes a patient from the incoming shared care of the specified patient.
     * @method
     * @name SharedCareInternal#RemovePatientFromIncomingSharedCareInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} sharedCarePatientId - The incoming shared care patient identifier.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.RemovePatientFromIncomingSharedCareInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/incoming/{sharedCarePatientId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sharedCarePatientId}', "" + parameters['sharedCarePatientId']);
            if (parameters['sharedCarePatientId'] === undefined) {
                reject(new Error('Missing required  parameter: sharedCarePatientId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.RevokeSharedCareInvitationInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that revokes a shared care invitation.
     * @method
     * @name SharedCareInternal#RevokeSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.RevokeSharedCareInvitationInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/revoke';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.SendSharedCareInvitationInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a patient invitation, and sends a notice to the invited patient.
     * @method
     * @name SharedCareInternal#SendSharedCareInvitationInternal
     * @param {string} patientId - The patient identifier.
     * @param {} model - The shared care invitation creation model.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.SendSharedCareInvitationInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/invitations';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    SharedCareInternal.prototype.SendSharedCareInvitationEmailInternalURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that sends the shared care invitation email.
     * @method
     * @name SharedCareInternal#SendSharedCareInvitationEmailInternal
     * @param {string} patientId - The patient identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    SharedCareInternal.prototype.SendSharedCareInvitationEmailInternal = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sharedcare/outgoing/invitations/{invitationCode}/sendemail';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return SharedCareInternal;
}(ApiClass));
export default SharedCareInternal;
//# sourceMappingURL=shared-care-internal.js.map