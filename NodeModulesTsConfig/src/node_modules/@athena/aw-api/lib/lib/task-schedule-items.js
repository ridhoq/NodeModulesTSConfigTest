"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class TaskScheduleItems
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var TaskScheduleItems = /** @class */ (function (_super) {
    __extends(TaskScheduleItems, _super);
    function TaskScheduleItems() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TaskScheduleItems.prototype.CreateDistributorTreatmentTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates one or more TreatmentTaskScheduleItems within a TaskSchedule.
     * @method
     * @name TaskScheduleItems#CreateDistributorTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The treatment task schedule items list.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.CreateDistributorTreatmentTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteDistributorTreatmentTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes TreatmentTaskScheduleItems from a distributor care plan.
     * @method
     * @name TaskScheduleItems#DeleteDistributorTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteDistributorTreatmentTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.PatchDistributorTreatmentTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that makes common changes to all elements of a
                    TaskSchedule which are TreatmentTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchDistributorTreatmentTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.PatchDistributorTreatmentTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.CreateTreatmentTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates one or more TreatmentTaskScheduleItems within a TaskSchedule.
     * @method
     * @name TaskScheduleItems#CreateTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The treatment task schedule items list.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.CreateTreatmentTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteTreatmentTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes TreatmentTaskScheduleItems
     * @method
     * @name TaskScheduleItems#DeleteTreatmentTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteTreatmentTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.PatchTreatmentTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that makes common changes to all elements of a
                    TaskSchedule which are TreatmentTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchTreatmentTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.PatchTreatmentTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.CreateDistributorUntilCompleteTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that creates an until complete task schedule item.
                    These items are intended to cause a given task to appear in a patient's
                    schedule under a particular circumstance, generally related to time,
                    and be scheduled continuously in a patient's schedule until the task is
                    completed. The item can then appear again, according to a plan for repetition
                    that can be specified in the UntilCompleteTaskScheduleItem
    * @method
    * @name TaskScheduleItems#CreateDistributorUntilCompleteTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {} model - The until complete task schedule item model.
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.CreateDistributorUntilCompleteTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.CreateUntilCompleteTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that creates an until complete task schedule item.
                    These items are intended to cause a given task to appear in a patient's
                    schedule under a particular circumstance, generally related to time,
                    and be scheduled continuously in a patient's schedule until the task is
                    completed. The item can then appear again, according to a plan for repetition
                    that can be specified in the UntilCompleteTaskScheduleItem
    * @method
    * @name TaskScheduleItems#CreateUntilCompleteTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {} model - The until complete task schedule item model.
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.CreateUntilCompleteTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitem';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.CreateDistributorWeeklyTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates one or more WeeklyTaskScheduleItems within a TaskSchedule
     * @method
     * @name TaskScheduleItems#CreateDistributorWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The weekly task schedule item list.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.CreateDistributorWeeklyTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteDistributorWeeklyTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes one or more WeeklyTaskScheduleItems for a distributor care plan.
     * @method
     * @name TaskScheduleItems#DeleteDistributorWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteDistributorWeeklyTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.PatchDistributorWeeklyTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that makes common changes to all elements of a TaskSchedule which are
                    WeeklyTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchDistributorWeeklyTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.PatchDistributorWeeklyTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.CreateWeeklyTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates one or more WeeklyTaskScheduleItems within a TaskSchedule
     * @method
     * @name TaskScheduleItems#CreateWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The weekly task schedule item list.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.CreateWeeklyTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteWeeklyTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['taskScheduleItemIds'] !== undefined) {
            queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes one or more WeeklyTaskScheduleItems
     * @method
     * @name TaskScheduleItems#DeleteWeeklyTaskScheduleItems
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {array} taskScheduleItemIds - The task schedule item ids.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteWeeklyTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemIds'] !== undefined) {
                queryParameters['taskScheduleItemIds'] = parameters['taskScheduleItemIds'];
            }
            if (parameters['taskScheduleItemIds'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemIds'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.PatchWeeklyTaskScheduleItemsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that makes common changes to all elements of a TaskSchedule which are
                    WeeklyTaskScheduleItems
    * @method
    * @name TaskScheduleItems#PatchWeeklyTaskScheduleItems
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.PatchWeeklyTaskScheduleItems = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.GetDistributorTreatmentTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that gets a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetDistributorTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.GetDistributorTreatmentTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.UpdateDistributorTreatmentTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that updates a TreatmentTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateDistributorTreatmentTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.UpdateDistributorTreatmentTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteDistributorTreatmentTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteDistributorTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteDistributorTreatmentTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.GetTreatmentTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that gets a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.GetTreatmentTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.UpdateTreatmentTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that updates a TreatmentTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateTreatmentTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.UpdateTreatmentTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteTreatmentTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes a TreatmentTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteTreatmentTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteTreatmentTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/treatmenttaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteDistributorUntilCompleteTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteDistributorUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteDistributorUntilCompleteTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteUntilCompleteTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteUntilCompleteTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.GetDistributorWeeklyTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that gets a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetDistributorWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.GetDistributorWeeklyTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.UpdateDistributorWeeklyTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that updates a WeeklyTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateDistributorWeeklyTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.UpdateDistributorWeeklyTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteDistributorWeeklyTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteDistributorWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteDistributorWeeklyTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.GetWeeklyTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that gets a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#GetWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.GetWeeklyTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.UpdateWeeklyTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters['modelScheduledTime'] !== undefined) {
            queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
        }
        if (parameters['modelScheduledTimePeriod'] !== undefined) {
            queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that updates a WeeklyTaskScheduleItem's properties for which updates are allowed.
    * @method
    * @name TaskScheduleItems#UpdateWeeklyTaskScheduleItem
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
         * @param {string} taskScheduleId - The task schedule identifier.
         * @param {string} taskScheduleItemId - The task schedule item identifier.
         * @param {string} modelScheduledTime - Gets or sets the scheduled time of the task
         * @param {string} modelScheduledTimePeriod - Gets or sets the scheduled time period. An arbitrary
                time period like "Morning" or "Before Breakfast"
         * @param {string} authorization - access token
    */
    TaskScheduleItems.prototype.UpdateWeeklyTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['modelScheduledTime'] !== undefined) {
                queryParameters['model.scheduledTime'] = parameters['modelScheduledTime'];
            }
            if (parameters['modelScheduledTimePeriod'] !== undefined) {
                queryParameters['model.scheduledTimePeriod'] = parameters['modelScheduledTimePeriod'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.DeleteWeeklyTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes a WeeklyTaskScheduleItem
     * @method
     * @name TaskScheduleItems#DeleteWeeklyTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.DeleteWeeklyTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/weeklytaskscheduleitems/{taskScheduleItemId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            path = path.replace('{taskScheduleItemId}', "" + parameters['taskScheduleItemId']);
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.UpdateDistributorUntilCompleteTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['taskScheduleItemId'] !== undefined) {
            queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#UpdateDistributorUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {} model - The until complete task schedule item model.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.UpdateDistributorUntilCompleteTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemId'] !== undefined) {
                queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
            }
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskScheduleItems.prototype.UpdateUntilCompleteTaskScheduleItemURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters['taskScheduleItemId'] !== undefined) {
            queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates an UntilCompleteTaskScheduleItem
     * @method
     * @name TaskScheduleItems#UpdateUntilCompleteTaskScheduleItem
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier (can be, either, unique to PatientIO or to the sponsor).
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} taskScheduleItemId - The task schedule item identifier.
     * @param {} model - The until complete task schedule item model.
     * @param {string} authorization - access token
     */
    TaskScheduleItems.prototype.UpdateUntilCompleteTaskScheduleItem = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/untilcompletetaskscheduleitems';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['taskScheduleItemId'] !== undefined) {
                queryParameters['taskScheduleItemId'] = parameters['taskScheduleItemId'];
            }
            if (parameters['taskScheduleItemId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleItemId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return TaskScheduleItems;
}(ApiClass));
export default TaskScheduleItems;
//# sourceMappingURL=task-schedule-items.js.map