"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class PatientInvitations
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var PatientInvitations = /** @class */ (function (_super) {
    __extends(PatientInvitations, _super);
    function PatientInvitations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PatientInvitations.prototype.AcceptPatientInvitationURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that accepts an invitation for a patient.
                    Accepting the invitation creates an actual Patient record within Patient IO,
                    using the data in the invitation.
    * @method
    * @name PatientInvitations#AcceptPatientInvitation
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} invitationCode - The invitation code.
         * @param {} model - The invitation acceptance model.
    */
    PatientInvitations.prototype.AcceptPatientInvitation = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}/acceptance';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientInvitations.prototype.GetPatientInvitationsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['accepted'] !== undefined) {
            queryParameters['accepted'] = parameters['accepted'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that retrieves patient invitations for a sponsor.
    * @method
    * @name PatientInvitations#GetPatientInvitations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {boolean} accepted - If set to true retrieve accepted. false retrieves unaccepted. If ommitted
                    retrieves both.
         * @param {string} authorization - access token
    */
    PatientInvitations.prototype.GetPatientInvitations = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['accepted'] !== undefined) {
                queryParameters['accepted'] = parameters['accepted'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientInvitations.prototype.CreatePatientInvitationURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a patient invitation and sends a notice to the invited patient.
     * @method
     * @name PatientInvitations#CreatePatientInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {} model - The patient invitation creation model.
     * @param {string} authorization - access token
     */
    PatientInvitations.prototype.CreatePatientInvitation = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientInvitations.prototype.CreatePatientInvitationWithAuthCodeURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{authorizationCode}', "" + parameters['authorizationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method creates an invitation and sends a notice to the patient.
                    This method allows the creation of a patient invitation for a
                    sponsor based on an authorization code. This allows a client that only knows
                    the authorization code for a sponsor to create and send an invitation to a
                    sponsor to a patient without authenticating (supports the Kiosk application.)
    * @method
    * @name PatientInvitations#CreatePatientInvitationWithAuthCode
         * @param {string} distributorId - The distributor identifier.
         * @param {string} authorizationCode - The authorization code.
         * @param {} model - The kiosk patient invitation creation model.
    */
    PatientInvitations.prototype.CreatePatientInvitationWithAuthCode = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/authorizationcodes/{authorizationCode}/invitations';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{authorizationCode}', "" + parameters['authorizationCode']);
            if (parameters['authorizationCode'] === undefined) {
                reject(new Error('Missing required  parameter: authorizationCode'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientInvitations.prototype.DeletePatientInvitationURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes an invitation for a patient.
     * @method
     * @name PatientInvitations#DeletePatientInvitation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} invitationCode - The invitation code.
     * @param {string} authorization - access token
     */
    PatientInvitations.prototype.DeletePatientInvitation = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/{invitationCode}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{invitationCode}', "" + parameters['invitationCode']);
            if (parameters['invitationCode'] === undefined) {
                reject(new Error('Missing required  parameter: invitationCode'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientInvitations.prototype.ResendPatientInvitationsURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that resends unsent invitations given a list of invitation codes,
                    or invitations created within a certain date range.
    * @method
    * @name PatientInvitations#ResendPatientInvitations
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The resend invitations model.
         * @param {string} authorization - access token
    */
    PatientInvitations.prototype.ResendPatientInvitations = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/invitations/resend';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return PatientInvitations;
}(ApiClass));
export default PatientInvitations;
//# sourceMappingURL=patient-invitations.js.map