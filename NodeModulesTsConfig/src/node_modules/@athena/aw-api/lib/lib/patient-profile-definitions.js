"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class PatientProfileDefinitions
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var PatientProfileDefinitions = /** @class */ (function (_super) {
    __extends(PatientProfileDefinitions, _super);
    function PatientProfileDefinitions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PatientProfileDefinitions.prototype.AddPatientProfileDefinitionURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a patient profile definition within a distributor.
     * @method
     * @name PatientProfileDefinitions#AddPatientProfileDefinition
     * @param {string} distributorId - The distributor identifier.
     * @param {} model - The patient profile definition model.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.AddPatientProfileDefinition = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.AffiliatePatientProfileDefinitionToSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that provisions a patient profile definition from a distributor to a sponsor.
     * @method
     * @name PatientProfileDefinitions#AffiliatePatientProfileDefinitionToSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The list of sponsor identifiers.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.AffiliatePatientProfileDefinitionToSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/sponsors';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.CreatePatientProfileDefinitionCodeCollectionURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a CodeCollection within a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionCodeCollection
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.CreatePatientProfileDefinitionCodeCollection = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.CreatePatientProfileDefinitionTagElementURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a TagElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTagElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.CreatePatientProfileDefinitionTagElement = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.CreatePatientProfileDefinitionTextElementURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a TextElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#CreatePatientProfileDefinitionTextElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - The profile definition element model.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.CreatePatientProfileDefinitionTextElement = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.GetPatientProfileDefinitionURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that retrieves a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#GetPatientProfileDefinition
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.GetPatientProfileDefinition = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.RemovePatientProfileDefinitionCodeCollectionURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        path = path.replace('{elementId}', "" + parameters['elementId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that removes a CodeableElement with a patient profile definition.
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionCodeCollection
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The patient profile definition code element identifier.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.RemovePatientProfileDefinitionCodeCollection = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/codeCollections/{elementId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementId}', "" + parameters['elementId']);
            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.RemovePatientProfileDefinitionTagElementURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        path = path.replace('{patientProfileDefinitionTagElementId}', "" + parameters['patientProfileDefinitionTagElementId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that removes a TagElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTagElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTagElementId - The patient profile definition tag element identifier.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.RemovePatientProfileDefinitionTagElement = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/tagelements/{patientProfileDefinitionTagElementId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionTagElementId}', "" + parameters['patientProfileDefinitionTagElementId']);
            if (parameters['patientProfileDefinitionTagElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTagElementId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.RemovePatientProfileDefinitionTextElementURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        path = path.replace('{patientProfileDefinitionTextElementId}', "" + parameters['patientProfileDefinitionTextElementId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that removes a TextElement within a patient profile definition
     * @method
     * @name PatientProfileDefinitions#RemovePatientProfileDefinitionTextElement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} patientProfileDefinitionTextElementId - The patient profile definition text element identifier.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.RemovePatientProfileDefinitionTextElement = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/textelements/{patientProfileDefinitionTextElementId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionTextElementId}', "" + parameters['patientProfileDefinitionTextElementId']);
            if (parameters['patientProfileDefinitionTextElementId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionTextElementId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.SetPatientProfileDefinitionCategoryURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that sets the category on any PatientProfileDefinition.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {} model - PaitnetProfileDefinition information to update.
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.SetPatientProfileDefinitionCategory = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/category';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.SetPatientProfileDefinitionElementCategoryURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        path = path.replace('{elementId}', "" + parameters['elementId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that sets the category on any PatientProfileDefinition element.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategory
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementId - The element identifier.
     * @param {} model - PatientProfileDefinition information to update
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.SetPatientProfileDefinitionElementCategory = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/{elementId}/category';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementId}', "" + parameters['elementId']);
            if (parameters['elementId'] === undefined) {
                reject(new Error('Missing required  parameter: elementId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientProfileDefinitions.prototype.SetPatientProfileDefinitionElementCategoryByNameURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
        path = path.replace('{elementName}', "" + parameters['elementName']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that sets the category on any PatientProfileDefinition element by looking up the element by name.
     * @method
     * @name PatientProfileDefinitions#SetPatientProfileDefinitionElementCategoryByName
     * @param {string} distributorId - The distributor identifier.
     * @param {string} patientProfileDefinitionId - The patient profile definition identifier.
     * @param {string} elementName - Name of the element.
     * @param {} model - PatientProfileDefinition information to update
     * @param {string} authorization - access token
     */
    PatientProfileDefinitions.prototype.SetPatientProfileDefinitionElementCategoryByName = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/patientprofiledefinitions/{patientProfileDefinitionId}/elements/names/{elementName}/category';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{patientProfileDefinitionId}', "" + parameters['patientProfileDefinitionId']);
            if (parameters['patientProfileDefinitionId'] === undefined) {
                reject(new Error('Missing required  parameter: patientProfileDefinitionId'));
                return;
            }
            path = path.replace('{elementName}', "" + parameters['elementName']);
            if (parameters['elementName'] === undefined) {
                reject(new Error('Missing required  parameter: elementName'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return PatientProfileDefinitions;
}(ApiClass));
export default PatientProfileDefinitions;
//# sourceMappingURL=patient-profile-definitions.js.map