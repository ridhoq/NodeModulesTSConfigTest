"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class PatientSchedulesInternal
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var PatientSchedulesInternal = /** @class */ (function (_super) {
    __extends(PatientSchedulesInternal, _super);
    function PatientSchedulesInternal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PatientSchedulesInternal.prototype.UpdateAppointmentURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/appointments';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates a patient appointment.
     * @method
     * @name PatientSchedulesInternal#UpdateAppointment
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {} model - The appointment update model.
     * @param {string} authorization - access token
     */
    PatientSchedulesInternal.prototype.UpdateAppointment = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/appointments';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientSchedulesInternal.prototype.CreateAppointmentURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/appointments';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that creates a new Appointment for a patient.
     * @method
     * @name PatientSchedulesInternal#CreateAppointment
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {} model - The appointment creation model.
     * @param {string} authorization - access token
     */
    PatientSchedulesInternal.prototype.CreateAppointment = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/appointments';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientSchedulesInternal.prototype.CancelAppointmentURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/appointments';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes a Patient appointment.
     * @method
     * @name PatientSchedulesInternal#CancelAppointment
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {} model - The appointment cancellation model.
     * @param {string} authorization - access token
     */
    PatientSchedulesInternal.prototype.CancelAppointment = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/appointments';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientSchedulesInternal.prototype.CancelAppointmentByDateURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['appointmentDateTime'] !== undefined) {
            queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that deletes a Patient appointment.
     * @method
     * @name PatientSchedulesInternal#CancelAppointmentByDate
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} appointmentDateTime - The appointment date time.
     * @param {string} authorization - access token
     */
    PatientSchedulesInternal.prototype.CancelAppointmentByDate = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/sponsors/{sponsorId}/schedule/appointments';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['appointmentDateTime'] !== undefined) {
                queryParameters['appointmentDateTime'] = parameters['appointmentDateTime'];
            }
            if (parameters['appointmentDateTime'] === undefined) {
                reject(new Error('Missing required  parameter: appointmentDateTime'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientSchedulesInternal.prototype.GetScheduleWithDateRangeURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that retrieves the Schedule for a given patient within a date range.
     * @method
     * @name PatientSchedulesInternal#GetScheduleWithDateRange
     * @param {string} patientId - The Internal PatientIO patient identifier.
     * @param {string} startDate - yyyy-MM-dd
     * @param {string} endDate - yyyy-MM-dd
     * @param {string} authorization - access token
     */
    PatientSchedulesInternal.prototype.GetScheduleWithDateRange = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientSchedulesInternal.prototype.GetScheduleForDayOfCareURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/days/{dayOfCare}';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{dayOfCare}', "" + parameters['dayOfCare']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that retrieves the schedule for a patient for a particular day.
    * @method
    * @name PatientSchedulesInternal#GetScheduleForDayOfCare
         * @param {string} patientId - The Internal PatientIO patient identifier.
         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned
                    in the format yyyy-MM-dd
         * @param {string} authorization - access token
    */
    PatientSchedulesInternal.prototype.GetScheduleForDayOfCare = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/days/{dayOfCare}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{dayOfCare}', "" + parameters['dayOfCare']);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientSchedulesInternal.prototype.RecordScheduledTaskOutcomeURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';
        path = path.replace('{patientId}', "" + parameters['patientId']);
        path = path.replace('{dayOfCare}', "" + parameters['dayOfCare']);
        path = path.replace('{scheduledTaskId}', "" + parameters['scheduledTaskId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that records a measurement associated to a particular scheduled task.
    * @method
    * @name PatientSchedulesInternal#RecordScheduledTaskOutcome
         * @param {string} patientId - The Internal PatientIO patient identifier.
         * @param {string} dayOfCare - The day of care to which the scheduled task was assigned
                    in the format yyyy-MM-dd
         * @param {string} scheduledTaskId - The scheduled task identifier.
         * @param {} model - The measurement model.
         * @param {string} authorization - access token
    */
    PatientSchedulesInternal.prototype.RecordScheduledTaskOutcome = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/patients/{patientId}/schedule/days/{dayOfCare}/scheduledtasks/{scheduledTaskId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{patientId}', "" + parameters['patientId']);
            if (parameters['patientId'] === undefined) {
                reject(new Error('Missing required  parameter: patientId'));
                return;
            }
            path = path.replace('{dayOfCare}', "" + parameters['dayOfCare']);
            if (parameters['dayOfCare'] === undefined) {
                reject(new Error('Missing required  parameter: dayOfCare'));
                return;
            }
            path = path.replace('{scheduledTaskId}', "" + parameters['scheduledTaskId']);
            if (parameters['scheduledTaskId'] === undefined) {
                reject(new Error('Missing required  parameter: scheduledTaskId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return PatientSchedulesInternal;
}(ApiClass));
export default PatientSchedulesInternal;
//# sourceMappingURL=patient-schedules-internal.js.map