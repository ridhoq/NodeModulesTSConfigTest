"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class ClientDataExport
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var ClientDataExport = /** @class */ (function (_super) {
    __extends(ClientDataExport, _super);
    function ClientDataExport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClientDataExport.prototype.GetPatientsCarePlansURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that retrieves data describing the precise definition
                    of the care plan assigned to each patient within a sponsor.
    * @method
    * @name ClientDataExport#GetPatientsCarePlans
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} authorization - access token
    */
    ClientDataExport.prototype.GetPatientsCarePlans = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/careplans';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    ClientDataExport.prototype.CreatePatientTaskDataExtractURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that retrieves all the ScheduledTasks assigned to
                    patients within a sponsor, along with the outcomes of those ScheduledTasks
                    covering a specific date range. If no dates are provided, the results will
                    cover the last 30 days.
    * @method
    * @name ClientDataExport#CreatePatientTaskDataExtract
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {} model - The model.
         * @param {string} authorization - access token
    */
    ClientDataExport.prototype.CreatePatientTaskDataExtract = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/scheduledtasks';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    ClientDataExport.prototype.GetPatientsTaskCompletionURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['taskName'] !== undefined) {
            queryParameters['taskName'] = parameters['taskName'];
        }
        if (parameters['fromDate'] !== undefined) {
            queryParameters['fromDate'] = parameters['fromDate'];
        }
        if (parameters['toDate'] !== undefined) {
            queryParameters['toDate'] = parameters['toDate'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that retrieves the completion state of a specific task over a time range.
     * @method
     * @name ClientDataExport#GetPatientsTaskCompletion
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} taskName - The name of the task.
     * @param {string} fromDate - From date (inclusive).
     * @param {string} toDate - To date (inclusive).
     * @param {string} authorization - access token
     */
    ClientDataExport.prototype.GetPatientsTaskCompletion = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/patients/taskcompletion';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml, text/csv';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['taskName'] !== undefined) {
                queryParameters['taskName'] = parameters['taskName'];
            }
            if (parameters['taskName'] === undefined) {
                reject(new Error('Missing required  parameter: taskName'));
                return;
            }
            if (parameters['fromDate'] !== undefined) {
                queryParameters['fromDate'] = parameters['fromDate'];
            }
            if (parameters['fromDate'] === undefined) {
                reject(new Error('Missing required  parameter: fromDate'));
                return;
            }
            if (parameters['toDate'] !== undefined) {
                queryParameters['toDate'] = parameters['toDate'];
            }
            if (parameters['toDate'] === undefined) {
                reject(new Error('Missing required  parameter: toDate'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    ClientDataExport.prototype.GetActiveUsersInformationURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retrieves the list of users for a given distributor/sponsor.
     * @method
     * @name ClientDataExport#GetActiveUsersInformation
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} authorization - access token
     */
    ClientDataExport.prototype.GetActiveUsersInformation = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/integration/distributors/{distributorId}/sponsors/{sponsorId}/users/information';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return ClientDataExport;
}(ApiClass));
export default ClientDataExport;
//# sourceMappingURL=client-data-export.js.map