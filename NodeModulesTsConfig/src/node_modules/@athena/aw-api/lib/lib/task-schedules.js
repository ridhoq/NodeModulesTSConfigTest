"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class TaskSchedules
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var TaskSchedules = /** @class */ (function (_super) {
    __extends(TaskSchedules, _super);
    function TaskSchedules() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TaskSchedules.prototype.CreateDistributorTaskScheduleURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that creates one or more task schedules within a Care Plan.
                    This API also allows the creation of
                    TaskScheduleItems at the same time that the TaskSchedule or schedules are
                    created.
    * @method
    * @name TaskSchedules#CreateDistributorTaskSchedule
         * @param {string} distributorId - The distributor identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The information to be used in creating the TaskSchedule.
         * @param {string} authorization - access token
    */
    TaskSchedules.prototype.CreateDistributorTaskSchedule = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.CreateTaskScheduleURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        queryParameters = {};
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that creates one or more task schedules within a Care Plan.
                    This API also allows the creation of
                    TaskScheduleItems at the same time that the TaskSchedule or schedules are
                    created.
    * @method
    * @name TaskSchedules#CreateTaskSchedule
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {string} carePlanId - The care plan identifier.
         * @param {} model - The information to be used in creating the TaskSchedule.
         * @param {string} authorization - access token
    */
    TaskSchedules.prototype.CreateTaskSchedule = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            form = queryParameters;
            queryParameters = {};
            _this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.ClearTaskSchedulesURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Clears the task schedules from a patient or personalized care plan.
     * @method
     * @name TaskSchedules#ClearTaskSchedules
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The careplan identifier.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.ClearTaskSchedules = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.GetDistributorTaskScheduleURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that retrieves a TaskSchedule for a CarePlan.
     * @method
     * @name TaskSchedules#GetDistributorTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.GetDistributorTaskSchedule = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.RemoveDistributorTaskScheduleURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Remove task schedule froma  distributor.
     * @method
     * @name TaskSchedules#RemoveDistributorTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.RemoveDistributorTaskSchedule = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.GetTaskScheduleURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that retrieves a TaskSchedule for a CarePlan.
     * @method
     * @name TaskSchedules#GetTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.GetTaskSchedule = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.RemoveTaskScheduleURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that removes a TaskSchedule from a CarePlan
     * @method
     * @name TaskSchedules#RemoveTaskSchedule
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.RemoveTaskSchedule = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateTaskScheduleNoteURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates a note on a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleNote
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateTaskScheduleNote = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateDistributorTaskScheduleNoteURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates a note on a distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleNote
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateDistributorTaskScheduleNote = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/note';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateDistributorTaskScheduleTargetURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates the target on a Distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleTarget
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateDistributorTaskScheduleTarget = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateTaskScheduleTargetURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates the target on a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleTarget
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateTaskScheduleTarget = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/target';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateDistributorTaskScheduleRolesAllowedToRecordOutcomeURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a Distributor TaskSchedule
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateDistributorTaskScheduleRolesAllowedToRecordOutcome = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateTaskScheduleRolesAllowedToRecordOutcomeURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates the RolesAllowedToRecordOutcome attribute of a TaskSchedule
     * @method
     * @name TaskSchedules#UpdateTaskScheduleRolesAllowedToRecordOutcome
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The for updating the note
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateTaskScheduleRolesAllowedToRecordOutcome = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/rolesallowedtorecordoutcome';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateDistributorTaskScheduleIsDeactivatedURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.
     * @method
     * @name TaskSchedules#UpdateDistributorTaskScheduleIsDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateDistributorTaskScheduleIsDeactivated = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    TaskSchedules.prototype.UpdateTaskScheduleIsDeactivatedURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
        path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * This is a method that updates the IsDeactivated attribute of a TaskSchedule.
     * @method
     * @name TaskSchedules#UpdateTaskScheduleIsDeactivated
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanId - The care plan identifier.
     * @param {string} taskScheduleId - The task schedule identifier.
     * @param {} model - The binding model.
     * @param {string} authorization - access token
     */
    TaskSchedules.prototype.UpdateTaskScheduleIsDeactivated = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/careplans/{carePlanId}/taskschedules/{taskScheduleId}/isdeactivated';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = 'application/json,text/json,application/xml,text/xml,application/x-www-form-urlencoded';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            path = path.replace('{carePlanId}', "" + parameters['carePlanId']);
            if (parameters['carePlanId'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanId'));
                return;
            }
            path = path.replace('{taskScheduleId}', "" + parameters['taskScheduleId']);
            if (parameters['taskScheduleId'] === undefined) {
                reject(new Error('Missing required  parameter: taskScheduleId'));
                return;
            }
            if (parameters['model'] !== undefined) {
                body = parameters['model'];
            }
            if (parameters['model'] === undefined) {
                reject(new Error('Missing required  parameter: model'));
                return;
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return TaskSchedules;
}(ApiClass));
export default TaskSchedules;
//# sourceMappingURL=task-schedules.js.map