"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ApiClass from './api';
/**
 *
 * @class PatientIndex
 * @param {(string)} [domainOrOptions] - The project domain.
 */
var PatientIndex = /** @class */ (function (_super) {
    __extends(PatientIndex, _super);
    function PatientIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PatientIndex.prototype.GetRecentActivityPatientsForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retreives a list of patients that have recorded a measurement in the given time range.
     * @method
     * @name PatientIndex#GetRecentActivityPatientsForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.  Expected format: yyyy-MM-dd
     * @param {string} endDate - The end date.  Expected format: yyyy-MM-dd
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetRecentActivityPatientsForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/lastmeasurement';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetPopulationCarePlansForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['carePlanIds'] !== undefined) {
            queryParameters['carePlanIds'] = parameters['carePlanIds'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retreives a list of patients that belong to one of the given care plans.
     * @method
     * @name PatientIndex#GetPopulationCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} carePlanIds - The list of care plan identifiers.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetPopulationCarePlansForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/population';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['carePlanIds'] !== undefined) {
                queryParameters['carePlanIds'] = parameters['carePlanIds'];
            }
            if (parameters['carePlanIds'] === undefined) {
                reject(new Error('Missing required  parameter: carePlanIds'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetNoCarePlansForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retreives a list of patients that are not assigned a care plan.
     * @method
     * @name PatientIndex#GetNoCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetNoCarePlansForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/none';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetPersonalPatientCarePlansForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retreives a list of patients that have a personal care plan.
     * @method
     * @name PatientIndex#GetPersonalPatientCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetPersonalPatientCarePlansForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/personal';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetPatientCarePlansForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retreives a list of patients that have a patient care plan.
     * @method
     * @name PatientIndex#GetPatientCarePlansForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetPatientCarePlansForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/careplan/patient';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetPatientsbyNameForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['lastName'] !== undefined) {
            queryParameters['lastName'] = parameters['lastName'];
        }
        if (parameters['firstName'] !== undefined) {
            queryParameters['firstName'] = parameters['firstName'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retreives a list of patients that match a last name.  First name is used for additional filtering.
     * @method
     * @name PatientIndex#GetPatientsbyNameForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} lastName - The last name.
     * @param {string} firstName - The first name.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetPatientsbyNameForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/name';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['lastName'] !== undefined) {
                queryParameters['lastName'] = parameters['lastName'];
            }
            if (parameters['lastName'] === undefined) {
                reject(new Error('Missing required  parameter: lastName'));
                return;
            }
            if (parameters['firstName'] !== undefined) {
                queryParameters['firstName'] = parameters['firstName'];
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetAlertedPatientsForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
    * This is a method that gets a list of all alerted patients for a particular sponsor.
                    Constraints on the list are based on the caller's access permissions.
    * @method
    * @name PatientIndex#GetAlertedPatientsForSponsor
         * @param {string} distributorId - The distributor identifier.
         * @param {string} sponsorId - The sponsor identifier.
         * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
         * @param {string} authorization - access token
    */
    PatientIndex.prototype.GetAlertedPatientsForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/alerted';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetNewPatientsForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retrieves a list of patients that were created within the date range provided.
     * @method
     * @name PatientIndex#GetNewPatientsForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.  Expected format: yyyy-MM-dd
     * @param {string} endDate - The end date.  Expected format: yyyy-MM-dd
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetNewPatientsForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/createddate';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetPatientsByAppointmentDateForSponsorURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['endDate'] !== undefined) {
            queryParameters['endDate'] = parameters['endDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retrieves a list of patients that have appointments within the specified date range.
     * @method
     * @name PatientIndex#GetPatientsByAppointmentDateForSponsor
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.
     * @param {string} endDate - The end date.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetPatientsByAppointmentDateForSponsor = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/appointment';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['endDate'] !== undefined) {
                queryParameters['endDate'] = parameters['endDate'];
            }
            if (parameters['endDate'] === undefined) {
                reject(new Error('Missing required  parameter: endDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    PatientIndex.prototype.GetPatientsByUserLastMeasurementURL = function (parameters) {
        var queryParameters = {};
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement';
        path = path.replace('{distributorId}', "" + parameters['distributorId']);
        path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
        if (parameters['startDate'] !== undefined) {
            queryParameters['startDate'] = parameters['startDate'];
        }
        if (parameters['includeShareCare'] !== undefined) {
            queryParameters['includeShareCare'] = parameters['includeShareCare'];
        }
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }
        var keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(function (key) { return key + '=' + encodeURIComponent(queryParameters[key]); }).join('&')) : '');
    };
    /**
     * Retrieves a list of patients that the current user has recorded task for since a previous date.
     * @method
     * @name PatientIndex#GetPatientsByUserLastMeasurement
     * @param {string} distributorId - The distributor identifier.
     * @param {string} sponsorId - The sponsor identifier.
     * @param {string} startDate - The start date.
     * @param {boolean} includeShareCare - The optional paramter for include/exclude sharecare only users.
     * @param {string} authorization - access token
     */
    PatientIndex.prototype.GetPatientsByUserLastMeasurement = function (parameters) {
        var _this = this;
        var domain = parameters.$domain ? parameters.$domain : this.domain;
        var path = '/api/distributors/{distributorId}/sponsors/{sponsorId}/patients/index/userlastmeasurement';
        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};
        return new Promise(function (resolve, reject) {
            headers['Accept'] = 'application/json, text/json, application/xml, text/xml';
            headers['Content-Type'] = '';
            path = path.replace('{distributorId}', "" + parameters['distributorId']);
            if (parameters['distributorId'] === undefined) {
                reject(new Error('Missing required  parameter: distributorId'));
                return;
            }
            path = path.replace('{sponsorId}', "" + parameters['sponsorId']);
            if (parameters['sponsorId'] === undefined) {
                reject(new Error('Missing required  parameter: sponsorId'));
                return;
            }
            if (parameters['startDate'] !== undefined) {
                queryParameters['startDate'] = parameters['startDate'];
            }
            if (parameters['startDate'] === undefined) {
                reject(new Error('Missing required  parameter: startDate'));
                return;
            }
            if (parameters['includeShareCare'] !== undefined) {
                queryParameters['includeShareCare'] = parameters['includeShareCare'];
            }
            if (parameters['authorization'] !== undefined) {
                headers['Authorization'] = parameters['authorization'];
            }
            if (parameters['authorization'] === undefined) {
                reject(new Error('Missing required  parameter: authorization'));
                return;
            }
            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function (parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }
            _this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    };
    return PatientIndex;
}(ApiClass));
export default PatientIndex;
//# sourceMappingURL=patient-index.js.map